{"version":3,"sources":["utils/index.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCloserString","str","list","min","Infinity","name","forEach","s","lev","levenshtein","get","numberRange","max","numbers","i","push","applyRatio","ratio","nb","Math","round","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","String","fromCharCode","CHARLIST_UPPERCASE_LETTERS","join","CHARLIST_LOWERCASE_LETTERS","CHARLIST_LETTERS","CHARLIST_DIGITS","CHARLIST_POSITION","CHARLIST_TIME","CHARLIST_USERNAME","PLAYERS","getExtract","info","index","type","width","height","left","top","widthCrop","heightCrop","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","extract","isTime","leftExt","widthExt","App","onMount","a","setOnMountOver","setSelectIsDisabled","doOCR","onMountOver","scheduler1","createScheduler","scheduler2","scheduler3","worker1","createWorker","logger","m","console","log","worker2","worker3","worker4","worker5","worker6","addWorker","div","document","getElementById","innerHTML","setOcr","load","loadLanguage","initialize","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","playerIndexes","CTR_MAX_PLAYERS","promisesX","playerIndex","imsTrans","imgTransCopy","imgTrans","clone","scheduler","dimensions","extracted","crop","options","count","getBufferAsync","buffer","getColors","then","colors","rgb","shouldInvert","extractedFin","invert","getBase64","err","src","img","createElement","setAttribute","appendChild","bufferFin","addJob","pathInput","imgIndex","Jimp","read","imgJimp","rotate","grayscale","w","bitmap","h","promisesPositions","map","promisesNames","promisesTimes","Promise","all","results","resultsText","r","data","text","replace","resultsPositions","slice","resultsNames","resultsTimes","playerGuess","d","g","position","player","time","JSON","stringify","terminate","toString","React","ocr","selectIsDisabled","setImgIndex","rel","href","className","disabled","onChange","e","Number","target","value","option","key","label","alt","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oaAIMA,EAAkB,SAACC,EAAaC,GACpC,IAAIC,EAAMC,IACNC,EAAOJ,EAWX,OATAC,EAAKI,SAAQ,SAACC,GACZ,IAAMC,EAAMC,IAAYC,IAAIT,EAAKM,GAE7BC,EAAML,IACRA,EAAMK,EACNH,EAAOE,MAIJF,GAGHM,EAAc,SAACR,EAAaS,GAEhC,IADA,IAAMC,EAAU,GACPC,EAAIX,EAAKW,GAAKF,EAAKE,GAAK,EAAGD,EAAQE,KAAKD,GACjD,OAAOD,GAGHG,EAAa,SAACC,EAAeC,GAAhB,OAA+BC,KAAKC,MAAMH,EAAQC,IAE/DG,EAAY,SAACC,EAAmBC,GAKpC,IAJA,IAAMC,EAAWF,EAAUG,WAAW,GAChCC,EAAUH,EAASE,WAAW,GAC9BE,EAAS,GAENb,EAAIU,EAAUV,GAAKY,EAASZ,GAAK,EACxCa,EAAOZ,KAAKa,OAAOC,aAAaf,IAGlC,OAAOa,GClCIG,EAA6BT,EAAU,IAAK,KAAKU,KAAK,IACtDC,EAA6BX,EAAU,IAAK,KAAKU,KAAK,IACtDE,EAAgB,UAAMD,GAAN,OAAmCF,GACnDI,EAAkBvB,EAAY,EAAG,GAAGoB,KAAK,IACzCI,EAAoBxB,EAAY,EALd,GAKkCoB,KAAK,IACzDK,EAAa,UAAMF,EAAN,MACbG,EAAiB,UAAMJ,GAAN,OAAyBC,EAAzB,QAGjBI,EAAU,CACrB,cACA,UACA,WACA,gBACA,aACA,aACA,iBACA,mBACA,YACA,cACA,aACA,YACA,2BACA,sBACA,aACA,YACA,gBACA,YACA,cACA,WACA,QCbIC,EAAa,SAACC,GAAgE,IAArDC,EAAoD,uDAA5C,EAAGC,EAAyC,uCACzEC,EAAkBH,EAAlBG,MAAOC,EAAWJ,EAAXI,OACTC,EAAO7B,EAAW,IAAM2B,GACxBG,EAAM9B,EAAW,KAAO4B,GACxBG,EAAY/B,EAAW,IAAM2B,GAC7BK,EAAahC,EAAW,KAAO4B,GAE/BK,EAAY,IACZC,EAAW,IACXC,EAAsB,IACtBC,EAAmB,GACnBC,EAAgB,EAAIJ,EAAYC,EAEhCI,EAAY,CAChBR,IAAK9B,EAAWyB,EAAQ,EAAGO,GAC3BJ,OAAQ5B,EAAW,EAAI,EAAGgC,IAGtBO,EAAST,EAAMQ,EAAUR,IACzBU,EAAYF,EAAUV,OAEtBa,EAAcZ,EAAO7B,EAAWiC,EAAWF,GAC3CW,EAAe1C,EAAWqC,EAAeN,GAEzCY,EAAcd,EAAO7B,EAAWmC,EAAqBJ,GACrDa,EAAe5C,EAAW,EAAIqC,EAAgBF,EAAsBD,EAAUH,GAEpF,GAAa,aAATL,EAAqB,CACvB,IAAMmB,EAAU,CACdhB,KAAMA,EACNC,IAAKS,EACLZ,MAAO3B,EAAWoC,EAAkBL,GACpCH,OAAQY,GAGV,OAAOK,EAGT,IAAMC,EAAkB,SAATpB,EACTqB,EAAUD,EAASL,EAAcE,EACjCK,EAAWF,EAASJ,EAAeE,EAEnCC,EAAU,CACdhB,KAAMkB,EACNjB,IAAKS,EACLZ,MAAOqB,EACPpB,OAAQY,GAGV,OAAOK,GAgSMI,EA7RH,WACV,IAAMC,EAAO,uCAAG,sBAAAC,EAAA,sDAEdC,GAAe,GACfC,GAAoB,GAHN,2CAAH,qDAMPC,EAAK,uCAAG,gFAAAH,EAAA,yDACPI,EADO,wDAEZF,GAAoB,GAEdG,EAAaC,4BACbC,EAAaD,4BACbE,EAAaF,4BAEbG,EAAUC,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAG5BG,EAAUL,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAG5BI,EAAUN,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAG5BK,EAAUP,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAG5BM,EAAUR,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAG5BO,EAAUT,uBAAa,CAC3BC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAGlCP,EAAWe,UAAUX,GACrBJ,EAAWe,UAAUL,GAErBR,EAAWa,UAAUJ,GACrBT,EAAWa,UAAUH,GAErBT,EAAWY,UAAUF,GACrBV,EAAWY,UAAUD,IAEfE,EAAMC,SAASC,eAAe,eAC3BF,EAAIG,UAAY,IAEzBC,EAAO,mBAEPA,EAAO,oBA9CK,UA+CNhB,EAAQiB,OA/CF,eAiDZD,EAAO,oBAjDK,UAkDNV,EAAQW,OAlDF,eAoDZD,EAAO,oBApDK,UAqDNT,EAAQU,OArDF,eAuDZD,EAAO,oBAvDK,UAwDNR,EAAQS,OAxDF,eA0DZD,EAAO,oBA1DK,UA2DNP,EAAQQ,OA3DF,eA6DZD,EAAO,oBA7DK,UA8DNN,EAAQO,OA9DF,eAgEZD,EAAO,qBAEPA,EAAO,sBAlEK,UAmENhB,EAAQkB,aAhID,OA6DD,eAqEZF,EAAO,sBArEK,UAsENV,EAAQY,aAnID,OA6DD,eAwEZF,EAAO,sBAxEK,UAyENT,EAAQW,aAtID,OA6DD,eA2EZF,EAAO,sBA3EK,UA4ENR,EAAQU,aAzID,OA6DD,eA8EZF,EAAO,sBA9EK,UA+ENP,EAAQS,aA5ID,OA6DD,eAiFZF,EAAO,sBAjFK,UAkFNN,EAAQQ,aA/ID,OA6DD,eAoFZF,EAAO,wBAEPA,EAAO,yBAtFK,UAuFNhB,EAAQmB,WApJD,OA6DD,eAyFZH,EAAO,yBAzFK,UA0FNV,EAAQa,WAvJD,OA6DD,eA4FZH,EAAO,yBA5FK,UA6FNT,EAAQY,WA1JD,OA6DD,eA+FZH,EAAO,yBA/FK,UAgGNR,EAAQW,WA7JD,OA6DD,eAkGZH,EAAO,yBAlGK,UAmGNP,EAAQU,WAhKD,OA6DD,eAqGZH,EAAO,yBArGK,UAsGNN,EAAQS,WAnKD,OA6DD,eAwGZH,EAAO,sBAEPA,EAAO,uBA1GK,UA2GNhB,EAAQoB,cAAc,CAC1BC,wBAAyB7D,EACzB8D,sBDjLyB,MCoEf,eAgHZN,EAAO,uBAhHK,UAiHNV,EAAQc,cAAc,CAC1BC,wBAAyB7D,EACzB8D,sBDvLyB,MCoEf,eAsHZN,EAAO,uBAtHK,UAuHNT,EAAQa,cAAc,CAC1BC,wBAAyB5D,EACzB6D,sBD7LyB,MCoEf,eA4HZN,EAAO,uBA5HK,UA6HNR,EAAQY,cAAc,CAC1BC,wBAAyB5D,EACzB6D,sBDnMyB,MCoEf,eAkIZN,EAAO,uBAlIK,UAmINP,EAAQW,cAAc,CAC1BC,wBAAyB9D,EACzB+D,sBDzMyB,MCoEf,eAwIZN,EAAO,uBAxIK,UAyINN,EAAQU,cAAc,CAC1BC,wBAAyB9D,EACzB+D,sBD/MyB,MCoEf,eA8INC,EAAgBxF,EAAY,EAAGyF,GAE/BC,EAhJM,+BAAAlC,EAAA,MAgJM,WAAOmC,EAAqB5D,EAAsCF,EAAW+D,GAA7E,iCAAApC,EAAA,6DACVqC,EAAeC,EAASC,QAC1BC,EAAY,KACKA,EAAR,SAATjE,EAA6B8B,EACf,WAAT9B,EAA+BgC,EACvBC,EACXiC,EAAarE,EAAWC,EAAM8D,EAAa5D,GAE3CmE,EAAYL,EAAaM,KAAKF,EAAW/D,KAAM+D,EAAW9D,IAAK8D,EAAWjE,MAAOiE,EAAWhE,QAC5FmE,EAAU,CACdC,MAAO,EACPtE,KDhOiB,cCqNH,SAcUmE,EAAUI,eDnOjB,cCqNH,cAcVC,EAdU,iBAeEC,IAAUD,EAAQH,GAASK,MAAK,SAACC,GAEjD,OADArC,QAAQC,IAAI,8BAAqBqB,EAAae,GACvC,CAACA,EAAO,GAAGC,MAAOD,EAAO,GAAGC,UAjBrB,eAeVA,EAfU,OAoBVC,EAAeD,EAAI,GAAG,GAAKA,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IACpFE,EAAeD,EAAeV,EAAUY,SAAWZ,GAC5Ca,UD3OM,cC2Oe,SAACC,EAAUC,GAC3C,IAAIC,EAAMpC,SAASqC,cAAc,OACjCD,EAAIE,aAAa,MAAOH,GACxB,IAAMpC,EAAMC,SAASC,eAAe,YAChCF,GAAKA,EAAIwC,YAAYH,MA1BX,UA6BaL,EAAaP,eDlPvB,cCqNH,eA6BVgB,EA7BU,yBA8BTtB,EAAUuB,OAAO,YAAaD,IA9BrB,4CAhJN,4DAiLNE,EAjLM,mFAiLkFC,EAjLlF,QAkLZxC,EAAO,qBAlLK,sBAqLYyC,IAAKC,KAAKH,GArLtB,gBAqLJI,EArLI,OAuLV3C,EAAO,uBACPa,EAAW8B,EAAQC,QAAQ,KAAKC,aAEvBf,UD/PU,cC+PW,SAACC,EAAUC,GACvC,IAAIC,EAAMpC,SAASqC,cAAc,OACjCD,EAAIE,aAAa,MAAOH,GACxB,IAAMpC,EAAMC,SAASC,eAAe,YAChCF,GAAKA,EAAIwC,YAAYH,MAGrBa,EAAIjC,EAASkC,OAAOhG,MACpBiG,EAAInC,EAASkC,OAAO/F,OACpBJ,EAAO,CAAEG,MAAO+F,EAAG9F,OAAQgG,GACjC5D,QAAQC,IAAI,aAAczC,EAAKG,MAAO,cAAeH,EAAKI,QAEpDiG,EAAoB1C,EAAc2C,KAAI,SAACxC,GAAD,OAAiBD,EAAUC,EAAa,WAAY9D,EAAMiE,MAChGsC,EAAgB5C,EAAc2C,KAAI,SAACxC,GAAD,OAAiBD,EAAUC,EAAa,SAAU9D,EAAMiE,MAC1FuC,EAAgB7C,EAAc2C,KAAI,SAACxC,GAAD,OAAiBD,EAAUC,EAAa,OAAQ9D,EAAMiE,MAE9Fb,EAAO,6BA1MG,WA2MYqD,QAAQC,IAAR,sBAAgBL,GAAhB,YAAsCE,GAAtC,YAAwDC,KA3MpE,gBA2MJG,EA3MI,OA4MJC,EAAcD,EAAQL,KAAI,SAACO,GAAD,OAAoBA,EAAUC,KAAKC,KFzRhCC,QAAQ,MAAO,IAAIA,QAAQ,KAAM,OE2R9DC,EAAmBL,EAAYM,MAAM,EAAG,GAC9C1E,QAAQC,IAAI,qEAA4DwE,GAClEE,EAAeP,EAAYM,MAAM,EAAG,IACpCE,EAAeR,EAAYM,MAAM,IAEjCJ,EAAiB,GACvBnD,EAAc7F,SAAQ,SAACgG,GACrB,IAAMuD,EAAcF,EAAarD,GAC3BwD,EAAI,CACRC,EAAGF,EACHG,SAAUP,EAAiBnD,GAC3B2D,OAAQjK,EAAgB6J,EAAavH,GACrC4H,KAAMN,EAAatD,IAErBgD,EAAKvI,KAAK+I,MAGZlE,EAAOuE,KAAKC,UAAUd,IACtBjF,GAAoB,GAhOV,WAkOJG,EAAW6F,YAlOP,2BAmOJ3F,EAAW2F,YAnOP,2BAoOJ1F,EAAW0F,YApOP,gEAsOVzE,EAAO,wBAAD,OAAyB,KAAa0E,WAAtC,sBACNjG,GAAoB,GAvOV,8DAAH,qDA2OX,EAAsBkG,WAAe,iBAArC,mBAAOC,EAAP,KAAY5E,EAAZ,KACA,EAAgD2E,YAAe,GAA/D,mBAAOE,EAAP,KAAyBpG,EAAzB,KACA,EAAsCkG,YAAe,GAArD,mBAAOhG,EAAP,KAAoBH,EAApB,KACA,EAAgCmG,WAAe,GAA/C,mBAAOnC,EAAP,KAAiBsC,EAAjB,KAEAH,aAAgB,WACdjG,MACC,CAAC8D,IAEJmC,aAAgB,WACdrG,MACC,IAEH,IAIM0D,EAAG,mFAA+EQ,EAA/E,QACHrB,EAAUpG,EAAY,EAAG,GAE/B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,wCACA,wBAAMgK,IAAI,YAAYC,KAAK,wCAE7B,uBAAKC,UAAU,QACb,sBAAIA,UAAU,SAAd,WACA,0BAAQC,SAAUL,EAAkBM,SAfzB,SAACC,GAChBN,EAAYO,OAAOD,EAAEE,OAAOC,UAerBpE,EAAQ+B,KAAI,SAACsC,GAAD,OACX,0BAAQC,IAAKD,EAAQE,MAAOF,EAAOd,WAAYa,MAAOC,GAAtD,SACSA,OAIb,uBAAKG,IAAG,kBAAanD,GAAYR,IAAKA,IACtC,2BAAM4C,GACN,uBAAKgB,GAAG,gBCnVIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAGP,kBAAC,EAAD,MAEAtG,SAASC,eAAe,SDsHpB,kBAAmBsG,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAC+E,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNtH,QAAQsH,MAAMA,EAAMC,c","file":"static/js/main.e97c4735.chunk.js","sourcesContent":["import levenshtein from 'fast-levenshtein';\n\nconst cleanString = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\n\nconst getCloserString = (str: string, list: string[]) => {\n  let min = Infinity;\n  let name = str;\n\n  list.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.round(ratio * nb);\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nexport { applyRatio, charRange, cleanString, getCloserString, numberRange };\n","import { charRange, numberRange } from './utils';\n\nexport const CTR_MAX_PLAYERS = 8;\nexport const CHARLIST_UPPERCASE_LETTERS = charRange('A', 'Z').join('');\nexport const CHARLIST_LOWERCASE_LETTERS = charRange('a', 'z').join('');\nexport const CHARLIST_LETTERS = `${CHARLIST_LOWERCASE_LETTERS}${CHARLIST_UPPERCASE_LETTERS}`;\nexport const CHARLIST_DIGITS = numberRange(0, 9).join('');\nexport const CHARLIST_POSITION = numberRange(1, CTR_MAX_PLAYERS).join('');\nexport const CHARLIST_TIME = `${CHARLIST_DIGITS}:-`;\nexport const CHARLIST_USERNAME = `${CHARLIST_LETTERS}${CHARLIST_DIGITS}:-_.`;\nexport const MIME_JPEG = 'image/jpeg';\nexport const PSM_SINGLE_LINE = '7';\nexport const PLAYERS = [\n  'caso-pyro01',\n  'stin_wz',\n  'ZouGui28',\n  'francois24540',\n  'DGregson97',\n  'nessanumen',\n  'AlexKenshin_33',\n  'CrazyLittleJazzy',\n  'mmartin_m',\n  'Dr N. Tropy',\n  'Kity_Panda',\n  'Jakubeq1_',\n  'Assistant de laboratoire',\n  'Bébé N. Tropy',\n  'Faux Crash',\n  'giomastik',\n  'MarioAlfie123',\n  'kimmyy043',\n  'Mav15151515',\n  'Axe34070',\n  'Stew'\n];\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\n\nimport {\n  CHARLIST_POSITION,\n  CHARLIST_TIME,\n  CHARLIST_USERNAME,\n  CTR_MAX_PLAYERS,\n  MIME_JPEG,\n  PLAYERS,\n  PSM_SINGLE_LINE\n} from './constants';\nimport { applyRatio, cleanString, getCloserString, numberRange } from './utils';\n\nconst language = 'eng';\n\nconst getExtract = (info: any, index = 0, type: 'time' | 'pseudo' | 'position') => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  if (type === 'position') {\n    const extract = {\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop),\n      height: heightExt\n    };\n\n    return extract;\n  }\n\n  const isTime = type === 'time';\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract = {\n    left: leftExt,\n    top: topExt,\n    width: widthExt,\n    height: heightExt\n  };\n\n  return extract;\n};\n\nconst App = () => {\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n    setSelectIsDisabled(true);\n\n    const scheduler1 = createScheduler();\n    const scheduler2 = createScheduler();\n    const scheduler3 = createScheduler();\n\n    const worker1 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const worker2 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const worker3 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const worker4 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const worker5 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const worker6 = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    scheduler1.addWorker(worker1);\n    scheduler1.addWorker(worker2);\n\n    scheduler2.addWorker(worker3);\n    scheduler2.addWorker(worker4);\n\n    scheduler3.addWorker(worker5);\n    scheduler3.addWorker(worker6);\n\n    const div = document.getElementById('img-show');\n    if (div) div.innerHTML = '';\n\n    setOcr('Loading engines');\n\n    setOcr('Loading engine 1');\n    await worker1.load();\n\n    setOcr('Loading engine 2');\n    await worker2.load();\n\n    setOcr('Loading engine 3');\n    await worker3.load();\n\n    setOcr('Loading engine 4');\n    await worker4.load();\n\n    setOcr('Loading engine 5');\n    await worker5.load();\n\n    setOcr('Loading engine 6');\n    await worker6.load();\n\n    setOcr('Loading languages');\n\n    setOcr('Loading language 1');\n    await worker1.loadLanguage(language);\n\n    setOcr('Loading language 2');\n    await worker2.loadLanguage(language);\n\n    setOcr('Loading language 3');\n    await worker3.loadLanguage(language);\n\n    setOcr('Loading language 4');\n    await worker4.loadLanguage(language);\n\n    setOcr('Loading language 5');\n    await worker5.loadLanguage(language);\n\n    setOcr('Loading language 6');\n    await worker6.loadLanguage(language);\n\n    setOcr('Initializing engines');\n\n    setOcr('Initializing engine 1');\n    await worker1.initialize(language);\n\n    setOcr('Initializing engine 2');\n    await worker2.initialize(language);\n\n    setOcr('Initializing engine 3');\n    await worker3.initialize(language);\n\n    setOcr('Initializing engine 4');\n    await worker4.initialize(language);\n\n    setOcr('Initializing engine 5');\n    await worker5.initialize(language);\n\n    setOcr('Initializing engine 6');\n    await worker6.initialize(language);\n\n    setOcr('Setting parameters');\n\n    setOcr('Setting parameter 1');\n    await worker1.setParameters({\n      tessedit_char_whitelist: CHARLIST_TIME,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    setOcr('Setting parameter 2');\n    await worker2.setParameters({\n      tessedit_char_whitelist: CHARLIST_TIME,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    setOcr('Setting parameter 3');\n    await worker3.setParameters({\n      tessedit_char_whitelist: CHARLIST_USERNAME,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    setOcr('Setting parameter 4');\n    await worker4.setParameters({\n      tessedit_char_whitelist: CHARLIST_USERNAME,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    setOcr('Setting parameter 5');\n    await worker5.setParameters({\n      tessedit_char_whitelist: CHARLIST_POSITION,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    setOcr('Setting parameter 6');\n    await worker6.setParameters({\n      tessedit_char_whitelist: CHARLIST_POSITION,\n      tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n    });\n\n    const playerIndexes = numberRange(0, CTR_MAX_PLAYERS - 1);\n\n    const promisesX = async (playerIndex: number, type: 'time' | 'pseudo' | 'position', info: any, imsTrans: any) => {\n      const imgTransCopy = imgTrans.clone();\n      let scheduler = null;\n      if (type === 'time') scheduler = scheduler1;\n      else if (type === 'pseudo') scheduler = scheduler2;\n      else scheduler = scheduler3;\n      const dimensions = getExtract(info, playerIndex, type);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: MIME_JPEG\n      };\n\n      const buffer: any = await extracted.getBufferAsync(MIME_JPEG);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        console.log('🚀 ~ rgb ~ colors', playerIndex, colors);\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n      extractedFin.getBase64(MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementById('img-show');\n        if (div) div.appendChild(img);\n      });\n\n      const bufferFin: any = await extractedFin.getBufferAsync(MIME_JPEG);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    const pathInput = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n    setOcr('Reading the image');\n    let imgTrans: any;\n    try {\n      const imgJimp = await Jimp.read(pathInput);\n\n      setOcr('Rotating the image');\n      imgTrans = imgJimp.rotate(-6.2).grayscale();\n\n      imgTrans.getBase64(MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementById('img-show');\n        if (div) div.appendChild(img);\n      });\n\n      const w = imgTrans.bitmap.width;\n      const h = imgTrans.bitmap.height;\n      const info = { width: w, height: h };\n      console.log('info.width', info.width, 'info.height', info.height);\n\n      const promisesPositions = playerIndexes.map((playerIndex) => promisesX(playerIndex, 'position', info, imgTrans));\n      const promisesNames = playerIndexes.map((playerIndex) => promisesX(playerIndex, 'pseudo', info, imgTrans));\n      const promisesTimes = playerIndexes.map((playerIndex) => promisesX(playerIndex, 'time', info, imgTrans));\n\n      setOcr('Starting text recognition');\n      const results = await Promise.all([...promisesPositions, ...promisesNames, ...promisesTimes]);\n      const resultsText = results.map((r) => cleanString((r as any).data.text));\n\n      const resultsPositions = resultsText.slice(0, 8);\n      console.log('🚀 ~ file: App.tsx ~ line 269 ~ doOCR ~ resultsPositions', resultsPositions);\n      const resultsNames = resultsText.slice(8, 16);\n      const resultsTimes = resultsText.slice(16);\n\n      const data: string[] = [];\n      playerIndexes.forEach((playerIndex) => {\n        const playerGuess = resultsNames[playerIndex];\n        const d = {\n          g: playerGuess,\n          position: resultsPositions[playerIndex],\n          player: getCloserString(playerGuess, PLAYERS),\n          time: resultsTimes[playerIndex]\n        };\n        data.push(d as any);\n      });\n\n      setOcr(JSON.stringify(data));\n      setSelectIsDisabled(false);\n\n      await scheduler1.terminate();\n      await scheduler2.terminate();\n      await scheduler3.terminate();\n    } catch (err) {\n      setOcr(`Unable to open image ${(err as any).toString()}. Please restart.`);\n      setSelectIsDisabled(false);\n    }\n  };\n\n  const [ocr, setOcr] = React.useState('Pick an image');\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [imgIndex, setImgIndex] = React.useState(1);\n\n  React.useEffect(() => {\n    doOCR();\n  }, [imgIndex]);\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setImgIndex(Number(e.target.value));\n  };\n\n  const src = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n  const options = numberRange(1, 5);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>CTR OCR</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/ctr-ocr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">CTR OCR</h1>\n        <select disabled={selectIsDisabled} onChange={onChange}>\n          {options.map((option: number) => (\n            <option key={option} label={option.toString()} value={option}>\n              Image {option}\n            </option>\n          ))}\n        </select>\n        <img alt={`Example ${imgIndex}`} src={src} />\n        <div>{ocr}</div>\n        <div id=\"img-show\"></div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // TODO: re-add\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}