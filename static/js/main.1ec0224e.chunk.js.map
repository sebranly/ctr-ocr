{"version":3,"sources":["types.ts","constants/general.ts","constants/index.ts","utils/string.ts","utils/number.ts","utils/charList.ts","utils/userAgent.ts","utils/index.ts","utils/image.ts","utils/array.ts","utils/validation.ts","utils/date.ts","utils/lorenzi.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","Progress","AUTHOR_GITHUB","PROJECT_URL","GUIDE_FOLDER","URL_CPUS","EXAMPLE_IMAGES_FOLDER","EXAMPLE_IMAGES_FOLDER_FULL_EVENT","MIME_JPEG","MIME_PNG","FFA_POINTS_SCHEME","WAR_POINTS_SCHEME","PLACEHOLDER_PLAYERS","cleanString","str","replaceAll","getCloserString","list","listSafe","filter","s","min","Infinity","name","forEach","lev","levenshtein","get","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","i","push","String","fromCharCode","sortCaseInsensitive","a","b","lowerA","toLowerCase","lowerB","numberRange","max","numbers","applyRatio","ratio","nb","Math","floor","getCharListDigits","join","getCharListUsername","charListUppercaseLetters","charListLowercaseLetters","charListLetters","isKeywordUA","userAgent","keyword","browser","includes","formatCpuPlayers","cpuPlayers","length","sort","getPlayersPlaceholder","nbPlayers","isChrome","isChromeUA","isFirefox","isFirefoxUA","isMobile","type","device","isMobileUA","slice","getPlayers","players","split","getReferencePlayers","humanPlayers","includeCpuPlayers","humanPlayersSplit","cpuPlayersSplit","getPositionString","position","lastDigit","getParams","category","Position","Time","Username","tessedit_char_whitelist","tessedit_pageseg_mode","getTeamNames","nbTeams","map","n","getMimeType","extension","getExtract","info","index","width","height","left","top","widthCrop","heightCrop","All","ratioHeight","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","leftExt","widthExt","getFilenameWithoutExtension","filename","sortImagesByFilename","images","imageA","imageB","nameA","nameB","strA","strB","regexAlpha","regexNumeric","newA","replace","newB","aN","parseInt","bN","sortAlphanumeric","isEqual","a1","a2","every","v","validatePoints","points","validation","correct","errMsg","sortedPoints","validateUsernames","usernames","some","uniq","formatDate","dateTimestamp","d","Date","month","getMonth","day","getDate","getFullYear","createLorenziTeams","races","playerTeams","teams","playersPoints","createLorenziPlayersPoints","teamPlayersLines","team","indexTeam","teamLine","teamIndex","getColorHexadecimalTeam","Object","keys","player","pointsLine","line","createLorenziIntro","race","username","relevantResult","find","now","createLorenziFFA","playersLines","playerPoints","App","renderBodyPointsScheme","slicedPointsScheme","pointsScheme","_points","indexPoints","key","className","value","disabled","selectIsDisabled","onChange","onChangePointsScheme","renderBody","renderOption","option","indexOption","label","classesSelectPlayer","resultsOcr","resultOcr","indexPlayer","onChangeResultsPlayer","optionsResultsPlayerHuman","optionsResultsPlayerCpu","renderOptions","onChangeResultsPoints","renderRace","labelRace","validationUsernames","r","validationPoints","croppedImages","classes","alt","src","renderCroppedImage","renderTable","renderLorenzi","indexRace","incorrectRaces","getIncorrectRaces","labelError","rowsLorenzi","lorenzi","match","options","message","text","onCopy","setCopiedLorenzi","copiedLorenzi","href","rel","title","target","classPlatform","rows","renderPointsSchemeSection","renderTablePointsScheme","renderTeamSection","onChangeNbTeams","optionsNbTeams","renderTeamRepartition","onChangeTeam","e","currentTarget","newPlayerTeams","setPlayerTeams","renderPlayerTeamRepartition","colorPlayer","playerTeam","indexOf","getColorPlayer","playerClassnames","isChecked","id","checked","htmlFor","renderPlayerTeams","isFFA","classesValidation","validationTeams","isWarning","playersNames","renderCpuSection","cpuData","guideCpu","optionsCpuLanguages","textCheckbox","shouldIncludeCpuPlayers","nbPlayersTyped","onCpuCheckboxChange","onChangeCpuLanguage","cpuLanguage","placeholder","onMount","setOnMountOver","setSelectIsDisabled","fetch","then","response","json","data","setCpuData","setCpuPlayers","doOCR","onMountOver","setOcrProgress","Started","setOcrProgressText","setResultsOcr","setIndexRace","setCroppedImages","setLorenzi","setStartOverConfirm","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","promisesX","playerIndex","imgTransCopy","scheduler","dimensions","mimeType","extracted","crop","count","getBufferAsync","buffer","getColors","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","resultsOcrTemp","croppedImagesTemp","imagesURLs","progressText","Jimp","read","imgJimpTemp","initialHeight","bitmap","imgJimp","resize","AUTO","imgTrans","rotate","h","w","getExtension","dimensionsCrop","clone","getBase64","err","imgTransGray","grayscale","promisesNames","Promise","all","results","resultsNames","dataResults","referencePlayers","playerGuess","Done","terminate","useWindowSize","React","NotStarted","ocrProgress","ocrProgressText","setImages","setImagesURLs","setNbPlayers","setCpuLanguage","setPlayers","setPointsScheme","copiedPlayers","setCopiedPlayers","setIncludeCpuPlayers","setTeams","setNbTeams","startOverConfirm","newImageUrls","image","URL","createObjectURL","newLorenzi","createLorenzi","onClickStartOver","_e","onClickStartOverConfirm","window","location","reload","onChangeIndexRace","delta","newIndex","onChangeImage","files","onChangeNbPlayers","newNbTeams","Number","teamNames","indexPointsScheme","copy","indexResultOcr","newVal","getOptionsTeams","classBgDisabled","missingTeamForPlayers","incorrectTeamForPlayers","seenTeams","validateTeams","validationPointsScheme","navigator","userAgentResult","UAParser","getResult","placeholderPlayers","issueOnTeams","issueOnPointsScheme","document","body","scrollHeight","innerHeight","numberOfPieces","recycle","minimumValue","maximumValue","initialValue","onChangeNumericStepper","thumbColor","stepValue","size","inactiveTrackColor","activeTrackColor","activeButtonColor","inactiveIconColor","hoverIconColor","activeIconColor","disabledIconColor","thumbShadowAnimationOnTrackHoverEnabled","focusRingColor","renderNumericStepperPlayers","isFFASetup","isWarSetup","onClick","renderPointsSchemeMainSection","jpgImage","pngImage","guideImage","multiple","accept","renderImagesUpload","imageSrc","colorText","classesText","renderStart","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1ec0224e.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport enum Progress {\n  NotStarted = 'not_started',\n  Started = 'started',\n  Done = 'done'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n  isWarning?: boolean;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n\nexport type Result = {\n  username: string;\n  position: number;\n  points: number;\n};\n","export const WEBSITE_LANGUAGE = 'en';\nexport const AUTHOR_NAME = 'sebranly';\nexport const AUTHOR_GITHUB = `https://${AUTHOR_NAME}.github.io`;\nexport const PROJECT_NAME = 'ctr-ocr';\nexport const JSON_FOLDER = 'ctr-ocr';\nexport const PROJECT_URL = `https://github.com/${AUTHOR_NAME}/${PROJECT_NAME}`;\nexport const CRASH_TEAM_RANKING_AUTHOR_URL = 'https://crashteamranking.com/members/siblingbling/tt/';\nexport const GUIDE_FOLDER = `${PROJECT_URL}/blob/main/doc/guide/${WEBSITE_LANGUAGE}/`;\nexport const LOG_CONSOLE = false;\nexport const WEBSITE_TITLE = 'Crash Team Results';\nexport const WEBSITE_VERSION = '1.0.14';\nexport const WEBSITE_DEFAULT_LANGUAGE = 'en';\nexport const URL_CPUS = `${AUTHOR_GITHUB}/json/${JSON_FOLDER}/players.json`;\nexport const EXAMPLE_IMAGES_FOLDER = `https://raw.githubusercontent.com/${AUTHOR_NAME}/${PROJECT_NAME}/main/src/img/examples/`;\nexport const EXAMPLE_IMAGES_FOLDER_FULL_EVENT = `${PROJECT_URL}/tree/main/src/img/examples/full-event/`;\nexport const VIDEO_TUTORIAL = 'https://youtu.be/XjwoKGtEQag';\n","// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// The following is applicable to online races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\nexport const MAX_HEIGHT_IMG = 1_000;\nexport const MIME_JPEG = 'image/jpeg';\nexport const MIME_PNG = 'image/png';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const SEPARATOR_PLAYERS_LORENZI = '|';\nexport const TIME_DNF = '--:--:--';\nexport const PLACEHOLDER_CPUS = 'Loading CPUs...';\n// There will always be a possibility for 2 teams\nexport const INITIAL_TEAMS_NB = 2;\nexport const FFA_POINTS_SCHEME = [10, 8, 7, 5, 4, 3, 2, 1];\nexport const WAR_POINTS_SCHEME = [10, 8, 6, 5, 4, 3, 2, 1];\nexport const LORENZI_TABLE_URL = 'https://gb.hlorenzi.com/table';\nexport const PLACEHOLDER_PLAYERS = [\n  'ZouGui28',\n  'Nefarious_CTR',\n  'Kyo-Bomba',\n  'WadaDim-PatroL',\n  'Hyène_JurassX',\n  'Alexiz',\n  'Colonel_Hay',\n  'TATANE'\n];\n","import levenshtein from 'fast-levenshtein';\n\nconst cleanString = (str: string) => str.replaceAll('\\n', '').replaceAll(' ', '');\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst sortAlphanumeric = (strA: string, strB: string) => {\n  const regexAlpha = /[^a-zA-Z]/g;\n  const regexNumeric = /[^0-9]/g;\n\n  var newA = strA.replace(regexAlpha, '');\n  var newB = strB.replace(regexAlpha, '');\n\n  if (newA === newB) {\n    var aN = parseInt(strA.replace(regexNumeric, ''), 10);\n    var bN = parseInt(strB.replace(regexNumeric, ''), 10);\n    return aN === bN ? 0 : aN > bN ? 1 : -1;\n  }\n\n  return newA > newB ? 1 : -1;\n};\n\nconst sortCaseInsensitive = (a: string, b: string) => {\n  if (!a || !b) return 1;\n  const lowerA = a.toLowerCase();\n  const lowerB = b.toLowerCase();\n\n  if (lowerA === lowerB) return 0;\n\n  return lowerA > lowerB ? 1 : -1;\n};\n\nexport { charRange, cleanString, getCloserString, sortAlphanumeric, sortCaseInsensitive };\n","const numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nexport { applyRatio, numberRange };\n","import { CTR_MAX_PLAYERS } from '../constants';\nimport { numberRange } from './number';\nimport { charRange } from './string';\n\nconst getCharListPosition = () => numberRange(1, CTR_MAX_PLAYERS).join('');\nconst getCharListDigits = () => numberRange(0, 9).join('');\nconst getCharListTime = () => `${getCharListDigits()}:-`;\n\nconst getCharListUsername = () => {\n  const charListUppercaseLetters = charRange('A', 'Z').join('');\n  const charListLowercaseLetters = charRange('a', 'z').join('');\n  const charListLetters = `${charListLowercaseLetters}${charListUppercaseLetters}`;\n\n  return `${charListLetters}${getCharListDigits()}:-_. `;\n};\n\nexport { getCharListPosition, getCharListDigits, getCharListTime, getCharListUsername };\n","import UAParser from 'ua-parser-js';\n\nconst isMobileUA = (userAgent: UAParser.IResult) => {\n  const type = userAgent.device?.type ?? '';\n\n  return ['mobile', 'tablet'].includes(type);\n};\n\nconst isKeywordUA = (userAgent: UAParser.IResult, keyword: string) => {\n  const name = userAgent.browser?.name ?? '';\n\n  return name.includes(keyword);\n};\n\nconst isChromeUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Chrome');\nconst isFirefoxUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Firefox');\n\nexport { isMobileUA, isChromeUA, isFirefoxUA };\n","import { PLACEHOLDER_PLAYERS, PSM_SINGLE_CHAR, PSM_SINGLE_LINE, SEPARATOR_PLAYERS } from '../constants';\nimport { Category } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\nimport { getCharListPosition, getCharListTime, getCharListUsername } from './charList';\nimport { numberRange } from './number';\nimport { isChromeUA, isFirefoxUA, isMobileUA } from './userAgent';\n\nconst formatCpuPlayers = (cpuPlayers: string[]) => {\n  if (!cpuPlayers || cpuPlayers.length === 0) return '';\n\n  return cpuPlayers\n    .filter((s: string) => !!s)\n    .sort()\n    .join(SEPARATOR_PLAYERS);\n};\n\nconst getPlayersPlaceholder = (nbPlayers: number, userAgent: UAParser.IResult) => {\n  if (nbPlayers < 1) return '';\n\n  const isChrome = isChromeUA(userAgent);\n  const isFirefox = isFirefoxUA(userAgent);\n  const isMobile = isMobileUA(userAgent);\n\n  const canBeMultiLine = nbPlayers > 1 && (isChrome || isFirefox) && !isMobile;\n\n  if (!canBeMultiLine) return PLACEHOLDER_PLAYERS[0];\n\n  return PLACEHOLDER_PLAYERS.slice(0, nbPlayers).join('\\n');\n};\n\nconst getPlayers = (players: string) => {\n  if (!players) return [];\n\n  return players.split(SEPARATOR_PLAYERS).filter((s: string) => !!s);\n};\n\nconst isHumanPlayer = (player: string, humanPlayers: string) => {\n  if (!humanPlayers) return false;\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  return humanPlayersSplit.includes(player);\n};\n\nconst getReferencePlayers = (humanPlayers: string, cpuPlayers: string, includeCpuPlayers: boolean) => {\n  if (!humanPlayers) return [];\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  if (!includeCpuPlayers || !cpuPlayers) return humanPlayersSplit;\n\n  const cpuPlayersSplit = getPlayers(cpuPlayers);\n\n  return [...humanPlayersSplit, ...cpuPlayersSplit];\n};\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1_000 + minutes * 60 * 1_000;\n\n  return milliseconds;\n};\n\nconst getOptionsTeams = (nbPlayers: number) => {\n  if ([0, 1, 2].includes(nbPlayers)) return [nbPlayers];\n\n  const teams = uniq([nbPlayers, ...numberRange(2, nbPlayers - 1).sort()]);\n\n  return teams;\n};\n\nconst getPositionString = (position: number) => {\n  if (position < 1) return `${position}`;\n\n  if ([11, 12, 13].includes(position)) return `${position}th`;\n\n  const lastDigit = position % 10;\n\n  if (lastDigit === 1) return `${position}st`;\n  if (lastDigit === 2) return `${position}nd`;\n  if (lastDigit === 3) return `${position}rd`;\n\n  return `${position}th`;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: getCharListPosition(),\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: getCharListUsername(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: getCharListTime(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst getTeamNames = (nbTeams: number) => {\n  if (nbTeams === 0) return [];\n\n  return numberRange(1, nbTeams).map((n: number) => `Team ${n}`);\n};\n\nconst getColorPlayer = (player: string, teams: string[], playerTeams: Record<string, string>) => {\n  const playerTeam = playerTeams[player];\n\n  if (!playerTeam) return 'black';\n\n  const index = teams.indexOf(playerTeam);\n\n  switch (index) {\n    case 0:\n      return 'blue';\n    case 1:\n      return 'red';\n    case 2:\n      return 'green';\n    case 3:\n      return 'orange';\n    case 4:\n      return 'purple';\n    case 5:\n      return 'brown';\n    case 6:\n      return 'grey';\n    default:\n      return 'black';\n  }\n};\n\nconst getColorHexadecimalTeam = (teamIndex: number) => {\n  switch (teamIndex) {\n    case 0:\n      return '#33CCFF';\n    case 1:\n      return '#FF4040';\n    case 2:\n      return '#008000';\n    case 3:\n      return '#FFA500';\n    case 4:\n      return '#6A0DAD';\n    case 5:\n      return '#964B00';\n    case 6:\n      return '#808080';\n    default:\n      // As it's used as a background, we use opposite of black here\n      return '#FFFFFF';\n  }\n};\n\nexport {\n  convertToMs,\n  formatCpuPlayers,\n  getOptionsTeams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getReferencePlayers,\n  getTeamNames,\n  getColorHexadecimalTeam,\n  getColorPlayer,\n  getPositionString,\n  getParams,\n  isHumanPlayer,\n  positionIsValid\n};\n","import { applyRatio } from './number';\nimport { CTR_MAX_PLAYERS, MIME_JPEG, MIME_PNG } from '../constants';\nimport { Category, Coord } from '../types';\nimport { sortAlphanumeric } from './string';\n\nconst getMimeType = (extension: string) => {\n  if (!extension) return MIME_JPEG;\n\n  const isPng = extension.toLowerCase() === 'png';\n\n  return isPng ? MIME_PNG : MIME_JPEG;\n};\n\n// TODO: for All, index is actually the number of players\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const ratioHeight = index / CTR_MAX_PLAYERS;\n    const extract: Coord = {\n      height: applyRatio(ratioHeight, heightCrop),\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst getFilenameWithoutExtension = (filename: string) => {\n  if (!filename) return '';\n\n  const splits = filename.split('.');\n\n  return splits[0];\n};\n\nconst sortImagesByFilename = (images: any[]) => {\n  if (images.length === 0) return [];\n  if (images.length === 1) return images;\n\n  const sortedImages = images.sort((imageA: any, imageB: any) => {\n    const { name: nameA } = imageA;\n    const { name: nameB } = imageB;\n\n    const newNameA = getFilenameWithoutExtension(nameA);\n    const newNameB = getFilenameWithoutExtension(nameB);\n\n    return sortAlphanumeric(newNameA, newNameB);\n  });\n\n  return sortedImages;\n};\n\nexport { getFilenameWithoutExtension, getMimeType, getExtract, sortImagesByFilename };\n","const isEqual = (a1: (number | string)[], a2: (number | string)[]) => {\n  if (a1.length !== a2.length) return false;\n  return a1.every((v, i) => v === a2[i]);\n};\n\nexport { isEqual };\n","import { uniq } from 'lodash';\nimport { convertToMs } from './index';\nimport { CTR_MAX_TIME_DIFF_SEC, TIME_DNF } from '../constants';\nimport { Result, Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { isEqual } from './array';\n\nconst getIncorrectRaces = (resultsOcr: Result[][]) => {\n  const validationPoints = resultsOcr.map((race: Result[]) => validatePoints(race.map((race) => race.points)));\n  const validationUsernames = resultsOcr.map((race: Result[]) => validateUsernames(race.map((race) => race.username)));\n\n  const incorrectRaces: number[] = [];\n\n  validationPoints.forEach((validation: Validation, index: number) => {\n    if (!validation.correct) incorrectRaces.push(index + 1);\n  });\n\n  validationUsernames.forEach((validation: Validation, index: number) => {\n    if (!validation.correct && !incorrectRaces.includes(index + 1)) incorrectRaces.push(index + 1);\n  });\n\n  return incorrectRaces.sort();\n};\n\nconst validatePoints = (points: number[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const copyPoints = [...points];\n\n  const sortedPoints = copyPoints.sort((a: number, b: number) => {\n    return b - a;\n  });\n\n  if (isEqual(sortedPoints, points)) {\n    validation.correct = true;\n\n    return validation;\n  }\n\n  validation.errMsg = 'Points should decrease from first to last place (ties are possible)';\n\n  return validation;\n};\n\nconst validateTeams = (players: string[], teams: string[], playerTeams: Record<string, string>) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const missingTeamForPlayers: string[] = [];\n  const incorrectTeamForPlayers: string[] = [];\n  const seenTeams: string[] = [];\n\n  players.forEach((player: string) => {\n    const team = playerTeams[player];\n    if (!team) {\n      missingTeamForPlayers.push(player);\n    }\n\n    if (!teams.includes(team)) {\n      incorrectTeamForPlayers.push(player);\n    }\n\n    if (teams.includes(team)) {\n      seenTeams.push(team);\n    }\n  });\n\n  if (missingTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have no assigned team: ${missingTeamForPlayers.join(', ')}`;\n    validation.isWarning = true;\n\n    return validation;\n  }\n\n  if (incorrectTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have an invalid team: ${incorrectTeamForPlayers.join(', ')}`;\n\n    return validation;\n  }\n\n  if (uniq(seenTeams).length === 1) {\n    validation.errMsg = 'You cannot have all players under the same team';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (!isEqual(finishedTimesMs, sortedTimesMs)) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1_000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nexport { getIncorrectRaces, validatePoints, validateTeams, validateTimes, validateUsernames };\n","const formatDate = (dateTimestamp: number) => {\n  const d = new Date(dateTimestamp);\n  const month = `${d.getMonth() + 1}`;\n  const day = `${d.getDate()}`;\n  const year = `${d.getFullYear()}`;\n\n  const newMonth = month.length < 2 ? `0${month}` : month;\n  const newDay = day.length < 2 ? `0${day}` : day;\n\n  return [year, newMonth, newDay].join('-');\n};\n\nexport { formatDate };\n","import { getColorHexadecimalTeam } from '.';\nimport { SEPARATOR_PLAYERS_LORENZI } from '../constants';\nimport { Result } from '../types';\nimport { formatDate } from './date';\nimport { cleanString } from './string';\n\nconst createLorenzi = (\n  races: Result[][],\n  playerTeams: Record<string, string>,\n  nbTeams: number,\n  nbPlayers: number,\n  teams: string[],\n  includeCpuPlayers: boolean\n) => {\n  // Presence of CPUs currently means there is no team\n  const isFFA = includeCpuPlayers || nbTeams === nbPlayers;\n\n  if (isFFA) return createLorenziFFA(races);\n\n  return createLorenziTeams(races, playerTeams, teams);\n};\n\nconst createLorenziTeams = (races: Result[][], playerTeams: Record<string, string>, teams: string[]) => {\n  const playersPoints = createLorenziPlayersPoints(races);\n\n  const teamPlayersLines: string[] = [];\n\n  teams.forEach((team: string, indexTeam: number) => {\n    const teamLine = `${cleanString(team)} ${getColorHexadecimalTeam(indexTeam)}`;\n    teamPlayersLines.push(teamLine);\n\n    Object.keys(playerTeams).forEach((player: string) => {\n      if (playerTeams[player] === team) {\n        const pointsLine = playersPoints[player];\n\n        const line = `${player} ${pointsLine.join(SEPARATOR_PLAYERS_LORENZI)}`;\n\n        teamPlayersLines.push(line);\n      }\n    });\n\n    teamPlayersLines.push('');\n  });\n\n  return [...createLorenziIntro(), '', ...teamPlayersLines];\n};\n\nconst createLorenziPlayersPoints = (races: Result[][]) => {\n  const playersPoints: Record<string, number[]> = {};\n\n  races.forEach((race: Result[]) => {\n    race.forEach((result: Result) => {\n      const { username } = result;\n\n      if (!Object.keys(playersPoints).includes(username)) {\n        playersPoints[username] = [];\n      }\n    });\n  });\n\n  races.forEach((race: Result[]) => {\n    Object.keys(playersPoints).forEach((username: string) => {\n      const relevantResult = race.find((result: Result) => result.username === username);\n\n      const points = relevantResult?.points ?? 0;\n\n      playersPoints[username].push(points);\n    });\n  });\n\n  return playersPoints;\n};\n\nconst createLorenziIntro = () => {\n  return ['#title Title', `#date ${formatDate(Date.now())}`];\n};\n\nconst createLorenziFFA = (races: Result[][]) => {\n  const playersPoints = createLorenziPlayersPoints(races);\n\n  const playersLines: string[] = [];\n\n  Object.keys(playersPoints).forEach((username: string) => {\n    const playerPoints = playersPoints[username];\n\n    const line = `${username} ${playerPoints.join(SEPARATOR_PLAYERS_LORENZI)}`;\n\n    playersLines.push(line);\n  });\n\n  return [...createLorenziIntro(), '', ...playersLines];\n};\n\nexport { createLorenzi, createLorenziFFA, createLorenziTeams, createLorenziIntro, createLorenziPlayersPoints };\n","import * as React from 'react';\nimport './App.css';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category, Progress, Result } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { NumericStepper } from '@anatoliygatt/numeric-stepper';\n\nimport {\n  CRASH_TEAM_RANKING_AUTHOR_URL,\n  EXAMPLE_IMAGES_FOLDER,\n  EXAMPLE_IMAGES_FOLDER_FULL_EVENT,\n  GUIDE_FOLDER,\n  PROJECT_URL,\n  URL_CPUS,\n  VIDEO_TUTORIAL,\n  WEBSITE_DEFAULT_LANGUAGE,\n  WEBSITE_TITLE,\n  WEBSITE_VERSION\n} from './constants/general';\nimport {\n  CTR_MAX_PLAYERS,\n  FFA_POINTS_SCHEME,\n  INITIAL_TEAMS_NB,\n  LORENZI_TABLE_URL,\n  MAX_HEIGHT_IMG,\n  MIME_JPEG,\n  MIME_PNG,\n  PLACEHOLDER_CPUS,\n  WAR_POINTS_SCHEME\n} from './constants';\nimport { cleanString, getCloserString, sortCaseInsensitive } from './utils/string';\nimport {\n  formatCpuPlayers,\n  getColorPlayer,\n  getOptionsTeams,\n  getParams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getPositionString,\n  getReferencePlayers,\n  getTeamNames,\n  isHumanPlayer\n} from './utils';\nimport { numberRange } from './utils/number';\nimport { getExtract, getMimeType, sortImagesByFilename } from './utils/image';\nimport { logError, logTime } from './utils/log';\nimport { getIncorrectRaces, validatePoints, validateTeams, validateUsernames } from './utils/validation';\nimport { uniq } from 'lodash';\nimport UAParser from 'ua-parser-js';\nimport { isEqual } from './utils/array';\nimport { createLorenzi } from './utils/lorenzi';\nconst language = 'eng';\n\nconst App = () => {\n  const renderProgressBar = () => {\n    if (ocrProgress !== Progress.Started) return null;\n\n    return (\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar-value\"></div>\n        <div className=\"progress-bar-text\">{ocrProgressText}</div>\n      </div>\n    );\n  };\n\n  const renderTablePointsScheme = () => {\n    const classes = isMobile ? 'flex-1' : 'flex-1 max-width-50 center';\n    return (\n      <table className={classes}>\n        <thead>\n          <tr>\n            <th>Position</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        {renderBodyPointsScheme()}\n      </table>\n    );\n  };\n\n  const renderTable = (index: number) => {\n    const classes = isMobile ? 'flex-1 limited-table' : 'flex-1';\n\n    return (\n      <table className={classes}>\n        <thead>\n          <tr>\n            <th>Position</th>\n            {includeCpuPlayers && <th>Type</th>}\n            <th>Name</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        {renderBody(index)}\n      </table>\n    );\n  };\n\n  const renderCroppedImage = (index: number) => {\n    if (!croppedImages || croppedImages.length <= index) return null;\n\n    const classes = isMobile ? 'img-show max-width-100' : 'img-show max-width-45';\n\n    return <img alt=\"Cropped Results\" className={classes} src={croppedImages[index]} />;\n  };\n\n  const renderImages = () => {\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    if (isMobile) {\n      return imagesURLs.map((imageSrc: string, index: number) => (\n        <img alt=\"tbd\" className=\"img-full max-width-100 block\" key={`${imageSrc}-${index}`} src={imageSrc} />\n      ));\n    }\n\n    return (\n      <div className=\"flex-container center\">\n        {imagesURLs.map((imageSrc: string, index: number) => (\n          <img alt=\"tbd\" className=\"img-full max-width-45 flex-1\" key={`${imageSrc}-${index}`} src={imageSrc} />\n        ))}\n      </div>\n    );\n  };\n\n  const renderBodyPointsScheme = () => {\n    const slicedPointsScheme = pointsScheme.slice(0, nbPlayers);\n\n    return (\n      <tbody>\n        {slicedPointsScheme.map((_points: number, indexPoints: number) => {\n          const key = indexPoints;\n\n          return (\n            <tr key={key}>\n              <td>{getPositionString(indexPoints + 1)}</td>\n              <td>\n                <input\n                  className=\"text-center\"\n                  type=\"number\"\n                  value={pointsScheme[indexPoints]}\n                  disabled={selectIsDisabled}\n                  onChange={onChangePointsScheme(indexPoints)}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderBody = (index: number) => {\n    const renderOption = (option: string | number, indexOption: number) => {\n      const key = `${option}-${indexOption}`;\n      const label = `${option}`;\n      return (\n        <option key={key} label={label} value={option}>\n          {label}\n        </option>\n      );\n    };\n\n    const renderOptions = () => {\n      const optionsResultsPlayerHuman = getPlayers(players).sort(sortCaseInsensitive);\n      if (!includeCpuPlayers) {\n        return optionsResultsPlayerHuman.map(renderOption);\n      }\n\n      const optionsResultsPlayerCpu = getPlayers(cpuPlayers).sort(sortCaseInsensitive);\n\n      return (\n        <>\n          <optgroup key=\"human\" label=\"Human\">\n            {optionsResultsPlayerHuman.map(renderOption)}\n          </optgroup>\n          <optgroup key=\"cpus\" label=\"CPUs\">\n            {optionsResultsPlayerCpu.map(renderOption)}\n          </optgroup>\n        </>\n      );\n    };\n\n    const renderOptionsPoints = () => {\n      const optionsResultsPoints = pointsScheme.slice(0, nbPlayers);\n\n      return optionsResultsPoints.map(renderOption);\n    };\n\n    const classesSelectPlayer = isMobile ? 'max-width-100' : '';\n\n    return (\n      <tbody>\n        {resultsOcr[index].map((resultOcr: Result, indexPlayer: number) => {\n          const { position, username, points } = resultOcr;\n          const key = `${position}-${username}`;\n\n          return (\n            <tr key={key}>\n              <td>{getPositionString(position)}</td>\n              {includeCpuPlayers && <td>{isHumanPlayer(username, players) ? '👤' : '🤖'}</td>}\n              <td>\n                <select\n                  className={classesSelectPlayer}\n                  onChange={onChangeResultsPlayer(index, indexPlayer)}\n                  value={username}\n                >\n                  {renderOptions()}\n                </select>\n              </td>\n              <td>\n                <select onChange={onChangeResultsPoints(index, indexPlayer)} value={points}>\n                  {renderOptionsPoints()}\n                </select>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderRace = (index: number) => {\n    const labelRace = `Race ${index + 1}`;\n    const validationUsernames = validateUsernames(resultsOcr[index].map((r: Result) => r.username));\n    const validationPoints = validatePoints(resultsOcr[index].map((r: Result) => r.points));\n\n    return (\n      <div key={index}>\n        <h3>{labelRace}</h3>\n        {renderCroppedImage(index)}\n        <div className=\"flex-container mt\">{renderTable(index)}</div>\n        {!validationUsernames.correct && <div className=\"red\">{validationUsernames.errMsg}</div>}\n        {!validationPoints.correct && <div className=\"red\">{validationPoints.errMsg}</div>}\n      </div>\n    );\n  };\n\n  const renderRaces = () => {\n    if (!resultsOcr || resultsOcr.length <= indexRace) return null;\n\n    return (\n      <>\n        <hr />\n        <div className=\"center\">\n          <button disabled={startOverConfirm} onClick={onClickStartOver}>\n            Start Over\n          </button>\n          {startOverConfirm && (\n            <button className=\"block confirm-start-over\" onClick={onClickStartOverConfirm}>\n              Confirm and start from scratch\n            </button>\n          )}\n          <h2>Results</h2>\n          {renderRace(indexRace)}\n          {resultsOcr.length !== 1 && (\n            <div className=\"pagination-races mt2\">\n              <button\n                className=\"pagination-previous-race mr\"\n                disabled={indexRace === 0}\n                onClick={onChangeIndexRace(-1)}\n              >\n                Previous Race\n              </button>\n              <div className=\"inline ml mr\">{`Race ${indexRace + 1}/${resultsOcr.length}`}</div>\n              <button\n                className=\"pagination-next-race ml\"\n                disabled={indexRace === resultsOcr.length - 1}\n                onClick={onChangeIndexRace(1)}\n              >\n                Next Race\n              </button>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  };\n\n  const renderLorenzi = () => {\n    if (!resultsOcr || resultsOcr.length <= indexRace) return null;\n\n    const incorrectRaces = getIncorrectRaces(resultsOcr);\n\n    const labelError = `In order to access Lorenzi markdown please fix the errors present in the following race(s): ${incorrectRaces.join(\n      ', '\n    )}`;\n\n    const rowsLorenzi = (lorenzi.match(/\\n/g) || []).length + 1;\n\n    return (\n      <div className=\"center\">\n        <h2>Lorenzi</h2>\n        {incorrectRaces.length > 0 && <div className=\"red\">{labelError}</div>}\n        {incorrectRaces.length === 0 && (\n          <>\n            <CopyToClipboard options={{ message: '' }} text={lorenzi} onCopy={() => setCopiedLorenzi(true)}>\n              <button disabled={lorenzi === '' || copiedLorenzi} className=\"mt\">\n                {copiedLorenzi ? 'Copied' : 'Copy to clipboard'}\n              </button>\n            </CopyToClipboard>\n            <a\n              className=\"block mt mb\"\n              href={LORENZI_TABLE_URL}\n              rel=\"noopener noreferrer\"\n              title=\"Lorenzi Table website\"\n              target=\"_blank\"\n            >\n              Go to Lorenzi Table\n            </a>\n            <textarea className={`textarea-${classPlatform}`} disabled={true} rows={rowsLorenzi} value={lorenzi} />\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderFooter = () => {\n    return (\n      <>\n        <div className=\"mt2 text-center\">\n          Developed by{' '}\n          <a href={PROJECT_URL} rel=\"noopener noreferrer\" title=\"GitHub page for repository\" target=\"_blank\">\n            sebranly\n          </a>{' '}\n          (PSN:{' '}\n          <a\n            href={CRASH_TEAM_RANKING_AUTHOR_URL}\n            rel=\"noopener noreferrer\"\n            title=\"Crash Team Ranking for ZouGui28\"\n            target=\"_blank\"\n          >\n            ZouGui28\n          </a>\n          ) with ❤️\n        </div>\n        <div className=\"mt2 text-center\">{`Website version ${WEBSITE_VERSION}`}</div>\n      </>\n    );\n  };\n\n  const renderCpuMainSection = () => {\n    return (\n      <>\n        <h3>CPUs</h3>\n        {renderCpuSection()}\n      </>\n    );\n  };\n\n  const renderPointsSchemeMainSection = () => {\n    if (issueOnTeams) return null;\n\n    const isFFASetup = isEqual(pointsScheme.slice(0, nbPlayers), FFA_POINTS_SCHEME.slice(0, nbPlayers));\n    const isWarSetup = isEqual(pointsScheme.slice(0, nbPlayers), WAR_POINTS_SCHEME.slice(0, nbPlayers));\n\n    return (\n      <>\n        <h3>Points</h3>\n        <div className=\"text-center mb\">Choose a preset or edit each value individually for something more custom</div>\n        <div className=\"mb\">\n          <button onClick={() => setPointsScheme(FFA_POINTS_SCHEME)} disabled={selectIsDisabled || isFFASetup}>\n            FFA preset\n          </button>\n\n          <button\n            className=\"ml\"\n            onClick={() => setPointsScheme(WAR_POINTS_SCHEME)}\n            disabled={selectIsDisabled || isWarSetup}\n          >\n            WAR preset\n          </button>\n        </div>\n        {renderPointsSchemeSection()}\n        {!validationPointsScheme.correct && <div className=\"red\">{validationPointsScheme.errMsg}</div>}\n      </>\n    );\n  };\n\n  const renderTeamMainSection = () => {\n    return (\n      <>\n        <h3>Teams</h3>\n        {renderTeamSection()}\n      </>\n    );\n  };\n\n  const renderStart = () => {\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    const colorText = ocrProgress === Progress.Done ? 'orange' : 'red';\n    const classesText = `ml block mb bold ${colorText}`;\n    const text =\n      ocrProgress === Progress.Done\n        ? 'Images were analyzed successfully. Please check the results below are correct. Feel free to tweak any mistake below.'\n        : 'Please ensure all the information entered above is correct, as none of it can be edited afterwards.';\n\n    return (\n      <div className=\"text-center mb\">\n        <div className={classesText}>{text}</div>\n        <input\n          className=\"inline-block ml\"\n          type=\"button\"\n          value=\"Get results\"\n          disabled={selectIsDisabled || !imagesURLs || imagesURLs.length === 0}\n          onClick={doOCR}\n        />\n      </div>\n    );\n  };\n\n  const renderNumericStepperPlayers = () => {\n    const minimumValue = selectIsDisabled ? nbPlayers : 2;\n    const maximumValue = selectIsDisabled ? nbPlayers : CTR_MAX_PLAYERS;\n    const initialValue = selectIsDisabled ? nbPlayers : CTR_MAX_PLAYERS;\n    const onChangeNumericStepper = selectIsDisabled ? () => {} : onChangeNbPlayers;\n    const thumbColor = selectIsDisabled ? '#999999' : '#3385FF';\n\n    return (\n      <div className=\"numeric-stepper-wrapper\">\n        <NumericStepper\n          minimumValue={minimumValue}\n          maximumValue={maximumValue}\n          stepValue={1}\n          initialValue={initialValue}\n          size=\"sm\"\n          inactiveTrackColor=\"#dddddd\"\n          activeTrackColor=\"#ffffff\"\n          activeButtonColor=\"#ffffff\"\n          inactiveIconColor=\"#3385FF\"\n          hoverIconColor=\"#000080\"\n          activeIconColor=\"#000080\"\n          disabledIconColor=\"#dddddd\"\n          thumbColor={thumbColor}\n          thumbShadowAnimationOnTrackHoverEnabled={false}\n          focusRingColor=\"#fff7ed\"\n          onChange={onChangeNumericStepper}\n        />\n      </div>\n    );\n  };\n\n  const renderImagesUpload = () => {\n    const jpgImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.JPG`;\n    const pngImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.PNG`;\n    const guideImage = `${GUIDE_FOLDER}Images.md`;\n\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    return (\n      <>\n        <h2>Images</h2>\n        <div className=\"text-center mb\">\n          <div className=\"ml block mb bold\">Screenshots will be ordered alphabetically by name</div>\n          <div className=\"ml block mb\">\n            Select screenshots in JPG/JPEG or PNG format, taken right when Returning to Lobby was around 14 seconds\n          </div>\n          <div className=\"ml block mb\">\n            Examples of valid screenshots:{' '}\n            <a href={jpgImage} rel=\"noopener noreferrer\" title=\"Example of valid JPEG screenshot\" target=\"_blank\">\n              JPG/JPEG\n            </a>{' '}\n            and{' '}\n            <a href={pngImage} rel=\"noopener noreferrer\" title=\"Example of valid PNG screenshot\" target=\"_blank\">\n              PNG\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            You can upload multiple images at once, as in this{' '}\n            <a\n              href={EXAMPLE_IMAGES_FOLDER_FULL_EVENT}\n              rel=\"noopener noreferrer\"\n              title=\"Example of a valid 10-race event\"\n              target=\"_blank\"\n            >\n              10-race example\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            For more information, please refer to the{' '}\n            <a href={guideImage} rel=\"noopener noreferrer\" title=\"Guide about Images\" target=\"_blank\">\n              images guide\n            </a>\n          </div>\n          <input\n            className=\"inline mt\"\n            disabled={selectIsDisabled}\n            type=\"file\"\n            multiple\n            accept={[MIME_JPEG, MIME_PNG].join(', ')}\n            onChange={onChangeImage}\n          />\n        </div>\n      </>\n    );\n  };\n\n  const renderMainSection = () => {\n    if (nbPlayersTyped === 0) return null;\n\n    return (\n      <>\n        {renderCpuMainSection()}\n        {renderTeamMainSection()}\n        {renderPointsSchemeMainSection()}\n        {renderImagesUpload()}\n        {renderImages()}\n        {renderStart()}\n        {renderRaces()}\n        {renderLorenzi()}\n      </>\n    );\n  };\n\n  const renderPointsSchemeSection = () => {\n    return renderTablePointsScheme();\n  };\n\n  const renderTeamSection = () => {\n    if (includeCpuPlayers) return <div className=\"text-center mb\">Teams are not available when CPUs are activated</div>;\n\n    return (\n      <>\n        <select disabled={selectIsDisabled} onChange={onChangeNbTeams} value={nbTeams}>\n          {optionsNbTeams.map((option: number) => {\n            const label = option === nbPlayers ? 'FFA' : `${option} teams`;\n            return (\n              <option key={option} label={label} value={option}>\n                {label}\n              </option>\n            );\n          })}\n        </select>\n        {renderTeamRepartition()}\n      </>\n    );\n  };\n\n  const onChangeTeam = (player: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newPlayerTeams = { ...playerTeams, [player]: value };\n    setPlayerTeams(newPlayerTeams);\n  };\n\n  const renderPlayerTeams = (player: string) => {\n    return teams.map((team: string) => {\n      const key = `${player}-${team}`;\n      const isChecked = playerTeams[player] === team;\n\n      return (\n        <div className=\"ml inline\" key={key}>\n          <input\n            type=\"radio\"\n            disabled={selectIsDisabled}\n            id={key}\n            name={player}\n            value={team}\n            checked={isChecked}\n            onChange={onChangeTeam(player)}\n          />\n          <label htmlFor={key}>{team}</label>\n        </div>\n      );\n    });\n  };\n\n  const renderPlayerTeamRepartition = (player: string) => {\n    const colorPlayer = getColorPlayer(player, teams, playerTeams);\n    const playerClassnames = `inline ${colorPlayer}`;\n\n    return (\n      <li className=\"block\" key={player}>\n        <div className={playerClassnames}>{player}</div>\n        <div className=\"ml mb block text-center\">{renderPlayerTeams(player)}</div>\n      </li>\n    );\n  };\n\n  const renderTeamRepartition = () => {\n    if (includeCpuPlayers) return null;\n    if (isFFA) return <div className=\"ml block mb\">Free For All means there is no need to set up teams!</div>;\n\n    const classesValidation = validationTeams.isWarning ? 'orange' : 'red';\n\n    return (\n      <>\n        <ul className=\"text-center no-padding mt2\">\n          <div className=\"inline-block\">{playersNames.map(renderPlayerTeamRepartition)}</div>\n          {!validationTeams.correct && <div className={classesValidation}>{validationTeams.errMsg}</div>}\n        </ul>\n      </>\n    );\n  };\n\n  const renderCpuSection = () => {\n    if (!cpuData || Object.keys(cpuData).length === 0) return <div className=\"text-center mb\">{PLACEHOLDER_CPUS}</div>;\n\n    const guideCpu = `${GUIDE_FOLDER}CPUs.md`;\n\n    const optionsCpuLanguages = Object.keys(cpuData);\n    const textCheckbox = shouldIncludeCpuPlayers\n      ? `Automatically activated bots because ${nbPlayersTyped} human player(s) was/were filled out of a total of ${nbPlayers} players`\n      : 'Check this if there were bots during the race';\n\n    return (\n      <>\n        <div className=\"text-center mb\">\n          <input\n            name=\"includeCpuPlayers\"\n            type=\"checkbox\"\n            checked={includeCpuPlayers}\n            onChange={onCpuCheckboxChange}\n            disabled={shouldIncludeCpuPlayers || selectIsDisabled}\n          />\n          <div className=\"ml inline\">{textCheckbox}</div>\n        </div>\n        {includeCpuPlayers && (\n          <>\n            <div className=\"text-center mb\">\n              Bots are automatically determined based on the language and cannot be edited\n            </div>\n            <div className=\"ml block mb\">\n              For more information, please refer to the{' '}\n              <a href={guideCpu} rel=\"noopener noreferrer\" title=\"Guide about CPUs\" target=\"_blank\">\n                CPUs guide\n              </a>\n            </div>\n            <div className=\"inline mr\">Language in images</div>\n            <select disabled={selectIsDisabled} onChange={onChangeCpuLanguage} value={cpuLanguage}>\n              {optionsCpuLanguages.map((option: string) => {\n                const label = `${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n            <textarea\n              className={`textarea-${classPlatform}`}\n              disabled={true}\n              placeholder={PLACEHOLDER_CPUS}\n              rows={CTR_MAX_PLAYERS}\n              value={cpuPlayers}\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n    fetch(URL_CPUS)\n      .then((response) => response.json())\n      .then((data) => {\n        setCpuData(data);\n        setCpuPlayers(formatCpuPlayers((data as any)[WEBSITE_DEFAULT_LANGUAGE]));\n      });\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n\n    setSelectIsDisabled(true);\n    setOcrProgress(Progress.Started);\n    setOcrProgressText('Initialization...');\n    setResultsOcr([]);\n    setIndexRace(0);\n    setCroppedImages([]);\n    setLorenzi('');\n    setStartOverConfirm(false);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    await workerUsername.load();\n    await workerUsername.loadLanguage(language);\n    await workerUsername.initialize(language);\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    const playerIndexes = numberRange(0, nbPlayers - 1);\n\n    const promisesX = async (\n      playerIndex: number,\n      category: Category,\n      info: any, // TODO: type it better\n      imgTransCopy: any\n    ) => {\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n      const { extension } = info;\n      const mimeType = getMimeType(extension);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: mimeType\n      };\n\n      const buffer: any = await extracted.getBufferAsync(mimeType);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      const bufferFin: any = await extractedFin.getBufferAsync(mimeType);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    let resultsOcrTemp: Result[][] = [];\n    let croppedImagesTemp: string[] = [];\n\n    // TODO: have better error handling\n    for (let i = 0; i < imagesURLs.length; i++) {\n      try {\n        const progressText = `Image ${i + 1} out of ${imagesURLs.length}...`;\n        setOcrProgressText(progressText);\n\n        logTime('imgRead');\n        const imgJimpTemp = await Jimp.read(imagesURLs[i]);\n        logTime('imgRead', true);\n\n        const initialHeight = imgJimpTemp.bitmap.height;\n        const shouldResize = initialHeight > MAX_HEIGHT_IMG;\n\n        if (shouldResize) logTime('imgResize');\n\n        const imgJimp = shouldResize ? imgJimpTemp.resize(Jimp.AUTO, MAX_HEIGHT_IMG) : imgJimpTemp;\n\n        if (shouldResize) logTime('imgResize', true);\n\n        logTime('imgRotate');\n\n        const imgTrans = imgJimp.rotate(-6.2);\n\n        logTime('imgRotate', true);\n\n        logTime('imgRest');\n\n        const h = imgTrans.bitmap.height;\n        const w = imgTrans.bitmap.width;\n        const extension = imgTrans.getExtension();\n        const info = { height: h, extension, width: w };\n        const dimensionsCrop = getExtract(info, nbPlayers, Category.All);\n\n        const imgTransCopy = imgTrans.clone();\n        const extractedCrop = imgTransCopy.crop(\n          dimensionsCrop.left,\n          dimensionsCrop.top,\n          dimensionsCrop.width,\n          dimensionsCrop.height\n        );\n\n        // eslint-disable-next-line no-loop-func\n        extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n          croppedImagesTemp.push(src);\n        });\n\n        const imgTransGray = imgTrans.grayscale();\n\n        logTime('imgRest', true);\n\n        logTime('promisesCreation');\n\n        const promisesNames = playerIndexes.map((playerIndex) =>\n          promisesX(playerIndex, Category.Username, info, imgTransGray.clone())\n        );\n\n        logTime('promisesCreation', true);\n\n        logTime('promisesResolve');\n\n        const results = await Promise.all(promisesNames);\n\n        logTime('promisesResolve', true);\n\n        const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n        const dataResults: Result[] = [];\n        const referencePlayers = getReferencePlayers(players, cpuPlayers, includeCpuPlayers);\n        playerIndexes.forEach((playerIndex) => {\n          const playerGuess = resultsNames[playerIndex];\n          const result: Result = {\n            username: getCloserString(playerGuess, referencePlayers),\n            position: playerIndex + 1,\n            points: pointsScheme[playerIndex]\n          };\n\n          dataResults.push(result);\n        });\n\n        resultsOcrTemp.push(dataResults);\n      } catch (err) {\n        // TODO: have better error handling\n        logError(err);\n        // setSelectIsDisabled(false);\n      }\n    }\n\n    setResultsOcr(resultsOcrTemp);\n    setCroppedImages(croppedImagesTemp);\n    setOcrProgress(Progress.Done);\n    setOcrProgressText('');\n    // setSelectIsDisabled(false);\n\n    await schedulerUsername.terminate();\n  };\n\n  const { width } = useWindowSize();\n  const [ocrProgress, setOcrProgress] = React.useState(Progress.NotStarted);\n  const [ocrProgressText, setOcrProgressText] = React.useState('');\n  const [images, setImages] = React.useState<any[]>([]);\n  const [imagesURLs, setImagesURLs] = React.useState<any[]>([]);\n  const [croppedImages, setCroppedImages] = React.useState<any[]>([]);\n  const [nbPlayers, setNbPlayers] = React.useState(CTR_MAX_PLAYERS);\n  const [cpuLanguage, setCpuLanguage] = React.useState(WEBSITE_DEFAULT_LANGUAGE);\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [resultsOcr, setResultsOcr] = React.useState<Result[][]>([]);\n  const [players, setPlayers] = React.useState('');\n  const [pointsScheme, setPointsScheme] = React.useState<number[]>(FFA_POINTS_SCHEME);\n  const [copiedPlayers, setCopiedPlayers] = React.useState(false);\n  const [copiedLorenzi, setCopiedLorenzi] = React.useState(false);\n  const [cpuPlayers, setCpuPlayers] = React.useState(PLACEHOLDER_CPUS);\n  const [cpuData, setCpuData] = React.useState<any>({});\n  const [includeCpuPlayers, setIncludeCpuPlayers] = React.useState(false);\n  const [teams, setTeams] = React.useState<string[]>(getTeamNames(INITIAL_TEAMS_NB));\n  const [nbTeams, setNbTeams] = React.useState(INITIAL_TEAMS_NB);\n  const [playerTeams, setPlayerTeams] = React.useState<Record<string, string>>({});\n  const [indexRace, setIndexRace] = React.useState(0);\n  const [lorenzi, setLorenzi] = React.useState('');\n  const [startOverConfirm, setStartOverConfirm] = React.useState(false);\n\n  const nbPlayersTyped = uniq(getPlayers(players)).length;\n  const shouldIncludeCpuPlayers = nbPlayersTyped < nbPlayers;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  React.useEffect(() => {\n    if (images.length < 1) return;\n    const newImageUrls: any[] = [];\n    const sortImages = sortImagesByFilename(images);\n    sortImages.forEach((image) => {\n      newImageUrls.push(URL.createObjectURL(image));\n    });\n    setImagesURLs(newImageUrls);\n  }, [images]);\n\n  React.useEffect(() => {\n    if (resultsOcr && resultsOcr.length > 0) {\n      const newLorenzi = createLorenzi(resultsOcr, playerTeams, nbTeams, nbPlayers, teams, includeCpuPlayers);\n\n      setLorenzi(newLorenzi.join('\\n'));\n      setCopiedLorenzi(false);\n    }\n  }, [resultsOcr]);\n\n  React.useEffect(() => {\n    if (shouldIncludeCpuPlayers && !includeCpuPlayers) {\n      setIncludeCpuPlayers(true);\n    }\n  }, [shouldIncludeCpuPlayers, includeCpuPlayers]);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n    setCopiedPlayers(false);\n\n    setNbTeams(INITIAL_TEAMS_NB);\n    setTeams(getTeamNames(INITIAL_TEAMS_NB));\n    setPlayerTeams({});\n  };\n\n  const onClickStartOver = (_e: any) => {\n    setStartOverConfirm(true);\n  };\n\n  const onClickStartOverConfirm = (_e: any) => {\n    window.location.reload();\n  };\n\n  const onChangeIndexRace = (delta: number) => (_e: any) => {\n    const newIndex = indexRace + delta;\n\n    if (newIndex < 0 || newIndex >= resultsOcr.length) return;\n\n    setIndexRace(newIndex);\n  };\n\n  const onChangeImage = (e: any) => {\n    setImages([...e.target.files]);\n    setResultsOcr([]);\n  };\n\n  const onChangeNbPlayers = (value: number) => {\n    if (value === nbPlayers) return;\n\n    /*\n      Due to Numeric Stepper not using value prop\n      we should only call this from Numeric Stepper\n    */\n    setNbPlayers(value);\n\n    setPlayers('');\n\n    setNbTeams(INITIAL_TEAMS_NB);\n    setTeams(getTeamNames(INITIAL_TEAMS_NB));\n    setPlayerTeams({});\n  };\n\n  const onChangeNbTeams = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newNbTeams = Number(e.target.value);\n    const teamNames = getTeamNames(newNbTeams);\n    const isFFA = newNbTeams === nbPlayers;\n\n    setNbTeams(newNbTeams);\n    setTeams(teamNames);\n    setPlayerTeams({});\n\n    if (isFFA) setPointsScheme(FFA_POINTS_SCHEME);\n    else setPointsScheme(WAR_POINTS_SCHEME);\n  };\n\n  const onChangeCpuLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCpuLanguage(e.target.value);\n    setCpuPlayers(formatCpuPlayers(cpuData[e.target.value]));\n  };\n\n  const onChangePointsScheme = (indexPointsScheme: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!pointsScheme || pointsScheme.length < indexPointsScheme) return;\n    const { value } = e.currentTarget;\n    const copy = [...pointsScheme];\n    copy[indexPointsScheme] = Number(value);\n    setPointsScheme(copy);\n  };\n\n  const onChangeResultsPoints =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].points = Number(e.target.value);\n      setResultsOcr(copy);\n    };\n\n  const onChangeResultsPlayer =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].username = e.target.value;\n      setResultsOcr(copy);\n    };\n\n  const onCpuCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newVal = e.target.checked;\n    setIncludeCpuPlayers(newVal);\n    if (newVal === true) setPointsScheme(FFA_POINTS_SCHEME);\n    else setPointsScheme(WAR_POINTS_SCHEME);\n  };\n\n  const optionsNbTeams = getOptionsTeams(nbPlayers);\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n  const classBgDisabled = selectIsDisabled && (!resultsOcr || resultsOcr.length === 0) ? 'bg-grey' : 'bg-white';\n  const playersNames = uniq(getPlayers(players)).sort(sortCaseInsensitive);\n  const validationTeams = validateTeams(playersNames, teams, playerTeams);\n  const validationPointsScheme = validatePoints(pointsScheme.slice(0, nbPlayers));\n  const userAgent = navigator?.userAgent ?? '';\n  const userAgentResult = new UAParser(userAgent).getResult();\n  const placeholderPlayers = getPlayersPlaceholder(nbPlayers, userAgentResult);\n  const isFFA = nbTeams === nbPlayers;\n  const issueOnTeams = !includeCpuPlayers && !isFFA && !validationTeams.correct;\n  const issueOnPointsScheme = !validationPointsScheme.correct;\n\n  return (\n    <div className=\"main\">\n      <h1>{WEBSITE_TITLE}</h1>\n      <div className=\"w3-light-grey\"></div>\n      {ocrProgress === Progress.Done && (\n        <Confetti\n          width={width}\n          height={document.body.scrollHeight > window.innerHeight ? document.body.scrollHeight : window.innerHeight}\n          numberOfPieces={isMobile ? 800 : 1600}\n          recycle={false}\n        />\n      )}\n      <div className={`center main-content-${classPlatform} ${classBgDisabled}`}>\n        {renderProgressBar()}\n        <h2>Introduction</h2>\n        <div className=\"text-center mb\">Please enter information from top to bottom for a smooth experience</div>\n        <div className=\"text-center mb\">At the end, we'll produce the Lorenzi markdown for you</div>\n        <a\n          href={VIDEO_TUTORIAL}\n          rel=\"noopener noreferrer\"\n          title=\"Video Tutorial about how to use Crash Team Results website\"\n          target=\"_blank\"\n        >\n          Video Tutorial\n        </a>\n        <h2>Players</h2>\n        <h3>Number of players</h3>\n        <div className=\"text-center mb\">This includes CPUs if any</div>\n        {renderNumericStepperPlayers()}\n        <h3>Human Players</h3>\n        <div className=\"text-center mb\">Type all human players present in the races. Type one username per line.</div>\n        <textarea\n          className={`textarea-${classPlatform}`}\n          disabled={selectIsDisabled}\n          placeholder={placeholderPlayers}\n          rows={nbPlayers}\n          value={players}\n          onChange={onPlayersChange}\n        />\n        <CopyToClipboard options={{ message: '' }} text={players} onCopy={() => setCopiedPlayers(true)}>\n          <button disabled={nbPlayersTyped === 0 || copiedPlayers} className=\"mt\">\n            {copiedPlayers ? 'Copied' : 'Copy to clipboard'}\n          </button>\n        </CopyToClipboard>\n        {renderMainSection()}\n      </div>\n      {renderFooter()}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}