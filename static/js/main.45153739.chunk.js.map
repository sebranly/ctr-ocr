{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","worker","createWorker","logger","m","console","log","doOCR","a","load","loadLanguage","initialize","recognize","text","data","setOcr","React","ocr","rel","href","className","label","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAmDeA,EA9CH,WACV,IAAMC,EAASC,uBAAa,CAC1BC,OAAQ,SAACC,GAAD,OAAOC,QAAQC,IAAIF,MAGvBG,EAAK,uCAAG,8BAAAC,EAAA,sEACNP,EAAOQ,OADD,uBAENR,EAAOS,aAAa,OAFd,uBAGNT,EAAOU,WAAW,OAHZ,uBAMFV,EAAOW,UAAU,sDANf,gBAKFC,EALE,EAKVC,KAAQD,KAEVE,EAAOF,GAPK,4CAAH,qDAaX,EAAsBG,WAAe,cAArC,mBAAOC,EAAP,KAAYF,EAAZ,KAMA,OAJAC,aAAgB,WACdT,OAIA,gBAAC,IAAD,KACE,gBAAC,IAAD,KAEE,6CACA,wBAAMW,IAAI,YAAYC,KAAK,wCAE7B,uBAAKC,UAAU,QACb,sBAAIA,UAAU,SAAd,aACA,0BAAKH,GACL,8BACE,0BAAQI,MAAM,IAAIC,MAAM,MACxB,0BAAQD,MAAM,IAAIC,MAAM,MACxB,0BAAQD,MAAM,IAAIC,MAAM,MACxB,0BAAQD,MAAM,IAAIC,MAAM,MACxB,0BAAQD,MAAM,IAAIC,MAAM,UChCdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAGP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.45153739.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler, PSM } from 'tesseract.js';\n\nconst App = () => {\n  const worker = createWorker({\n    logger: (m) => console.log(m)\n  });\n\n  const doOCR = async () => {\n    await worker.load();\n    await worker.loadLanguage('eng');\n    await worker.initialize('eng');\n    const {\n      data: { text }\n    } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n    setOcr(text);\n\n    // TODO: re-add\n    // await worker.terminate();\n  };\n\n  const [ocr, setOcr] = React.useState('Loading...');\n\n  React.useEffect(() => {\n    doOCR();\n  });\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        {/* <script src=\"../node_modules/tesseract.js/dist/tesseract.min.js\" type=\"text/javascript\" /> */}\n        <title>CTR OCR Test</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/ctr-ocr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">CTR OCR 2</h1>\n        <h2>{ocr}</h2>\n        <select>\n          <option label=\"1\" value=\"1\" />\n          <option label=\"2\" value=\"2\" />\n          <option label=\"3\" value=\"3\" />\n          <option label=\"4\" value=\"4\" />\n          <option label=\"5\" value=\"5\" />\n        </select>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // TODO: re-add\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}