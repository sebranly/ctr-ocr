{"version":3,"sources":["types.ts","utils/index.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","calculateProgress","ratioPreImage","imageIndex","imagesLength","formatCpuPlayers","cpuPlayers","length","filter","s","sort","join","SEPARATOR_PLAYERS","getPlayers","players","split","getReferencePlayers","humanPlayers","includeCpuPlayers","humanPlayersSplit","cpuPlayersSplit","getCloserString","str","list","listSafe","min","Infinity","name","forEach","lev","levenshtein","get","getExtract","info","index","category","width","height","left","applyRatio","top","widthCrop","heightCrop","All","ratioHeight","CTR_MAX_PLAYERS","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","Position","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","Time","leftExt","widthExt","numberRange","max","numbers","i","push","getParams","Username","tessedit_char_whitelist","CHARLIST_POSITION","tessedit_pageseg_mode","PSM_SINGLE_CHAR","CHARLIST_USERNAME","PSM_SINGLE_LINE","CHARLIST_TIME","ratio","nb","Math","floor","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","String","fromCharCode","CHARLIST_UPPERCASE_LETTERS","CHARLIST_LOWERCASE_LETTERS","CHARLIST_LETTERS","CHARLIST_DIGITS","FINAL_PROGRESS","App","renderBody","renderOption","option","label","key","value","resultsOcr","map","resultOcr","indexPlayer","player","position","username","includes","disabled","selectIsDisabled","onChange","onChangeResultsPlayer","optionsResultsPlayerHuman","optionsResultsPlayerCpu","renderOptions","renderRace","labelRace","validationUsernames","usernames","validation","correct","errMsg","some","uniq","validateUsernames","r","croppedImages","classes","isMobile","alt","className","src","renderCroppedImage","renderTable","renderCpuSection","cpuData","Object","keys","optionsCpuLanguages","textCheckbox","shouldIncludeCpuPlayers","nbPlayersTyped","nbPlayers","type","checked","onCpuCheckboxChange","onChangeCpuLanguage","cpuLanguage","classPlatform","placeholder","rows","onMount","a","setOnMountOver","setSelectIsDisabled","fetch","then","response","json","data","setCpuData","setCpuPlayers","doOCR","onMountOver","setProgress","setResultsOcr","setCroppedImages","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","promisesX","playerIndex","imgTransCopy","scheduler","dimensions","extracted","crop","options","count","getBufferAsync","buffer","getColors","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","resultsOcrTemp","croppedImagesTemp","imgTrans","Jimp","read","imagesURLs","imgJimp","rotate","w","bitmap","h","dimensionsCrop","clone","getBase64","err","promisesNames","grayscale","Promise","all","results","resultsNames","text","replace","dataResults","referencePlayers","playerGuess","terminate","useWindowSize","React","progress","images","setImages","setImagesURLs","setNbPlayers","setCpuLanguage","setPlayers","setIncludeCpuPlayers","newImageUrls","sortBy","image","URL","createObjectURL","onChangeImage","e","target","files","indexResultOcr","copy","optionsNbPlayers","classBgDisabled","rel","href","numberOfPieces","recycle","percent","percentString","style","maxWidth","renderProgressBar","Number","currentTarget","title","multiple","accept","onClick","imageSrc","_resultOcr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c1ac007.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n\nexport type Result = {\n  username: string;\n  position: number;\n};\n","import levenshtein from 'fast-levenshtein';\nimport {\n  CHARLIST_POSITION,\n  CHARLIST_TIME,\n  CHARLIST_USERNAME,\n  CTR_MAX_PLAYERS,\n  CTR_MAX_TIME_DIFF_SEC,\n  PSM_SINGLE_CHAR,\n  PSM_SINGLE_LINE,\n  SEPARATOR_PLAYERS,\n  TIME_DNF\n} from '../constants';\nimport { Category, Coord, Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\n\nconst calculateProgress = (ratioPreImage: number, imageIndex = 0, imagesLength?: number) => {\n  if (!imagesLength) return (ratioPreImage * 1) / 4;\n\n  return (ratioPreImage * 1) / 4 + (1 - (ratioPreImage * 1) / 4) * (imageIndex / imagesLength);\n};\n\nconst formatCpuPlayers = (cpuPlayers: string[]) => {\n  if (!cpuPlayers || cpuPlayers.length === 0) return '';\n\n  return cpuPlayers\n    .filter((s: string) => !!s)\n    .sort()\n    .join(SEPARATOR_PLAYERS);\n};\n\nconst getPlayers = (players: string) => {\n  if (!players) return [];\n\n  return players.split(SEPARATOR_PLAYERS).filter((s: string) => !!s);\n};\n\nconst isHumanPlayer = (player: string, humanPlayers: string) => {\n  if (!humanPlayers) return false;\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  return humanPlayersSplit.includes(player);\n};\n\nconst getReferencePlayers = (humanPlayers: string, cpuPlayers: string, includeCpuPlayers: boolean) => {\n  if (!humanPlayers) return [];\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  if (!includeCpuPlayers || !cpuPlayers) return humanPlayersSplit;\n\n  const cpuPlayersSplit = getPlayers(cpuPlayers);\n\n  return [...humanPlayersSplit, ...cpuPlayersSplit];\n};\n\nconst cleanString = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1000 + minutes * 60 * 1000;\n\n  return milliseconds;\n};\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\n// TODO: for All, index is actually the number of players\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const ratioHeight = index / CTR_MAX_PLAYERS;\n    const extract: Coord = {\n      height: applyRatio(ratioHeight, heightCrop),\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: CHARLIST_POSITION,\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: CHARLIST_USERNAME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: CHARLIST_TIME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (finishedTimesMs.toString() !== sortedTimesMs.toString()) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nexport {\n  applyRatio,\n  calculateProgress,\n  charRange,\n  cleanString,\n  convertToMs,\n  formatCpuPlayers,\n  getPlayers,\n  getReferencePlayers,\n  getCloserString,\n  getExtract,\n  getParams,\n  isHumanPlayer,\n  numberRange,\n  positionIsValid,\n  validateTimes,\n  validateUsernames\n};\n","import { charRange, numberRange } from './utils';\n\n// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// TODO: verify behavior in offline races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\n\nexport const CANONICAL_URL = 'https://sebranly.github.io/ctr-ocr';\nexport const CHARLIST_UPPERCASE_LETTERS = charRange('A', 'Z').join('');\nexport const CHARLIST_LOWERCASE_LETTERS = charRange('a', 'z').join('');\nexport const CHARLIST_LETTERS = `${CHARLIST_LOWERCASE_LETTERS}${CHARLIST_UPPERCASE_LETTERS}`;\nexport const CHARLIST_DIGITS = numberRange(0, 9).join('');\nexport const CHARLIST_POSITION = numberRange(1, CTR_MAX_PLAYERS).join('');\nexport const CHARLIST_TIME = `${CHARLIST_DIGITS}:-`;\nexport const CHARLIST_USERNAME = `${CHARLIST_LETTERS}${CHARLIST_DIGITS}:-_. `;\nexport const MIME_JPEG = 'image/jpeg';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const TIME_DNF = '--:--:--';\nexport const WEBSITE_TITLE = `Crash Team Reading`;\nexport const WEBSITE_VERSION = '1.0.0';\nexport const WEBSITE_DEFAULT_LANGUAGE = 'en';\nexport const PLACEHOLDER_CPUS = 'Loading CPUs...';\nexport const URL_CPUS = 'https://sebranly.github.io/json/ctrocr/players.json';\nexport const INITIAL_PROGRESS = 1 / 100;\nexport const FINAL_PROGRESS = 1;\nexport const PLACEHOLDER_PLAYERS = `Hyène_JurassX\nAlexiz\nColonel_Hay\nTATANE`;\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category, Result } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\nimport { sortBy } from 'lodash';\n\nimport {\n  CANONICAL_URL,\n  CTR_MAX_PLAYERS,\n  FINAL_PROGRESS,\n  INITIAL_PROGRESS,\n  MIME_JPEG,\n  PLACEHOLDER_CPUS,\n  PLACEHOLDER_PLAYERS,\n  URL_CPUS,\n  WEBSITE_DEFAULT_LANGUAGE,\n  WEBSITE_TITLE,\n  WEBSITE_VERSION\n} from './constants';\nimport {\n  calculateProgress,\n  cleanString,\n  formatCpuPlayers,\n  getCloserString,\n  getExtract,\n  getParams,\n  getPlayers,\n  getReferencePlayers,\n  isHumanPlayer,\n  numberRange,\n  validateUsernames\n} from './utils';\n\nconst language = 'eng';\n\nconst App = () => {\n  const renderProgressBar = () => {\n    if ([0, FINAL_PROGRESS].includes(progress)) return null;\n    const percent = Math.floor(progress * 100);\n    const percentString = `${percent}%`;\n    return (\n      <div className=\"progress-bar sticky\">\n        <div className=\"pl progress\" style={{ maxWidth: percentString }}>\n          {percentString}\n        </div>\n      </div>\n    );\n  };\n\n  const renderTable = (index: number) => {\n    return (\n      <table className=\"flex-1\">\n        <thead>\n          <tr>\n            <th>Position</th>\n            {includeCpuPlayers && <th>Type</th>}\n            <th>Name</th>\n          </tr>\n        </thead>\n        {renderBody(index)}\n      </table>\n    );\n  };\n\n  const renderCroppedImage = (index: number) => {\n    if (!croppedImages || croppedImages.length <= index) return null;\n\n    const classes = isMobile ? 'img-show max-width-100' : 'img-show max-width-45';\n\n    return <img alt=\"Cropped Results\" className={classes} src={croppedImages[index]} />;\n  };\n\n  const renderImages = () => {\n    if (isMobile) {\n      return imagesURLs.map((imageSrc: string, index: number) => (\n        <img alt=\"tbd\" className=\"img-full max-width-100 block\" key={`${imageSrc}-${index}`} src={imageSrc} />\n      ));\n    }\n\n    return (\n      <div className=\"flex-container center\">\n        {imagesURLs.map((imageSrc: string, index: number) => (\n          <img alt=\"tbd\" className=\"img-full max-width-45 flex-1\" key={`${imageSrc}-${index}`} src={imageSrc} />\n        ))}\n      </div>\n    );\n  };\n\n  const renderBody = (index: number) => {\n    const renderOption = (option: string) => {\n      const label = `${option}`;\n      return (\n        <option key={option} label={label} value={option}>\n          {label}\n        </option>\n      );\n    };\n\n    const renderOptions = () => {\n      const optionsResultsPlayerHuman = getPlayers(players).sort();\n      if (!includeCpuPlayers) {\n        return optionsResultsPlayerHuman.map(renderOption);\n      }\n\n      const optionsResultsPlayerCpu = getPlayers(cpuPlayers).sort();\n\n      return (\n        <>\n          <optgroup key=\"human\" label=\"Human\">\n            {optionsResultsPlayerHuman.map(renderOption)}\n          </optgroup>\n          <optgroup key=\"cpus\" label=\"CPUs\">\n            {optionsResultsPlayerCpu.map(renderOption)}\n          </optgroup>\n        </>\n      );\n    };\n\n    return (\n      <tbody>\n        {resultsOcr[index].map((resultOcr: Result, indexPlayer: number) => {\n          const { position, username } = resultOcr;\n          const key = `${position}-${username}`;\n\n          return (\n            <tr key={key}>\n              <td>{position}</td>\n              {includeCpuPlayers && <td>{isHumanPlayer(username, players) ? '👤' : '🤖'}</td>}\n              <td>\n                <select\n                  disabled={selectIsDisabled}\n                  onChange={onChangeResultsPlayer(index, indexPlayer)}\n                  value={username}\n                >\n                  {renderOptions()}\n                </select>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderRace = (index: number) => {\n    const labelRace = `Race ${index + 1}`;\n    const validationUsernames = validateUsernames(resultsOcr[index].map((r: Result) => r.username));\n\n    return (\n      <div key={index}>\n        <h3>{labelRace}</h3>\n        {renderCroppedImage(index)}\n        <div className=\"flex-container results\">{renderTable(index)}</div>\n        {!validationUsernames.correct && <div className=\"red\">{validationUsernames.errMsg}</div>}\n      </div>\n    );\n  };\n\n  const renderRaces = () => {\n    if (!resultsOcr || resultsOcr.length === 0) return null;\n\n    return (\n      <>\n        <div className=\"center\">\n          <h2>Results</h2>\n          {resultsOcr.map((_resultOcr: Result[], index: number) => renderRace(index))}\n        </div>\n      </>\n    );\n  };\n\n  const renderCpuMainSection = () => {\n    return (\n      <>\n        <h3>CPUs</h3>\n        {renderCpuSection()}\n      </>\n    );\n  };\n\n  const renderMainSection = () => {\n    if (nbPlayersTyped === 0) return null;\n\n    return (\n      <>\n        {renderCpuMainSection()}\n        <h2>Images</h2>\n        <div className=\"text-center mb\">\n          <div className=\"ml block mb\">\n            Select screenshots in JPEG format, taken right when Returning to Lobby was around 14 seconds\n          </div>\n          <div className=\"ml block mb\">Screenshots will be ordered alphabetically by name</div>\n          <div className=\"ml block mb\">\n            An example:{' '}\n            <a\n              href=\"https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG1.JPG\"\n              rel=\"noopener noreferrer\"\n              title=\"Example of valid JPEG screenshot\"\n              target=\"_blank\"\n            >\n              Example of valid JPEG screenshot\n            </a>\n          </div>\n          <input\n            className=\"inline\"\n            disabled={selectIsDisabled}\n            type=\"file\"\n            multiple\n            accept={MIME_JPEG}\n            onChange={onChangeImage}\n          />\n          <input\n            className=\"inline-block ml\"\n            type=\"button\"\n            value=\"Start recognition\"\n            disabled={selectIsDisabled || !imagesURLs || imagesURLs.length === 0}\n            onClick={doOCR}\n          />\n        </div>\n        {renderImages()}\n        {renderRaces()}\n      </>\n    );\n  };\n\n  const renderCpuSection = () => {\n    if (!cpuData || Object.keys(cpuData).length === 0) return <div className=\"text-center mb\">{PLACEHOLDER_CPUS}</div>;\n\n    const optionsCpuLanguages = Object.keys(cpuData);\n    const textCheckbox = shouldIncludeCpuPlayers\n      ? `Automatically activated bots because ${nbPlayersTyped} human player(s) was/were filled out of a total of ${nbPlayers} players`\n      : 'Check this if there were bots during the race';\n\n    return (\n      <>\n        <div className=\"text-center mb\">\n          <input\n            name=\"includeCpuPlayers\"\n            type=\"checkbox\"\n            checked={includeCpuPlayers}\n            onChange={onCpuCheckboxChange}\n            disabled={shouldIncludeCpuPlayers}\n          />\n          <div className=\"ml inline\">{textCheckbox}</div>\n        </div>\n        {includeCpuPlayers && (\n          <>\n            <div className=\"text-center mb\">\n              Bots are automatically determined based on the language and cannot be edited\n            </div>\n            <div className=\"inline mr\">Language in images</div>\n            <select disabled={selectIsDisabled} onChange={onChangeCpuLanguage} value={cpuLanguage}>\n              {optionsCpuLanguages.map((option: string) => {\n                const label = `${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n            <textarea\n              className={`textarea-${classPlatform}`}\n              disabled={true}\n              placeholder={PLACEHOLDER_CPUS}\n              rows={CTR_MAX_PLAYERS}\n              value={cpuPlayers}\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n    fetch(URL_CPUS)\n      .then((response) => response.json())\n      .then((data) => {\n        setCpuData(data);\n        setCpuPlayers(formatCpuPlayers((data as any)[WEBSITE_DEFAULT_LANGUAGE]));\n      });\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n\n    setSelectIsDisabled(true);\n    setProgress(INITIAL_PROGRESS);\n    setResultsOcr([]);\n    setCroppedImages([]);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    await workerUsername.load();\n    setProgress(calculateProgress(1 / 4));\n\n    await workerUsername.loadLanguage(language);\n    setProgress(calculateProgress(2 / 4));\n\n    await workerUsername.initialize(language);\n    setProgress(calculateProgress(3 / 4));\n\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n    setProgress(calculateProgress(4 / 4));\n\n    const playerIndexes = numberRange(0, nbPlayers - 1);\n\n    const promisesX = async (playerIndex: number, category: Category, info: any, imgTransCopy: any) => {\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: MIME_JPEG\n      };\n\n      const buffer: any = await extracted.getBufferAsync(MIME_JPEG);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      const bufferFin: any = await extractedFin.getBufferAsync(MIME_JPEG);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    let resultsOcrTemp: Result[][] = [];\n    let croppedImagesTemp: string[] = [];\n\n    for (let i = 0; i < imagesURLs.length; i++) {\n      let imgTrans: any;\n\n      try {\n        const imgJimp = await Jimp.read(imagesURLs[i]);\n\n        imgTrans = imgJimp.rotate(-6.2);\n\n        const w = imgTrans.bitmap.width;\n        const h = imgTrans.bitmap.height;\n        const info = { width: w, height: h };\n        const dimensionsCrop = getExtract(info, nbPlayers, Category.All);\n\n        const imgTransCopy = imgTrans.clone();\n        const extractedCrop = imgTransCopy.crop(\n          dimensionsCrop.left,\n          dimensionsCrop.top,\n          dimensionsCrop.width,\n          dimensionsCrop.height\n        );\n\n        // eslint-disable-next-line no-loop-func\n        extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n          croppedImagesTemp = [...croppedImagesTemp, src];\n        });\n\n        const promisesNames = playerIndexes.map((playerIndex) =>\n          promisesX(playerIndex, Category.Username, info, imgTrans.grayscale().clone())\n        );\n\n        setProgress(calculateProgress(1, i, imagesURLs.length));\n        const results = await Promise.all(promisesNames);\n        const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n        const dataResults: Result[] = [];\n        const referencePlayers = getReferencePlayers(players, cpuPlayers, includeCpuPlayers);\n        playerIndexes.forEach((playerIndex) => {\n          const playerGuess = resultsNames[playerIndex];\n          const result: Result = {\n            username: getCloserString(playerGuess, referencePlayers),\n            position: playerIndex + 1\n          };\n\n          dataResults.push(result);\n        });\n\n        resultsOcrTemp = [...resultsOcrTemp, dataResults];\n      } catch (err) {\n        // TODO: have better error handling\n        setSelectIsDisabled(false);\n      }\n    }\n\n    setResultsOcr(resultsOcrTemp);\n    setCroppedImages(croppedImagesTemp);\n    setProgress(1);\n    setSelectIsDisabled(false);\n\n    await schedulerUsername.terminate();\n  };\n\n  const { width, height } = useWindowSize();\n  const [progress, setProgress] = React.useState(0);\n  const [images, setImages] = React.useState<any[]>([]);\n  const [imagesURLs, setImagesURLs] = React.useState<any[]>([]);\n  const [croppedImages, setCroppedImages] = React.useState<any[]>([]);\n  const [nbPlayers, setNbPlayers] = React.useState(CTR_MAX_PLAYERS);\n  const [cpuLanguage, setCpuLanguage] = React.useState(WEBSITE_DEFAULT_LANGUAGE);\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [resultsOcr, setResultsOcr] = React.useState<Result[][]>([]);\n  const [players, setPlayers] = React.useState<string>('');\n  const [cpuPlayers, setCpuPlayers] = React.useState<string>(PLACEHOLDER_CPUS);\n  const [cpuData, setCpuData] = React.useState<any>({});\n  const [includeCpuPlayers, setIncludeCpuPlayers] = React.useState(false);\n\n  // TODO: do uniq\n  const nbPlayersTyped = getPlayers(players).length;\n  const shouldIncludeCpuPlayers = nbPlayersTyped < nbPlayers;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  React.useEffect(() => {\n    if (images.length < 1) return;\n    const newImageUrls: any[] = [];\n    const sortImages = sortBy(images, (image: any) => image.name);\n    sortImages.forEach((image) => newImageUrls.push(URL.createObjectURL(image)));\n    setImagesURLs(newImageUrls);\n  }, [images]);\n\n  React.useEffect(() => {\n    if (shouldIncludeCpuPlayers && !includeCpuPlayers) {\n      setIncludeCpuPlayers(true);\n    }\n  }, [shouldIncludeCpuPlayers, includeCpuPlayers]);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n  };\n\n  const onChangeImage = (e: any) => {\n    setImages([...e.target.files]);\n    setResultsOcr([]);\n  };\n\n  const onChangeNbPlayers = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNbPlayers(Number(e.target.value));\n  };\n\n  const onChangeCpuLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCpuLanguage(e.target.value);\n    setCpuPlayers(formatCpuPlayers(cpuData[e.target.value]));\n  };\n\n  const onChangeResultsPlayer =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].username = e.target.value;\n      setResultsOcr(copy);\n    };\n\n  const onCpuCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIncludeCpuPlayers(e.target.checked);\n  };\n\n  const optionsNbPlayers = numberRange(2, CTR_MAX_PLAYERS);\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n  const classBgDisabled = selectIsDisabled ? 'bg-grey' : 'bg-white';\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{WEBSITE_TITLE}</title>\n        <link rel=\"canonical\" href={CANONICAL_URL} />\n      </Helmet>\n      <div className=\"main\">\n        <h1>{WEBSITE_TITLE}</h1>\n        <div className=\"w3-light-grey\"></div>\n        {progress === FINAL_PROGRESS && <Confetti width={width} height={height} numberOfPieces={800} recycle={false} />}\n        <div className={`center main-content-${classPlatform} ${classBgDisabled}`}>\n          {renderProgressBar()}\n          <h2>Players</h2>\n          <h3>Number of players</h3>\n          <div className=\"text-center mb\">This includes CPUs if any</div>\n          <select disabled={selectIsDisabled} onChange={onChangeNbPlayers} value={nbPlayers}>\n            {optionsNbPlayers.map((option: number) => {\n              const label = `${option} players`;\n              return (\n                <option key={option} label={label} value={option}>\n                  {label}\n                </option>\n              );\n            })}\n          </select>\n          <h3>Human Players</h3>\n          <div className=\"text-center mb\">Type all human players present in the races. Type one username per line.</div>\n          <textarea\n            className={`textarea-${classPlatform}`}\n            disabled={selectIsDisabled}\n            placeholder={PLACEHOLDER_PLAYERS}\n            rows={nbPlayers}\n            value={players}\n            onChange={onPlayersChange}\n          />\n          {renderMainSection()}\n        </div>\n        <div className=\"mt2 text-center\">{`v${WEBSITE_VERSION}`}</div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}