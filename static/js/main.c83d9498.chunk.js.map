{"version":3,"sources":["types.ts","utils/index.ts","constants.ts","utils/regEx.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","getCloserString","str","list","min","Infinity","name","forEach","s","lev","levenshtein","get","numberRange","max","numbers","i","push","getParams","category","Position","Time","Username","tessedit_char_whitelist","CHARLIST_POSITION","tessedit_pageseg_mode","PSM_SINGLE_CHAR","CHARLIST_USERNAME","PSM_SINGLE_LINE","CHARLIST_TIME","applyRatio","ratio","nb","Math","floor","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","String","fromCharCode","CHARLIST_UPPERCASE_LETTERS","join","CHARLIST_LOWERCASE_LETTERS","CHARLIST_LETTERS","CHARLIST_DIGITS","PLAYERS","REGEX_TIME","getExtract","info","index","width","height","left","top","widthCrop","heightCrop","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","extract","isTime","leftExt","widthExt","App","renderBody","resultsOcr","map","rawLine","position","username","time","key","emojiPos","pos","Number","length","positionIsValid","emojiTime","test","onMount","a","setOnMountOver","setSelectIsDisabled","doOCR","onMountOver","setResultsOcr","undefined","schedulerTime","createScheduler","schedulerUsername","schedulerPosition","workerTime","createWorker","logger","m","console","log","workerUsername","workerPosition","addWorker","div","document","getElementById","innerHTML","setOcr","load","loadLanguage","initialize","posParams","setParameters","usernameParams","timeParams","playerIndexes","CTR_MAX_PLAYERS","promisesX","playerIndex","imsTrans","imgTransCopy","imgTrans","clone","scheduler","dimensions","extracted","crop","options","count","type","getBufferAsync","buffer","getColors","then","colors","rgb","shouldInvert","extractedFin","invert","getBase64","err","src","img","createElement","setAttribute","appendChild","bufferFin","addJob","pathInput","imgIndex","Jimp","read","imgJimp","rotate","grayscale","w","bitmap","h","promisesPositions","promisesNames","promisesTimes","Promise","all","results","resultsText","r","data","text","replace","resultsPositions","slice","resultsNames","resultsTimes","playerGuess","d","playerFix","terminate","toString","React","ocr","selectIsDisabled","setImgIndex","rel","href","className","disabled","onChange","e","target","value","option","label","alt","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c83d9498.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username'\n}\n","import levenshtein from 'fast-levenshtein';\nimport { CHARLIST_POSITION, CHARLIST_TIME, CHARLIST_USERNAME, PSM_SINGLE_CHAR, PSM_SINGLE_LINE } from '../constants';\nimport { Category } from '../types';\n\nconst cleanString = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst getCloserString = (str: string, list: string[]) => {\n  let min = Infinity;\n  let name = str;\n\n  list.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: CHARLIST_POSITION,\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: CHARLIST_USERNAME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: CHARLIST_TIME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nexport { applyRatio, charRange, cleanString, getCloserString, getParams, numberRange, positionIsValid };\n","import { charRange, numberRange } from './utils';\n\nexport const CTR_MAX_PLAYERS = 8;\nexport const CHARLIST_UPPERCASE_LETTERS = charRange('A', 'Z').join('');\nexport const CHARLIST_LOWERCASE_LETTERS = charRange('a', 'z').join('');\nexport const CHARLIST_LETTERS = `${CHARLIST_LOWERCASE_LETTERS}${CHARLIST_UPPERCASE_LETTERS}`;\nexport const CHARLIST_DIGITS = numberRange(0, 9).join('');\nexport const CHARLIST_POSITION = numberRange(1, CTR_MAX_PLAYERS).join('');\nexport const CHARLIST_TIME = `${CHARLIST_DIGITS}:-`;\nexport const CHARLIST_USERNAME = `${CHARLIST_LETTERS}${CHARLIST_DIGITS}:-_. `;\nexport const MIME_JPEG = 'image/jpeg';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const PLAYERS = [\n  'caso-pyro01',\n  'stin_wz',\n  'ZouGui28',\n  'francois24540',\n  'DGregson97',\n  'nessanumen',\n  'AlexKenshin_33',\n  'CrazyLittleJazzy',\n  'mmartin_m',\n  'Dr N. Tropy',\n  'Kity_Panda',\n  'Jakubeq1_',\n  'Assistant de laboratoire',\n  'Bébé N. Tropy',\n  'Faux Crash',\n  'giomastik',\n  'MarioAlfie123',\n  'kimmyy043',\n  'Mav15151515',\n  'Axe34070',\n  'Stew'\n];\n","export const REGEX_TIME = /^(0|[1-9]\\d{0,}):[0-5]\\d:\\d\\d$/;\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\n\nimport { CTR_MAX_PLAYERS, MIME_JPEG, PLAYERS } from './constants';\nimport { applyRatio, cleanString, getCloserString, getParams, numberRange, positionIsValid } from './utils';\nimport { REGEX_TIME } from './utils/regEx';\n\nconst language = 'eng';\n\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  if (category === Category.Position) {\n    const extract = {\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop),\n      height: heightExt\n    };\n\n    return extract;\n  }\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract = {\n    left: leftExt,\n    top: topExt,\n    width: widthExt,\n    height: heightExt\n  };\n\n  return extract;\n};\n\nconst App = () => {\n  const renderTable = () => {\n    if (!resultsOcr) return null;\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Position</th>\n            <th>Name</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        {renderBody()}\n      </table>\n    );\n  };\n\n  const renderBody = () => {\n    if (!resultsOcr) return null;\n\n    return (\n      <tbody>\n        {(resultsOcr as any).map((rawLine: any) => {\n          const { position, username, time } = rawLine;\n          const key = `${position}-${username}-${time}`;\n          const posIsValid = positionIsValid(position, CTR_MAX_PLAYERS);\n          const timeIsValid = REGEX_TIME.test(time);\n          const emojiPos = posIsValid ? '✅' : '❌';\n          const emojiTime = timeIsValid ? '✅' : '❌';\n\n          return (\n            <tr key={key}>\n              <td>\n                {emojiPos} {position}\n              </td>\n              <td>{username}</td>\n              <td>\n                {emojiTime} {time}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n    setSelectIsDisabled(true);\n    setResultsOcr(undefined);\n\n    const schedulerTime = createScheduler();\n    const schedulerUsername = createScheduler();\n    const schedulerPosition = createScheduler();\n\n    const workerTime = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const workerUsername = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    const workerPosition = createWorker({\n      logger: (m: any) => console.log(m)\n    });\n\n    schedulerTime.addWorker(workerTime);\n    schedulerUsername.addWorker(workerUsername);\n    schedulerPosition.addWorker(workerPosition);\n\n    const div = document.getElementById('img-show');\n    if (div) div.innerHTML = '';\n\n    setOcr('Loading engine for position');\n    await workerPosition.load();\n    setOcr('Loading engine for username');\n    await workerUsername.load();\n    setOcr('Loading engine for time');\n    await workerTime.load();\n\n    setOcr('Loading language for position');\n    await workerPosition.loadLanguage(language);\n    setOcr('Loading language for username');\n    await workerUsername.loadLanguage(language);\n    setOcr('Loading language for time');\n    await workerTime.loadLanguage(language);\n\n    setOcr('Initializing engine for position');\n    await workerPosition.initialize(language);\n    setOcr('Initializing engine for username');\n    await workerUsername.initialize(language);\n    setOcr('Initializing engine for time');\n    await workerTime.initialize(language);\n\n    setOcr('Setting parameter for position');\n    const posParams = getParams(Category.Position);\n    await workerPosition.setParameters(posParams);\n\n    setOcr('Setting parameter for username');\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    setOcr('Setting parameter for time');\n    const timeParams = getParams(Category.Time);\n    await workerTime.setParameters(timeParams);\n\n    const playerIndexes = numberRange(0, CTR_MAX_PLAYERS - 1);\n\n    const promisesX = async (playerIndex: number, category: Category, info: any, imsTrans: any) => {\n      const imgTransCopy = imgTrans.clone();\n      let scheduler = null;\n      if (category === Category.Time) scheduler = schedulerTime;\n      else if (category === Category.Username) scheduler = schedulerUsername;\n      else scheduler = schedulerPosition;\n      const dimensions = getExtract(info, playerIndex, category);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: MIME_JPEG\n      };\n\n      const buffer: any = await extracted.getBufferAsync(MIME_JPEG);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        console.log('🚀 ~ rgb ~ colors', playerIndex, colors);\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n      extractedFin.getBase64(MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementById('img-show');\n        if (div) div.appendChild(img);\n      });\n\n      const bufferFin: any = await extractedFin.getBufferAsync(MIME_JPEG);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    const pathInput = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n    setOcr('Reading the image');\n    let imgTrans: any;\n    try {\n      const imgJimp = await Jimp.read(pathInput);\n\n      setOcr('Rotating the image');\n      imgTrans = imgJimp.rotate(-6.2).grayscale();\n\n      imgTrans.getBase64(MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementById('img-show');\n        if (div) div.appendChild(img);\n      });\n\n      const w = imgTrans.bitmap.width;\n      const h = imgTrans.bitmap.height;\n      const info = { width: w, height: h };\n      console.log('info.width', info.width, 'info.height', info.height);\n\n      const promisesPositions = playerIndexes.map((playerIndex) =>\n        promisesX(playerIndex, Category.Position, info, imgTrans)\n      );\n      const promisesNames = playerIndexes.map((playerIndex) =>\n        promisesX(playerIndex, Category.Username, info, imgTrans)\n      );\n      const promisesTimes = playerIndexes.map((playerIndex) => promisesX(playerIndex, Category.Time, info, imgTrans));\n\n      setOcr('Starting text recognition');\n      const results = await Promise.all([...promisesPositions, ...promisesNames, ...promisesTimes]);\n      const resultsText = results.map((r) => cleanString((r as any).data.text));\n\n      const resultsPositions = resultsText.slice(0, CTR_MAX_PLAYERS);\n      console.log('resultsPositions', resultsPositions);\n      const resultsNames = resultsText.slice(CTR_MAX_PLAYERS, CTR_MAX_PLAYERS * 2);\n      console.log('resultsNames', resultsNames);\n      const resultsTimes = resultsText.slice(CTR_MAX_PLAYERS * 2);\n      console.log('resultsTimes', resultsTimes);\n\n      const data: any = [];\n      playerIndexes.forEach((playerIndex) => {\n        const playerGuess = resultsNames[playerIndex];\n        const d = {\n          username: playerGuess,\n          position: resultsPositions[playerIndex],\n          playerFix: getCloserString(playerGuess, PLAYERS),\n          time: resultsTimes[playerIndex]\n        };\n        data.push(d as any);\n      });\n\n      setResultsOcr(data);\n\n      setOcr('Recognition is done and successful');\n      setSelectIsDisabled(false);\n\n      await schedulerTime.terminate();\n      await schedulerUsername.terminate();\n      await schedulerPosition.terminate();\n    } catch (err) {\n      setOcr(`Unable to open image ${(err as any).toString()}. Please restart.`);\n      setSelectIsDisabled(false);\n    }\n  };\n\n  const [ocr, setOcr] = React.useState('Pick an image');\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [imgIndex, setImgIndex] = React.useState(1);\n  const [resultsOcr, setResultsOcr] = React.useState(undefined);\n\n  React.useEffect(() => {\n    doOCR();\n  }, [imgIndex]);\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setImgIndex(Number(e.target.value));\n  };\n\n  const src = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n  const options = [...numberRange(1, 5), ...numberRange(11, 20)];\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>CTR OCR</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/ctr-ocr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">CTR OCR</h1>\n        <div>{ocr}</div>\n        <select disabled={selectIsDisabled} onChange={onChange}>\n          {options.map((option: number) => {\n            const label = `Image ${option}`;\n            return (\n              <option key={option} label={label} value={option}>\n                {label}\n              </option>\n            );\n          })}\n        </select>\n        <img alt={`Example ${imgIndex}`} src={src} />\n        {renderTable()}\n        <div id=\"img-show\"></div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}