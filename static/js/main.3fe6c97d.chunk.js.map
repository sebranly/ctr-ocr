{"version":3,"sources":["types.ts","constants/general.ts","constants/index.ts","utils/string.ts","utils/number.ts","utils/charList.ts","utils/userAgent.ts","utils/index.ts","utils/image.ts","App.tsx","utils/validation.ts","serviceWorker.ts","index.tsx"],"names":["Category","Progress","AUTHOR_GITHUB","PROJECT_URL","GUIDE_FOLDER","URL_CPUS","EXAMPLE_IMAGES_FOLDER","EXAMPLE_IMAGES_FOLDER_FULL_EVENT","CANONICAL_URL","MIME_JPEG","MIME_PNG","PLACEHOLDER_PLAYERS","getCloserString","str","list","listSafe","filter","s","min","Infinity","name","forEach","lev","levenshtein","get","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","i","push","String","fromCharCode","sortCaseInsensitive","a","b","lowerA","toLowerCase","lowerB","numberRange","max","numbers","applyRatio","ratio","nb","Math","floor","getCharListDigits","join","getCharListUsername","charListUppercaseLetters","charListLowercaseLetters","charListLetters","isKeywordUA","userAgent","keyword","browser","includes","formatCpuPlayers","cpuPlayers","length","sort","getPlayersPlaceholder","nbPlayers","isChrome","isChromeUA","isFirefox","isFirefoxUA","isMobile","type","device","isMobileUA","slice","getPlayers","players","split","getReferencePlayers","humanPlayers","includeCpuPlayers","humanPlayersSplit","cpuPlayersSplit","getParams","category","Position","Time","Username","tessedit_char_whitelist","tessedit_pageseg_mode","getTeamNames","nbTeams","map","n","getMimeType","extension","getExtract","info","index","width","height","left","top","widthCrop","heightCrop","All","ratioHeight","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","leftExt","widthExt","getFilenameWithoutExtension","filename","sortImagesByFilename","images","imageA","imageB","nameA","nameB","strA","strB","regexAlpha","regexNumeric","newA","replace","newB","aN","parseInt","bN","sortAlphanumeric","App","renderBody","renderOption","option","label","key","value","resultsOcr","resultOcr","indexPlayer","player","position","username","lastDigit","getPositionString","onChange","onChangeResultsPlayer","optionsResultsPlayerHuman","optionsResultsPlayerCpu","renderOptions","renderRace","labelRace","validationUsernames","usernames","validation","correct","errMsg","some","uniq","validateUsernames","r","croppedImages","classes","alt","className","src","renderCroppedImage","renderTable","renderTeamSection","disabled","selectIsDisabled","onChangeNbTeams","optionsNbTeams","renderTeamRepartition","onChangeTeam","e","currentTarget","newPlayerTeams","playerTeams","setPlayerTeams","renderPlayerTeamRepartition","colorPlayer","teams","playerTeam","indexOf","getColorPlayer","playerClassnames","team","isChecked","id","checked","htmlFor","renderPlayerTeams","classesValidation","validationTeams","isWarning","playersNames","renderCpuSection","cpuData","Object","keys","guideCpu","optionsCpuLanguages","textCheckbox","shouldIncludeCpuPlayers","nbPlayersTyped","onCpuCheckboxChange","href","rel","title","target","onChangeCpuLanguage","cpuLanguage","classPlatform","placeholder","rows","onMount","setOnMountOver","setSelectIsDisabled","fetch","then","response","json","data","setCpuData","setCpuPlayers","doOCR","onMountOver","setOcrProgress","Started","setOcrProgressText","setResultsOcr","setCroppedImages","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","promisesX","playerIndex","imgTransCopy","scheduler","dimensions","mimeType","extracted","crop","options","count","getBufferAsync","buffer","getColors","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","resultsOcrTemp","croppedImagesTemp","imagesURLs","progressText","Jimp","read","imgJimpTemp","initialHeight","bitmap","imgJimp","resize","AUTO","imgTrans","rotate","h","w","getExtension","dimensionsCrop","clone","getBase64","err","imgTransGray","grayscale","promisesNames","Promise","all","results","resultsNames","text","replaceAll","dataResults","referencePlayers","playerGuess","Done","terminate","useWindowSize","React","NotStarted","ocrProgress","ocrProgressText","setImages","setImagesURLs","setNbPlayers","setCpuLanguage","setPlayers","setIncludeCpuPlayers","setTeams","setNbTeams","newImageUrls","image","URL","createObjectURL","onChangeImage","files","newNbTeams","Number","teamNames","indexResultOcr","copy","optionsNbPlayers","getOptionsTeams","classBgDisabled","missingTeamForPlayers","incorrectTeamForPlayers","seenTeams","validateTeams","navigator","userAgentResult","UAParser","getResult","placeholderPlayers","numberOfPieces","recycle","jpgImage","pngImage","guideImage","multiple","accept","renderImagesUpload","imageSrc","colorText","classesText","onClick","renderStart","_resultOcr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fe6c97d.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport enum Progress {\n  NotStarted = 'not_started',\n  Started = 'started',\n  Done = 'done'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n  isWarning?: boolean;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n\nexport type Result = {\n  username: string;\n  position: number;\n};\n","export const WEBSITE_LANGUAGE = 'en';\nexport const AUTHOR_NAME = 'sebranly';\nexport const AUTHOR_GITHUB = `https://${AUTHOR_NAME}.github.io`;\nexport const PROJECT_NAME = 'ctr-ocr';\nexport const JSON_FOLDER = 'ctr-ocr';\nexport const PROJECT_URL = `https://github.com/${AUTHOR_NAME}/${PROJECT_NAME}`;\nexport const CRASH_TEAM_RANKING_AUTHOR_URL = 'https://crashteamranking.com/members/siblingbling/tt/';\nexport const GUIDE_FOLDER = `${PROJECT_URL}/blob/main/doc/guide/${WEBSITE_LANGUAGE}/`;\nexport const LOG_CONSOLE = false;\nexport const WEBSITE_TITLE = 'Crash Team Results';\nexport const WEBSITE_VERSION = '1.0.5';\nexport const WEBSITE_DEFAULT_LANGUAGE = 'en';\nexport const URL_CPUS = `${AUTHOR_GITHUB}/json/${JSON_FOLDER}/players.json`;\nexport const EXAMPLE_IMAGES_FOLDER = `https://raw.githubusercontent.com/${AUTHOR_NAME}/${PROJECT_NAME}/main/src/img/examples/`;\nexport const EXAMPLE_IMAGES_FOLDER_FULL_EVENT = `${PROJECT_URL}/tree/main/src/img/examples/full-event/`;\nexport const CANONICAL_URL = `${AUTHOR_GITHUB}/${PROJECT_NAME}`;\n","// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// The following is applicable to online races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\nexport const MAX_HEIGHT_IMG = 1_000;\nexport const MIME_JPEG = 'image/jpeg';\nexport const MIME_PNG = 'image/png';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const TIME_DNF = '--:--:--';\nexport const PLACEHOLDER_CPUS = 'Loading CPUs...';\n// There will always be a possibility for 2 teams\nexport const INITIAL_TEAM_NB = 2;\nexport const PLACEHOLDER_PLAYERS = [\n  'ZouGui28',\n  'Nefarious_CTR',\n  'Kyo-Bomba',\n  'WadaDim-PatroL',\n  'Hyène_JurassX',\n  'Alexiz',\n  'Colonel_Hay',\n  'TATANE'\n];\n","import levenshtein from 'fast-levenshtein';\n\nconst cleanString = (str: string) => str.replaceAll('\\n', '').replaceAll(' ', '');\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst sortAlphanumeric = (strA: string, strB: string) => {\n  const regexAlpha = /[^a-zA-Z]/g;\n  const regexNumeric = /[^0-9]/g;\n\n  var newA = strA.replace(regexAlpha, '');\n  var newB = strB.replace(regexAlpha, '');\n\n  if (newA === newB) {\n    var aN = parseInt(strA.replace(regexNumeric, ''), 10);\n    var bN = parseInt(strB.replace(regexNumeric, ''), 10);\n    return aN === bN ? 0 : aN > bN ? 1 : -1;\n  }\n\n  return newA > newB ? 1 : -1;\n};\n\nconst sortCaseInsensitive = (a: string, b: string) => {\n  if (!a || !b) return 1;\n  const lowerA = a.toLowerCase();\n  const lowerB = b.toLowerCase();\n\n  if (lowerA === lowerB) return 0;\n\n  return lowerA > lowerB ? 1 : -1;\n};\n\nexport { charRange, cleanString, getCloserString, sortAlphanumeric, sortCaseInsensitive };\n","const numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nexport { applyRatio, numberRange };\n","import { CTR_MAX_PLAYERS } from '../constants';\nimport { numberRange } from './number';\nimport { charRange } from './string';\n\nconst getCharListPosition = () => numberRange(1, CTR_MAX_PLAYERS).join('');\nconst getCharListDigits = () => numberRange(0, 9).join('');\nconst getCharListTime = () => `${getCharListDigits()}:-`;\n\nconst getCharListUsername = () => {\n  const charListUppercaseLetters = charRange('A', 'Z').join('');\n  const charListLowercaseLetters = charRange('a', 'z').join('');\n  const charListLetters = `${charListLowercaseLetters}${charListUppercaseLetters}`;\n\n  return `${charListLetters}${getCharListDigits()}:-_. `;\n};\n\nexport { getCharListPosition, getCharListDigits, getCharListTime, getCharListUsername };\n","import UAParser from 'ua-parser-js';\n\nconst isMobileUA = (userAgent: UAParser.IResult) => {\n  const type = userAgent.device?.type ?? '';\n\n  return ['mobile', 'tablet'].includes(type);\n};\n\nconst isKeywordUA = (userAgent: UAParser.IResult, keyword: string) => {\n  const name = userAgent.browser?.name ?? '';\n\n  return name.includes(keyword);\n};\n\nconst isChromeUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Chrome');\nconst isFirefoxUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Firefox');\n\nexport { isMobileUA, isChromeUA, isFirefoxUA };\n","import { PLACEHOLDER_PLAYERS, PSM_SINGLE_CHAR, PSM_SINGLE_LINE, SEPARATOR_PLAYERS } from '../constants';\nimport { Category } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\nimport { getCharListPosition, getCharListTime, getCharListUsername } from './charList';\nimport { numberRange } from './number';\nimport { isChromeUA, isFirefoxUA, isMobileUA } from './userAgent';\n\nconst formatCpuPlayers = (cpuPlayers: string[]) => {\n  if (!cpuPlayers || cpuPlayers.length === 0) return '';\n\n  return cpuPlayers\n    .filter((s: string) => !!s)\n    .sort()\n    .join(SEPARATOR_PLAYERS);\n};\n\nconst getPlayersPlaceholder = (nbPlayers: number, userAgent: UAParser.IResult) => {\n  if (nbPlayers < 1) return '';\n\n  const isChrome = isChromeUA(userAgent);\n  const isFirefox = isFirefoxUA(userAgent);\n  const isMobile = isMobileUA(userAgent);\n\n  const canBeMultiLine = nbPlayers > 1 && (isChrome || isFirefox) && !isMobile;\n\n  if (!canBeMultiLine) return PLACEHOLDER_PLAYERS[0];\n\n  return PLACEHOLDER_PLAYERS.slice(0, nbPlayers).join('\\n');\n};\n\nconst getPlayers = (players: string) => {\n  if (!players) return [];\n\n  return players.split(SEPARATOR_PLAYERS).filter((s: string) => !!s);\n};\n\nconst isHumanPlayer = (player: string, humanPlayers: string) => {\n  if (!humanPlayers) return false;\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  return humanPlayersSplit.includes(player);\n};\n\nconst getReferencePlayers = (humanPlayers: string, cpuPlayers: string, includeCpuPlayers: boolean) => {\n  if (!humanPlayers) return [];\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  if (!includeCpuPlayers || !cpuPlayers) return humanPlayersSplit;\n\n  const cpuPlayersSplit = getPlayers(cpuPlayers);\n\n  return [...humanPlayersSplit, ...cpuPlayersSplit];\n};\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1_000 + minutes * 60 * 1_000;\n\n  return milliseconds;\n};\n\nconst getOptionsTeams = (nbPlayers: number) => {\n  if ([0, 1, 2].includes(nbPlayers)) return [nbPlayers];\n\n  const teams = uniq([nbPlayers, ...numberRange(2, nbPlayers - 1).sort()]);\n\n  return teams;\n};\n\nconst getPositionString = (position: number) => {\n  if (position < 1) return `${position}`;\n\n  if ([11, 12, 13].includes(position)) return `${position}th`;\n\n  const lastDigit = position % 10;\n\n  if (lastDigit === 1) return `${position}st`;\n  if (lastDigit === 2) return `${position}nd`;\n  if (lastDigit === 3) return `${position}rd`;\n\n  return `${position}th`;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: getCharListPosition(),\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: getCharListUsername(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: getCharListTime(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst getTeamNames = (nbTeams: number) => {\n  if (nbTeams === 0) return [];\n\n  return numberRange(1, nbTeams).map((n: number) => `Team ${n}`);\n};\n\nconst getColorPlayer = (player: string, teams: string[], playerTeams: Record<string, string>) => {\n  const playerTeam = playerTeams[player];\n\n  if (!playerTeam) return 'black';\n\n  const index = teams.indexOf(playerTeam);\n\n  switch (index) {\n    case 0:\n      return 'blue';\n    case 1:\n      return 'red';\n    case 2:\n      return 'green';\n    case 3:\n      return 'orange';\n    case 4:\n      return 'purple';\n    case 5:\n      return 'brown';\n    case 6:\n      return 'grey';\n    default:\n      return 'black';\n  }\n};\n\nexport {\n  convertToMs,\n  formatCpuPlayers,\n  getOptionsTeams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getReferencePlayers,\n  getTeamNames,\n  getColorPlayer,\n  getPositionString,\n  getParams,\n  isHumanPlayer,\n  positionIsValid\n};\n","import { applyRatio } from './number';\nimport { CTR_MAX_PLAYERS, MIME_JPEG, MIME_PNG } from '../constants';\nimport { Category, Coord } from '../types';\nimport { sortAlphanumeric } from './string';\n\nconst getMimeType = (extension: string) => {\n  if (!extension) return MIME_JPEG;\n\n  const isPng = extension.toLowerCase() === 'png';\n\n  return isPng ? MIME_PNG : MIME_JPEG;\n};\n\n// TODO: for All, index is actually the number of players\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const ratioHeight = index / CTR_MAX_PLAYERS;\n    const extract: Coord = {\n      height: applyRatio(ratioHeight, heightCrop),\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst getFilenameWithoutExtension = (filename: string) => {\n  if (!filename) return '';\n\n  const splits = filename.split('.');\n\n  return splits[0];\n};\n\nconst sortImagesByFilename = (images: any[]) => {\n  if (images.length === 0) return [];\n  if (images.length === 1) return images;\n\n  const sortedImages = images.sort((imageA: any, imageB: any) => {\n    const { name: nameA } = imageA;\n    const { name: nameB } = imageB;\n\n    const newNameA = getFilenameWithoutExtension(nameA);\n    const newNameB = getFilenameWithoutExtension(nameB);\n\n    return sortAlphanumeric(newNameA, newNameB);\n  });\n\n  return sortedImages;\n};\n\nexport { getFilenameWithoutExtension, getMimeType, getExtract, sortImagesByFilename };\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category, Progress, Result } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\n\nimport {\n  CANONICAL_URL,\n  CRASH_TEAM_RANKING_AUTHOR_URL,\n  EXAMPLE_IMAGES_FOLDER,\n  EXAMPLE_IMAGES_FOLDER_FULL_EVENT,\n  GUIDE_FOLDER,\n  PROJECT_URL,\n  URL_CPUS,\n  WEBSITE_DEFAULT_LANGUAGE,\n  WEBSITE_TITLE,\n  WEBSITE_VERSION\n} from './constants/general';\nimport { CTR_MAX_PLAYERS, INITIAL_TEAM_NB, MAX_HEIGHT_IMG, MIME_JPEG, MIME_PNG, PLACEHOLDER_CPUS } from './constants';\nimport { cleanString, getCloserString, sortCaseInsensitive } from './utils/string';\nimport {\n  formatCpuPlayers,\n  getColorPlayer,\n  getOptionsTeams,\n  getParams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getPositionString,\n  getReferencePlayers,\n  getTeamNames,\n  isHumanPlayer\n} from './utils';\nimport { numberRange } from './utils/number';\nimport { getExtract, getMimeType, sortImagesByFilename } from './utils/image';\nimport { logError, logTime } from './utils/log';\nimport { validateTeams, validateUsernames } from './utils/validation';\nimport { uniq } from 'lodash';\nimport UAParser from 'ua-parser-js';\n\nconst language = 'eng';\n\nconst App = () => {\n  const renderProgressBar = () => {\n    if (ocrProgress !== Progress.Started) return null;\n\n    return (\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar-value\"></div>\n        <div className=\"progress-bar-text\">{ocrProgressText}</div>\n      </div>\n    );\n  };\n\n  const renderTable = (index: number) => {\n    return (\n      <table className=\"flex-1\">\n        <thead>\n          <tr>\n            <th>Position</th>\n            {includeCpuPlayers && <th>Type</th>}\n            <th>Name</th>\n          </tr>\n        </thead>\n        {renderBody(index)}\n      </table>\n    );\n  };\n\n  const renderCroppedImage = (index: number) => {\n    if (!croppedImages || croppedImages.length <= index) return null;\n\n    const classes = isMobile ? 'img-show max-width-100' : 'img-show max-width-45';\n\n    return <img alt=\"Cropped Results\" className={classes} src={croppedImages[index]} />;\n  };\n\n  const renderImages = () => {\n    if (isMobile) {\n      return imagesURLs.map((imageSrc: string, index: number) => (\n        <img alt=\"tbd\" className=\"img-full max-width-100 block\" key={`${imageSrc}-${index}`} src={imageSrc} />\n      ));\n    }\n\n    return (\n      <div className=\"flex-container center\">\n        {imagesURLs.map((imageSrc: string, index: number) => (\n          <img alt=\"tbd\" className=\"img-full max-width-45 flex-1\" key={`${imageSrc}-${index}`} src={imageSrc} />\n        ))}\n      </div>\n    );\n  };\n\n  const renderBody = (index: number) => {\n    const renderOption = (option: string) => {\n      const label = `${option}`;\n      return (\n        <option key={option} label={label} value={option}>\n          {label}\n        </option>\n      );\n    };\n\n    const renderOptions = () => {\n      const optionsResultsPlayerHuman = getPlayers(players).sort(sortCaseInsensitive);\n      if (!includeCpuPlayers) {\n        return optionsResultsPlayerHuman.map(renderOption);\n      }\n\n      const optionsResultsPlayerCpu = getPlayers(cpuPlayers).sort(sortCaseInsensitive);\n\n      return (\n        <>\n          <optgroup key=\"human\" label=\"Human\">\n            {optionsResultsPlayerHuman.map(renderOption)}\n          </optgroup>\n          <optgroup key=\"cpus\" label=\"CPUs\">\n            {optionsResultsPlayerCpu.map(renderOption)}\n          </optgroup>\n        </>\n      );\n    };\n\n    return (\n      <tbody>\n        {resultsOcr[index].map((resultOcr: Result, indexPlayer: number) => {\n          const { position, username } = resultOcr;\n          const key = `${position}-${username}`;\n\n          return (\n            <tr key={key}>\n              <td>{getPositionString(position)}</td>\n              {includeCpuPlayers && <td>{isHumanPlayer(username, players) ? '👤' : '🤖'}</td>}\n              <td>\n                <select onChange={onChangeResultsPlayer(index, indexPlayer)} value={username}>\n                  {renderOptions()}\n                </select>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderRace = (index: number) => {\n    const labelRace = `Race ${index + 1}`;\n    const validationUsernames = validateUsernames(resultsOcr[index].map((r: Result) => r.username));\n\n    return (\n      <div key={index}>\n        <h3>{labelRace}</h3>\n        {renderCroppedImage(index)}\n        <div className=\"flex-container results\">{renderTable(index)}</div>\n        {!validationUsernames.correct && <div className=\"red\">{validationUsernames.errMsg}</div>}\n      </div>\n    );\n  };\n\n  const renderRaces = () => {\n    if (!resultsOcr || resultsOcr.length === 0) return null;\n\n    return (\n      <>\n        <div className=\"center\">\n          <h2>Results</h2>\n          {resultsOcr.map((_resultOcr: Result[], index: number) => renderRace(index))}\n        </div>\n      </>\n    );\n  };\n\n  const renderFooter = () => {\n    return (\n      <>\n        <div className=\"mt2 text-center\">\n          Developed by{' '}\n          <a href={PROJECT_URL} rel=\"noopener noreferrer\" title=\"GitHub page for repository\" target=\"_blank\">\n            sebranly\n          </a>{' '}\n          (PSN:{' '}\n          <a\n            href={CRASH_TEAM_RANKING_AUTHOR_URL}\n            rel=\"noopener noreferrer\"\n            title=\"Crash Team Ranking for ZouGui28\"\n            target=\"_blank\"\n          >\n            ZouGui28\n          </a>\n          ) with ❤️\n        </div>\n        <div className=\"mt2 text-center\">{`Website version ${WEBSITE_VERSION}`}</div>\n      </>\n    );\n  };\n\n  const renderCpuMainSection = () => {\n    return (\n      <>\n        <h3>CPUs</h3>\n        {renderCpuSection()}\n      </>\n    );\n  };\n\n  const renderTeamMainSection = () => {\n    return (\n      <>\n        <h3>Teams</h3>\n        {renderTeamSection()}\n      </>\n    );\n  };\n\n  const renderStart = () => {\n    const isFFA = nbTeams === nbPlayers;\n\n    if (!includeCpuPlayers && !isFFA && !validationTeams.correct) return null;\n\n    const colorText = ocrProgress === Progress.Done ? 'orange' : 'red';\n    const classesText = `ml block mb bold ${colorText}`;\n    const text =\n      ocrProgress === Progress.Done\n        ? 'Images were analyzed successfully. Please check the results below are correct. Feel free to tweak any mistake below.'\n        : 'Please ensure all the information entered above is correct, as none of it can be edited afterwards.';\n\n    return (\n      <div className=\"text-center mb\">\n        <div className={classesText}>{text}</div>\n        <input\n          className=\"inline-block ml\"\n          type=\"button\"\n          value=\"Get results\"\n          disabled={selectIsDisabled || !imagesURLs || imagesURLs.length === 0}\n          onClick={doOCR}\n        />\n      </div>\n    );\n  };\n\n  const renderImagesUpload = () => {\n    const jpgImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.JPG`;\n    const pngImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.PNG`;\n    const guideImage = `${GUIDE_FOLDER}Images.md`;\n\n    const isFFA = nbTeams === nbPlayers;\n\n    if (!includeCpuPlayers && !isFFA && !validationTeams.correct) return null;\n\n    return (\n      <>\n        <h2>Images</h2>\n        <div className=\"text-center mb\">\n          <div className=\"ml block mb bold\">Screenshots will be ordered alphabetically by name</div>\n          <div className=\"ml block mb\">\n            Select screenshots in JPG/JPEG or PNG format, taken right when Returning to Lobby was around 14 seconds\n          </div>\n          <div className=\"ml block mb\">\n            Examples of valid screenshots:{' '}\n            <a href={jpgImage} rel=\"noopener noreferrer\" title=\"Example of valid JPEG screenshot\" target=\"_blank\">\n              JPG/JPEG\n            </a>{' '}\n            and{' '}\n            <a href={pngImage} rel=\"noopener noreferrer\" title=\"Example of valid PNG screenshot\" target=\"_blank\">\n              PNG\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            You can upload multiple images at once, as in this{' '}\n            <a\n              href={EXAMPLE_IMAGES_FOLDER_FULL_EVENT}\n              rel=\"noopener noreferrer\"\n              title=\"Example of a valid 10-race event\"\n              target=\"_blank\"\n            >\n              10-race example\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            For more information, please refer to the{' '}\n            <a href={guideImage} rel=\"noopener noreferrer\" title=\"Guide about Images\" target=\"_blank\">\n              images guide\n            </a>\n          </div>\n          <input\n            className=\"inline mt\"\n            disabled={selectIsDisabled}\n            type=\"file\"\n            multiple\n            accept={[MIME_JPEG, MIME_PNG].join(', ')}\n            onChange={onChangeImage}\n          />\n        </div>\n      </>\n    );\n  };\n\n  const renderMainSection = () => {\n    if (nbPlayersTyped === 0) return null;\n\n    return (\n      <>\n        {renderCpuMainSection()}\n        {renderTeamMainSection()}\n        {renderImagesUpload()}\n        {renderImages()}\n        {renderStart()}\n        {renderRaces()}\n      </>\n    );\n  };\n\n  const renderTeamSection = () => {\n    if (includeCpuPlayers) return <div className=\"text-center mb\">Teams are not available when CPUs are activated</div>;\n\n    return (\n      <>\n        <select disabled={selectIsDisabled} onChange={onChangeNbTeams} value={nbTeams}>\n          {optionsNbTeams.map((option: number) => {\n            const label = option === nbPlayers ? 'FFA' : `${option} teams`;\n            return (\n              <option key={option} label={label} value={option}>\n                {label}\n              </option>\n            );\n          })}\n        </select>\n        {renderTeamRepartition()}\n      </>\n    );\n  };\n\n  const onChangeTeam = (player: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newPlayerTeams = { ...playerTeams, [player]: value };\n    setPlayerTeams(newPlayerTeams);\n  };\n\n  const renderPlayerTeams = (player: string) => {\n    return teams.map((team: string) => {\n      const key = `${player}-${team}`;\n      const isChecked = playerTeams[player] === team;\n\n      return (\n        <div className=\"ml inline\" key={key}>\n          <input\n            type=\"radio\"\n            disabled={selectIsDisabled}\n            id={key}\n            name={player}\n            value={team}\n            checked={isChecked}\n            onChange={onChangeTeam(player)}\n          />\n          <label htmlFor={key}>{team}</label>\n        </div>\n      );\n    });\n  };\n\n  const renderPlayerTeamRepartition = (player: string) => {\n    const colorPlayer = getColorPlayer(player, teams, playerTeams);\n    const playerClassnames = `inline ${colorPlayer}`;\n\n    return (\n      <li className=\"block\" key={player}>\n        <div className={playerClassnames}>{player}</div>\n        <div className=\"ml mb block text-center\">{renderPlayerTeams(player)}</div>\n      </li>\n    );\n  };\n\n  const renderTeamRepartition = () => {\n    const isFFA = nbTeams === nbPlayers;\n    if (includeCpuPlayers) return null;\n    if (isFFA) return <div className=\"ml block mb\">Free For All means there is no need to set up teams!</div>;\n\n    const classesValidation = validationTeams.isWarning ? 'orange' : 'red';\n\n    return (\n      <>\n        <ul className=\"text-center no-padding mt2\">\n          <div className=\"inline-block\">{playersNames.map(renderPlayerTeamRepartition)}</div>\n          {!validationTeams.correct && <div className={classesValidation}>{validationTeams.errMsg}</div>}\n        </ul>\n      </>\n    );\n  };\n\n  const renderCpuSection = () => {\n    if (!cpuData || Object.keys(cpuData).length === 0) return <div className=\"text-center mb\">{PLACEHOLDER_CPUS}</div>;\n\n    const guideCpu = `${GUIDE_FOLDER}CPUs.md`;\n\n    const optionsCpuLanguages = Object.keys(cpuData);\n    const textCheckbox = shouldIncludeCpuPlayers\n      ? `Automatically activated bots because ${nbPlayersTyped} human player(s) was/were filled out of a total of ${nbPlayers} players`\n      : 'Check this if there were bots during the race';\n\n    return (\n      <>\n        <div className=\"text-center mb\">\n          <input\n            name=\"includeCpuPlayers\"\n            type=\"checkbox\"\n            checked={includeCpuPlayers}\n            onChange={onCpuCheckboxChange}\n            disabled={shouldIncludeCpuPlayers || selectIsDisabled}\n          />\n          <div className=\"ml inline\">{textCheckbox}</div>\n        </div>\n        {includeCpuPlayers && (\n          <>\n            <div className=\"text-center mb\">\n              Bots are automatically determined based on the language and cannot be edited\n            </div>\n            <div className=\"ml block mb\">\n              For more information, please refer to the{' '}\n              <a href={guideCpu} rel=\"noopener noreferrer\" title=\"Guide about CPUs\" target=\"_blank\">\n                CPUs guide\n              </a>\n            </div>\n            <div className=\"inline mr\">Language in images</div>\n            <select disabled={selectIsDisabled} onChange={onChangeCpuLanguage} value={cpuLanguage}>\n              {optionsCpuLanguages.map((option: string) => {\n                const label = `${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n            <textarea\n              className={`textarea-${classPlatform}`}\n              disabled={true}\n              placeholder={PLACEHOLDER_CPUS}\n              rows={CTR_MAX_PLAYERS}\n              value={cpuPlayers}\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n    fetch(URL_CPUS)\n      .then((response) => response.json())\n      .then((data) => {\n        setCpuData(data);\n        setCpuPlayers(formatCpuPlayers((data as any)[WEBSITE_DEFAULT_LANGUAGE]));\n      });\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n\n    setSelectIsDisabled(true);\n    setOcrProgress(Progress.Started);\n    setOcrProgressText('Initialization...');\n    setResultsOcr([]);\n    setCroppedImages([]);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    await workerUsername.load();\n    await workerUsername.loadLanguage(language);\n    await workerUsername.initialize(language);\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    const playerIndexes = numberRange(0, nbPlayers - 1);\n\n    const promisesX = async (\n      playerIndex: number,\n      category: Category,\n      info: any, // TODO: type it better\n      imgTransCopy: any\n    ) => {\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n      const { extension } = info;\n      const mimeType = getMimeType(extension);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: mimeType\n      };\n\n      const buffer: any = await extracted.getBufferAsync(mimeType);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      const bufferFin: any = await extractedFin.getBufferAsync(mimeType);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    let resultsOcrTemp: Result[][] = [];\n    let croppedImagesTemp: string[] = [];\n\n    // TODO: have better error handling\n    for (let i = 0; i < imagesURLs.length; i++) {\n      try {\n        const progressText = `Image ${i + 1} out of ${imagesURLs.length}...`;\n        setOcrProgressText(progressText);\n\n        logTime('imgRead');\n        const imgJimpTemp = await Jimp.read(imagesURLs[i]);\n        logTime('imgRead', true);\n\n        const initialHeight = imgJimpTemp.bitmap.height;\n        const shouldResize = initialHeight > MAX_HEIGHT_IMG;\n\n        if (shouldResize) logTime('imgResize');\n\n        const imgJimp = shouldResize ? imgJimpTemp.resize(Jimp.AUTO, MAX_HEIGHT_IMG) : imgJimpTemp;\n\n        if (shouldResize) logTime('imgResize', true);\n\n        logTime('imgRotate');\n\n        const imgTrans = imgJimp.rotate(-6.2);\n\n        logTime('imgRotate', true);\n\n        logTime('imgRest');\n\n        const h = imgTrans.bitmap.height;\n        const w = imgTrans.bitmap.width;\n        const extension = imgTrans.getExtension();\n        const info = { height: h, extension, width: w };\n        const dimensionsCrop = getExtract(info, nbPlayers, Category.All);\n\n        const imgTransCopy = imgTrans.clone();\n        const extractedCrop = imgTransCopy.crop(\n          dimensionsCrop.left,\n          dimensionsCrop.top,\n          dimensionsCrop.width,\n          dimensionsCrop.height\n        );\n\n        // eslint-disable-next-line no-loop-func\n        extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n          croppedImagesTemp.push(src);\n        });\n\n        const imgTransGray = imgTrans.grayscale();\n\n        logTime('imgRest', true);\n\n        logTime('promisesCreation');\n\n        const promisesNames = playerIndexes.map((playerIndex) =>\n          promisesX(playerIndex, Category.Username, info, imgTransGray.clone())\n        );\n\n        logTime('promisesCreation', true);\n\n        logTime('promisesResolve');\n\n        const results = await Promise.all(promisesNames);\n\n        logTime('promisesResolve', true);\n\n        const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n        const dataResults: Result[] = [];\n        const referencePlayers = getReferencePlayers(players, cpuPlayers, includeCpuPlayers);\n        playerIndexes.forEach((playerIndex) => {\n          const playerGuess = resultsNames[playerIndex];\n          const result: Result = {\n            username: getCloserString(playerGuess, referencePlayers),\n            position: playerIndex + 1\n          };\n\n          dataResults.push(result);\n        });\n\n        resultsOcrTemp.push(dataResults);\n      } catch (err) {\n        // TODO: have better error handling\n        logError(err);\n        // setSelectIsDisabled(false);\n      }\n    }\n\n    setResultsOcr(resultsOcrTemp);\n    setCroppedImages(croppedImagesTemp);\n    setOcrProgress(Progress.Done);\n    setOcrProgressText('');\n    // setSelectIsDisabled(false);\n\n    await schedulerUsername.terminate();\n  };\n\n  const { width, height } = useWindowSize();\n  const [ocrProgress, setOcrProgress] = React.useState(Progress.NotStarted);\n  const [ocrProgressText, setOcrProgressText] = React.useState('');\n  const [images, setImages] = React.useState<any[]>([]);\n  const [imagesURLs, setImagesURLs] = React.useState<any[]>([]);\n  const [croppedImages, setCroppedImages] = React.useState<any[]>([]);\n  const [nbPlayers, setNbPlayers] = React.useState(CTR_MAX_PLAYERS);\n  const [cpuLanguage, setCpuLanguage] = React.useState(WEBSITE_DEFAULT_LANGUAGE);\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [resultsOcr, setResultsOcr] = React.useState<Result[][]>([]);\n  const [players, setPlayers] = React.useState<string>('');\n  const [cpuPlayers, setCpuPlayers] = React.useState<string>(PLACEHOLDER_CPUS);\n  const [cpuData, setCpuData] = React.useState<any>({});\n  const [includeCpuPlayers, setIncludeCpuPlayers] = React.useState(false);\n  const [teams, setTeams] = React.useState<string[]>(getTeamNames(INITIAL_TEAM_NB));\n  const [nbTeams, setNbTeams] = React.useState(INITIAL_TEAM_NB);\n  const [playerTeams, setPlayerTeams] = React.useState<Record<string, string>>({});\n\n  const nbPlayersTyped = uniq(getPlayers(players)).length;\n  const shouldIncludeCpuPlayers = nbPlayersTyped < nbPlayers;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  React.useEffect(() => {\n    if (images.length < 1) return;\n    const newImageUrls: any[] = [];\n    const sortImages = sortImagesByFilename(images);\n    sortImages.forEach((image) => {\n      newImageUrls.push(URL.createObjectURL(image));\n    });\n    setImagesURLs(newImageUrls);\n  }, [images]);\n\n  React.useEffect(() => {\n    if (shouldIncludeCpuPlayers && !includeCpuPlayers) {\n      setIncludeCpuPlayers(true);\n    }\n  }, [shouldIncludeCpuPlayers, includeCpuPlayers]);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n\n    setNbTeams(INITIAL_TEAM_NB);\n    setTeams(getTeamNames(INITIAL_TEAM_NB));\n    setPlayerTeams({});\n  };\n\n  const onChangeImage = (e: any) => {\n    setImages([...e.target.files]);\n    setResultsOcr([]);\n  };\n\n  const onChangeNbPlayers = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNbPlayers(Number(e.target.value));\n\n    setPlayers('');\n\n    setNbTeams(INITIAL_TEAM_NB);\n    setTeams(getTeamNames(INITIAL_TEAM_NB));\n    setPlayerTeams({});\n  };\n\n  const onChangeNbTeams = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newNbTeams = Number(e.target.value);\n    const teamNames = getTeamNames(newNbTeams);\n\n    setNbTeams(newNbTeams);\n    setTeams(teamNames);\n    setPlayerTeams({});\n  };\n\n  const onChangeCpuLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCpuLanguage(e.target.value);\n    setCpuPlayers(formatCpuPlayers(cpuData[e.target.value]));\n  };\n\n  const onChangeResultsPlayer =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].username = e.target.value;\n      setResultsOcr(copy);\n    };\n\n  const onCpuCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIncludeCpuPlayers(e.target.checked);\n  };\n\n  const optionsNbPlayers = numberRange(2, CTR_MAX_PLAYERS);\n  const optionsNbTeams = getOptionsTeams(nbPlayers);\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n  const classBgDisabled = selectIsDisabled && (!resultsOcr || resultsOcr.length === 0) ? 'bg-grey' : 'bg-white';\n  const playersNames = uniq(getPlayers(players)).sort(sortCaseInsensitive);\n  const validationTeams = validateTeams(playersNames, teams, playerTeams);\n  const userAgent = navigator?.userAgent ?? '';\n  const userAgentResult = new UAParser(userAgent).getResult();\n  const placeholderPlayers = getPlayersPlaceholder(nbPlayers, userAgentResult);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{WEBSITE_TITLE}</title>\n        <link rel=\"canonical\" href={CANONICAL_URL} />\n      </Helmet>\n      <div className=\"main\">\n        <h1>{WEBSITE_TITLE}</h1>\n        <div className=\"w3-light-grey\"></div>\n        {ocrProgress === Progress.Done && (\n          <Confetti width={width} height={height} numberOfPieces={800} recycle={false} />\n        )}\n        <div className={`center main-content-${classPlatform} ${classBgDisabled}`}>\n          {renderProgressBar()}\n          <h2>Introduction</h2>\n          <div className=\"text-center mb\">Please enter information from top to bottom for a smooth experience</div>\n          <div className=\"text-center mb\">At the end, we'll produce the Lorenzi markdown for you</div>\n          <h2>Players</h2>\n          <h3>Number of players</h3>\n          <div className=\"text-center mb\">This includes CPUs if any</div>\n          <select disabled={selectIsDisabled} onChange={onChangeNbPlayers} value={nbPlayers}>\n            {optionsNbPlayers.map((option: number) => {\n              const label = `${option} players`;\n              return (\n                <option key={option} label={label} value={option}>\n                  {label}\n                </option>\n              );\n            })}\n          </select>\n          <h3>Human Players</h3>\n          <div className=\"text-center mb\">Type all human players present in the races. Type one username per line.</div>\n          <textarea\n            className={`textarea-${classPlatform}`}\n            disabled={selectIsDisabled}\n            placeholder={placeholderPlayers}\n            rows={nbPlayers}\n            value={players}\n            onChange={onPlayersChange}\n          />\n          {renderMainSection()}\n        </div>\n        {renderFooter()}\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","import { uniq } from 'lodash';\nimport { convertToMs } from './index';\nimport { CTR_MAX_TIME_DIFF_SEC, TIME_DNF } from '../constants';\nimport { Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\n\nconst validateTeams = (players: string[], teams: string[], playerTeams: Record<string, string>) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const missingTeamForPlayers: string[] = [];\n  const incorrectTeamForPlayers: string[] = [];\n  const seenTeams: string[] = [];\n\n  players.forEach((player: string) => {\n    const team = playerTeams[player];\n    if (!team) {\n      missingTeamForPlayers.push(player);\n    }\n\n    if (!teams.includes(team)) {\n      incorrectTeamForPlayers.push(player);\n    }\n\n    if (teams.includes(team)) {\n      seenTeams.push(team);\n    }\n  });\n\n  if (missingTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have no assigned team: ${missingTeamForPlayers.join(', ')}`;\n    validation.isWarning = true;\n\n    return validation;\n  }\n\n  if (incorrectTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have an invalid team: ${incorrectTeamForPlayers.join(', ')}`;\n\n    return validation;\n  }\n\n  if (uniq(seenTeams).length === 1) {\n    validation.errMsg = 'You cannot have all players under the same team';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (finishedTimesMs.toString() !== sortedTimesMs.toString()) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1_000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nexport { validateTeams, validateTimes, validateUsernames };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}