{"version":3,"sources":["types.ts","utils/index.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","getCloserString","str","list","listSafe","filter","s","min","Infinity","name","forEach","lev","levenshtein","get","getExtract","info","index","category","width","height","left","applyRatio","top","widthCrop","heightCrop","All","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","Position","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","Time","leftExt","widthExt","numberRange","max","numbers","i","push","getParams","Username","tessedit_char_whitelist","CHARLIST_POSITION","tessedit_pageseg_mode","PSM_SINGLE_CHAR","CHARLIST_USERNAME","PSM_SINGLE_LINE","CHARLIST_TIME","ratio","nb","Math","floor","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","String","fromCharCode","CHARLIST_UPPERCASE_LETTERS","join","CHARLIST_LOWERCASE_LETTERS","CHARLIST_LETTERS","CHARLIST_DIGITS","App","renderDot","classColorSuffix","step","classColor","classes","key","className","renderBody","resultsOcr","map","rawLine","position","username","time","onMount","a","setOnMountOver","setSelectIsDisabled","doOCR","onMountOver","setStep","setResultsOcr","undefined","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","div","document","getElementsByClassName","innerHTML","setOcr","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","CTR_MAX_PLAYERS","promisesX","playerIndex","imgTrans","imgTransCopy","clone","scheduler","dimensions","extracted","crop","options","count","type","getBufferAsync","buffer","getColors","then","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","pathInput","imgIndex","Jimp","read","imgJimp","rotate","grayscale","w","bitmap","h","dimensionsCrop","getBase64","err","src","img","createElement","setAttribute","appendChild","promisesNames","Promise","all","results","resultsNames","r","data","text","replace","referencePlayers","players","split","playerGuess","d","terminate","toString","useWindowSize","React","ocr","selectIsDisabled","setImgIndex","setPlayers","classPlatform","isMobile","rel","href","numberOfPieces","recycle","rows","value","onChange","e","currentTarget","disabled","Number","target","option","label","id","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.328e6d35.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n","import levenshtein from 'fast-levenshtein';\nimport {\n  CHARLIST_POSITION,\n  CHARLIST_TIME,\n  CHARLIST_USERNAME,\n  CTR_MAX_TIME_DIFF_SEC,\n  PSM_SINGLE_CHAR,\n  PSM_SINGLE_LINE,\n  TIME_DNF\n} from '../constants';\nimport { Category, Coord, Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\n\nconst cleanString = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1000 + minutes * 60 * 1000;\n\n  return milliseconds;\n};\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const extract: Coord = {\n      height: heightCrop,\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: CHARLIST_POSITION,\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: CHARLIST_USERNAME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: CHARLIST_TIME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (finishedTimesMs.toString() !== sortedTimesMs.toString()) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nexport {\n  applyRatio,\n  charRange,\n  cleanString,\n  convertToMs,\n  getCloserString,\n  getExtract,\n  getParams,\n  numberRange,\n  positionIsValid,\n  validateTimes,\n  validateUsernames\n};\n","import { charRange, numberRange } from './utils';\n\n// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// TODO: verify behavior in offline races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\n\nexport const CHARLIST_UPPERCASE_LETTERS = charRange('A', 'Z').join('');\nexport const CHARLIST_LOWERCASE_LETTERS = charRange('a', 'z').join('');\nexport const CHARLIST_LETTERS = `${CHARLIST_LOWERCASE_LETTERS}${CHARLIST_UPPERCASE_LETTERS}`;\nexport const CHARLIST_DIGITS = numberRange(0, 9).join('');\nexport const CHARLIST_POSITION = numberRange(1, CTR_MAX_PLAYERS).join('');\nexport const CHARLIST_TIME = `${CHARLIST_DIGITS}:-`;\nexport const CHARLIST_USERNAME = `${CHARLIST_LETTERS}${CHARLIST_DIGITS}:-_. `;\nexport const MIME_JPEG = 'image/jpeg';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const TIME_DNF = '--:--:--';\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\n\nimport { CTR_MAX_PLAYERS, MIME_JPEG, SEPARATOR_PLAYERS } from './constants';\nimport { cleanString, getCloserString, getExtract, getParams, numberRange } from './utils';\n\nconst language = 'eng';\n\nconst App = () => {\n  const renderDots = () => {\n    return <div className=\"dots\">{numberRange(1, 4).map(renderDot)}</div>;\n  };\n\n  const renderDot = (index: number) => {\n    const classColorPrefix = index === 4 ? 'green' : 'red';\n    const classColorSuffix = index > step ? '-off' : '';\n    const classColor = `${classColorPrefix}${classColorSuffix}`;\n    const classes = `dot ${classColor}`;\n    return <span key={index} className={classes}></span>;\n  };\n\n  const renderTable = () => {\n    if (!resultsOcr) return null;\n\n    return (\n      <table className=\"flex-1\">\n        <thead>\n          <tr>\n            <th>Position</th>\n            <th>Name</th>\n          </tr>\n        </thead>\n        {renderBody()}\n      </table>\n    );\n  };\n\n  const renderBody = () => {\n    if (!resultsOcr) return null;\n\n    return (\n      <tbody>\n        {(resultsOcr as any).map((rawLine: any) => {\n          const { position, username, time } = rawLine;\n          const key = `${position}-${username}-${time}`;\n\n          return (\n            <tr key={key}>\n              <td>{position}</td>\n              <td>{username}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n    setSelectIsDisabled(true);\n    setStep(0);\n    setResultsOcr(undefined);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    const div = document.getElementsByClassName('img-show')[0];\n    if (div) div.innerHTML = '';\n\n    setStep(1);\n\n    setOcr('Loading engine (1/4)');\n    await workerUsername.load();\n\n    setOcr('Loading language (2/4)');\n    await workerUsername.loadLanguage(language);\n\n    setOcr('Initializing engine (3/4)');\n    await workerUsername.initialize(language);\n\n    setOcr('Setting parameter (4/4)');\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    const playerIndexes = numberRange(0, CTR_MAX_PLAYERS - 1);\n\n    const promisesX = async (playerIndex: number, category: Category, info: any, imgTrans: any) => {\n      const imgTransCopy = imgTrans.clone();\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: MIME_JPEG\n      };\n\n      const buffer: any = await extracted.getBufferAsync(MIME_JPEG);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      // TODO: activate for debugging only\n      // extractedFin.getBase64(MIME_JPEG, (err: any, src: string) => {\n      //   var img = document.createElement('img');\n      //   img.setAttribute('src', src);\n      //   const div = document.getElementsByClassName('img-show')[0];\n      //   if (div) div.appendChild(img);\n      // });\n\n      const bufferFin: any = await extractedFin.getBufferAsync(MIME_JPEG);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    const pathInput = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n    setStep(2);\n    setOcr('Reading the image');\n    let imgTrans: any;\n    try {\n      const imgJimp = await Jimp.read(pathInput);\n\n      setOcr('Generating cropped image');\n      imgTrans = imgJimp.rotate(-6.2).grayscale();\n\n      const w = imgTrans.bitmap.width;\n      const h = imgTrans.bitmap.height;\n      const info = { width: w, height: h };\n      const dimensionsCrop = getExtract(info, 0, Category.All);\n\n      const imgTransCopy = imgTrans.clone();\n      const extractedCrop = imgTransCopy.crop(\n        dimensionsCrop.left,\n        dimensionsCrop.top,\n        dimensionsCrop.width,\n        dimensionsCrop.height\n      );\n\n      extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementsByClassName('img-show')[0];\n        if (div) div.appendChild(img);\n      });\n\n      const promisesNames = playerIndexes.map((playerIndex) =>\n        promisesX(playerIndex, Category.Username, info, imgTrans)\n      );\n\n      setOcr('Starting text recognition');\n      setStep(3);\n      const results = await Promise.all(promisesNames);\n      const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n      const data: any = [];\n      const referencePlayers = players.split(SEPARATOR_PLAYERS);\n      playerIndexes.forEach((playerIndex) => {\n        const playerGuess = resultsNames[playerIndex];\n        const d = {\n          username: getCloserString(playerGuess, referencePlayers),\n          position: playerIndex + 1\n        };\n\n        data.push(d as any);\n      });\n\n      setResultsOcr(data);\n\n      setOcr('Recognition is done and successful');\n      setStep(4);\n      setSelectIsDisabled(false);\n\n      await schedulerUsername.terminate();\n    } catch (err) {\n      setOcr(`Unable to open image ${(err as any).toString()}. Please restart.`);\n      setSelectIsDisabled(false);\n    }\n  };\n\n  const { width, height } = useWindowSize();\n  const [step, setStep] = React.useState(0);\n  const [ocr, setOcr] = React.useState('');\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [imgIndex, setImgIndex] = React.useState(1);\n  const [resultsOcr, setResultsOcr] = React.useState(undefined);\n  const [players, setPlayers] = React.useState<string>('');\n\n  React.useEffect(() => {\n    doOCR();\n  }, [imgIndex]);\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setImgIndex(Number(e.target.value));\n  };\n\n  const src = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n  const options = [...numberRange(1, 5), ...numberRange(11, 20)];\n\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Crash Team Racing: OCR</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/ctr-ocr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">Crash Team Racing: OCR</h1>\n        {step === 4 && <Confetti width={width} height={height} numberOfPieces={400} recycle={false} />}\n        <div className={`main-content-${classPlatform}`}>\n          {renderDots()}\n          <div className=\"ocr\">{ocr}</div>\n          <h2>Players</h2>\n          <h3>One player per line</h3>\n          <textarea\n            className={`textarea-${classPlatform}`}\n            rows={CTR_MAX_PLAYERS}\n            value={players}\n            onChange={onPlayersChange}\n          />\n          <div className=\"flex-container results\">{renderTable()}</div>\n          <h2>Image</h2>\n          <div className=\"img-show\"></div>\n          <div className=\"center\">\n            <select disabled={selectIsDisabled} onChange={onChange}>\n              {options.map((option: number) => {\n                const label = `Image ${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n          <img id=\"img-full\" alt={`Example ${imgIndex}`} src={src} />\n        </div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}