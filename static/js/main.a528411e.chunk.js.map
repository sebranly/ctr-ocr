{"version":3,"sources":["types.ts","constants/general.ts","constants/index.ts","utils/string.ts","utils/number.ts","utils/charList.ts","utils/userAgent.ts","utils/index.ts","utils/image.ts","utils/array.ts","utils/validation.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","Progress","AUTHOR_GITHUB","PROJECT_URL","GUIDE_FOLDER","URL_CPUS","EXAMPLE_IMAGES_FOLDER","EXAMPLE_IMAGES_FOLDER_FULL_EVENT","CANONICAL_URL","MIME_JPEG","MIME_PNG","FFA_POINTS_SCHEME","WAR_POINTS_SCHEME","PLACEHOLDER_PLAYERS","getCloserString","str","list","listSafe","filter","s","min","Infinity","name","forEach","lev","levenshtein","get","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","i","push","String","fromCharCode","sortCaseInsensitive","a","b","lowerA","toLowerCase","lowerB","numberRange","max","numbers","applyRatio","ratio","nb","Math","floor","getCharListDigits","join","getCharListUsername","charListUppercaseLetters","charListLowercaseLetters","charListLetters","isKeywordUA","userAgent","keyword","browser","includes","formatCpuPlayers","cpuPlayers","length","sort","getPlayersPlaceholder","nbPlayers","isChrome","isChromeUA","isFirefox","isFirefoxUA","isMobile","type","device","isMobileUA","slice","getPlayers","players","split","getReferencePlayers","humanPlayers","includeCpuPlayers","humanPlayersSplit","cpuPlayersSplit","getPositionString","position","lastDigit","getParams","category","Position","Time","Username","tessedit_char_whitelist","tessedit_pageseg_mode","getTeamNames","nbTeams","map","n","getMimeType","extension","getExtract","info","index","width","height","left","top","widthCrop","heightCrop","All","ratioHeight","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","leftExt","widthExt","getFilenameWithoutExtension","filename","sortImagesByFilename","images","imageA","imageB","nameA","nameB","strA","strB","regexAlpha","regexNumeric","newA","replace","newB","aN","parseInt","bN","sortAlphanumeric","isEqual","a1","a2","every","v","validatePoints","points","validation","correct","errMsg","sortedPoints","App","renderBodyPointsScheme","slicedPointsScheme","pointsScheme","_points","indexPoints","key","className","value","disabled","selectIsDisabled","onChange","onChangePointsScheme","renderBody","renderOption","option","indexOption","label","classesSelectPlayer","resultsOcr","resultOcr","indexPlayer","player","username","onChangeResultsPlayer","optionsResultsPlayerHuman","optionsResultsPlayerCpu","renderOptions","onChangeResultsPoints","renderRace","labelRace","validationUsernames","usernames","some","uniq","validateUsernames","r","validationPoints","croppedImages","classes","alt","src","renderCroppedImage","renderTable","renderPointsSchemeSection","renderTablePointsScheme","renderTeamSection","onChangeNbTeams","optionsNbTeams","renderTeamRepartition","onChangeTeam","e","currentTarget","newPlayerTeams","playerTeams","setPlayerTeams","renderPlayerTeamRepartition","colorPlayer","teams","playerTeam","indexOf","getColorPlayer","playerClassnames","team","isChecked","id","checked","htmlFor","renderPlayerTeams","isFFA","classesValidation","validationTeams","isWarning","playersNames","renderCpuSection","cpuData","Object","keys","guideCpu","optionsCpuLanguages","textCheckbox","shouldIncludeCpuPlayers","nbPlayersTyped","onCpuCheckboxChange","href","rel","title","target","onChangeCpuLanguage","cpuLanguage","classPlatform","placeholder","rows","onMount","setOnMountOver","setSelectIsDisabled","fetch","then","response","json","data","setCpuData","setCpuPlayers","doOCR","onMountOver","setOcrProgress","Started","setOcrProgressText","setResultsOcr","setCroppedImages","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","promisesX","playerIndex","imgTransCopy","scheduler","dimensions","mimeType","extracted","crop","options","count","getBufferAsync","buffer","getColors","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","resultsOcrTemp","croppedImagesTemp","imagesURLs","progressText","Jimp","read","imgJimpTemp","initialHeight","bitmap","imgJimp","resize","AUTO","imgTrans","rotate","h","w","getExtension","dimensionsCrop","clone","getBase64","err","imgTransGray","grayscale","promisesNames","Promise","all","results","resultsNames","text","replaceAll","dataResults","referencePlayers","playerGuess","Done","terminate","useWindowSize","React","NotStarted","ocrProgress","ocrProgressText","setImages","setImagesURLs","setNbPlayers","setCpuLanguage","setPlayers","setPointsScheme","copiedPlayers","setCopiedPlayers","setIncludeCpuPlayers","setTeams","setNbTeams","newImageUrls","image","URL","createObjectURL","onChangeImage","files","newNbTeams","Number","teamNames","indexPointsScheme","copy","indexResultOcr","newVal","optionsNbPlayers","getOptionsTeams","classBgDisabled","missingTeamForPlayers","incorrectTeamForPlayers","seenTeams","validateTeams","validationPointsScheme","navigator","userAgentResult","UAParser","getResult","placeholderPlayers","issueOnTeams","issueOnPointsScheme","numberOfPieces","recycle","message","onCopy","isFFASetup","isWarSetup","onClick","renderPointsSchemeMainSection","jpgImage","pngImage","guideImage","multiple","accept","renderImagesUpload","imageSrc","colorText","classesText","renderStart","_resultOcr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a528411e.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport enum Progress {\n  NotStarted = 'not_started',\n  Started = 'started',\n  Done = 'done'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n  isWarning?: boolean;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n\nexport type Result = {\n  username: string;\n  position: number;\n  points: number;\n};\n","export const WEBSITE_LANGUAGE = 'en';\nexport const AUTHOR_NAME = 'sebranly';\nexport const AUTHOR_GITHUB = `https://${AUTHOR_NAME}.github.io`;\nexport const PROJECT_NAME = 'ctr-ocr';\nexport const JSON_FOLDER = 'ctr-ocr';\nexport const PROJECT_URL = `https://github.com/${AUTHOR_NAME}/${PROJECT_NAME}`;\nexport const CRASH_TEAM_RANKING_AUTHOR_URL = 'https://crashteamranking.com/members/siblingbling/tt/';\nexport const GUIDE_FOLDER = `${PROJECT_URL}/blob/main/doc/guide/${WEBSITE_LANGUAGE}/`;\nexport const LOG_CONSOLE = false;\nexport const WEBSITE_TITLE = 'Crash Team Results';\nexport const WEBSITE_VERSION = '1.0.6';\nexport const WEBSITE_DEFAULT_LANGUAGE = 'en';\nexport const URL_CPUS = `${AUTHOR_GITHUB}/json/${JSON_FOLDER}/players.json`;\nexport const EXAMPLE_IMAGES_FOLDER = `https://raw.githubusercontent.com/${AUTHOR_NAME}/${PROJECT_NAME}/main/src/img/examples/`;\nexport const EXAMPLE_IMAGES_FOLDER_FULL_EVENT = `${PROJECT_URL}/tree/main/src/img/examples/full-event/`;\nexport const CANONICAL_URL = `${AUTHOR_GITHUB}/${PROJECT_NAME}`;\n","// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// The following is applicable to online races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\nexport const MAX_HEIGHT_IMG = 1_000;\nexport const MIME_JPEG = 'image/jpeg';\nexport const MIME_PNG = 'image/png';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const TIME_DNF = '--:--:--';\nexport const PLACEHOLDER_CPUS = 'Loading CPUs...';\n// There will always be a possibility for 2 teams\nexport const INITIAL_TEAM_NB = 2;\nexport const FFA_POINTS_SCHEME = [10, 8, 7, 5, 4, 3, 2, 1];\nexport const WAR_POINTS_SCHEME = [10, 8, 6, 5, 4, 3, 2, 1];\nexport const PLACEHOLDER_PLAYERS = [\n  'ZouGui28',\n  'Nefarious_CTR',\n  'Kyo-Bomba',\n  'WadaDim-PatroL',\n  'Hyène_JurassX',\n  'Alexiz',\n  'Colonel_Hay',\n  'TATANE'\n];\n","import levenshtein from 'fast-levenshtein';\n\nconst cleanString = (str: string) => str.replaceAll('\\n', '').replaceAll(' ', '');\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst sortAlphanumeric = (strA: string, strB: string) => {\n  const regexAlpha = /[^a-zA-Z]/g;\n  const regexNumeric = /[^0-9]/g;\n\n  var newA = strA.replace(regexAlpha, '');\n  var newB = strB.replace(regexAlpha, '');\n\n  if (newA === newB) {\n    var aN = parseInt(strA.replace(regexNumeric, ''), 10);\n    var bN = parseInt(strB.replace(regexNumeric, ''), 10);\n    return aN === bN ? 0 : aN > bN ? 1 : -1;\n  }\n\n  return newA > newB ? 1 : -1;\n};\n\nconst sortCaseInsensitive = (a: string, b: string) => {\n  if (!a || !b) return 1;\n  const lowerA = a.toLowerCase();\n  const lowerB = b.toLowerCase();\n\n  if (lowerA === lowerB) return 0;\n\n  return lowerA > lowerB ? 1 : -1;\n};\n\nexport { charRange, cleanString, getCloserString, sortAlphanumeric, sortCaseInsensitive };\n","const numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nexport { applyRatio, numberRange };\n","import { CTR_MAX_PLAYERS } from '../constants';\nimport { numberRange } from './number';\nimport { charRange } from './string';\n\nconst getCharListPosition = () => numberRange(1, CTR_MAX_PLAYERS).join('');\nconst getCharListDigits = () => numberRange(0, 9).join('');\nconst getCharListTime = () => `${getCharListDigits()}:-`;\n\nconst getCharListUsername = () => {\n  const charListUppercaseLetters = charRange('A', 'Z').join('');\n  const charListLowercaseLetters = charRange('a', 'z').join('');\n  const charListLetters = `${charListLowercaseLetters}${charListUppercaseLetters}`;\n\n  return `${charListLetters}${getCharListDigits()}:-_. `;\n};\n\nexport { getCharListPosition, getCharListDigits, getCharListTime, getCharListUsername };\n","import UAParser from 'ua-parser-js';\n\nconst isMobileUA = (userAgent: UAParser.IResult) => {\n  const type = userAgent.device?.type ?? '';\n\n  return ['mobile', 'tablet'].includes(type);\n};\n\nconst isKeywordUA = (userAgent: UAParser.IResult, keyword: string) => {\n  const name = userAgent.browser?.name ?? '';\n\n  return name.includes(keyword);\n};\n\nconst isChromeUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Chrome');\nconst isFirefoxUA = (userAgent: UAParser.IResult) => isKeywordUA(userAgent, 'Firefox');\n\nexport { isMobileUA, isChromeUA, isFirefoxUA };\n","import { PLACEHOLDER_PLAYERS, PSM_SINGLE_CHAR, PSM_SINGLE_LINE, SEPARATOR_PLAYERS } from '../constants';\nimport { Category } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\nimport { getCharListPosition, getCharListTime, getCharListUsername } from './charList';\nimport { numberRange } from './number';\nimport { isChromeUA, isFirefoxUA, isMobileUA } from './userAgent';\n\nconst formatCpuPlayers = (cpuPlayers: string[]) => {\n  if (!cpuPlayers || cpuPlayers.length === 0) return '';\n\n  return cpuPlayers\n    .filter((s: string) => !!s)\n    .sort()\n    .join(SEPARATOR_PLAYERS);\n};\n\nconst getPlayersPlaceholder = (nbPlayers: number, userAgent: UAParser.IResult) => {\n  if (nbPlayers < 1) return '';\n\n  const isChrome = isChromeUA(userAgent);\n  const isFirefox = isFirefoxUA(userAgent);\n  const isMobile = isMobileUA(userAgent);\n\n  const canBeMultiLine = nbPlayers > 1 && (isChrome || isFirefox) && !isMobile;\n\n  if (!canBeMultiLine) return PLACEHOLDER_PLAYERS[0];\n\n  return PLACEHOLDER_PLAYERS.slice(0, nbPlayers).join('\\n');\n};\n\nconst getPlayers = (players: string) => {\n  if (!players) return [];\n\n  return players.split(SEPARATOR_PLAYERS).filter((s: string) => !!s);\n};\n\nconst isHumanPlayer = (player: string, humanPlayers: string) => {\n  if (!humanPlayers) return false;\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  return humanPlayersSplit.includes(player);\n};\n\nconst getReferencePlayers = (humanPlayers: string, cpuPlayers: string, includeCpuPlayers: boolean) => {\n  if (!humanPlayers) return [];\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  if (!includeCpuPlayers || !cpuPlayers) return humanPlayersSplit;\n\n  const cpuPlayersSplit = getPlayers(cpuPlayers);\n\n  return [...humanPlayersSplit, ...cpuPlayersSplit];\n};\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1_000 + minutes * 60 * 1_000;\n\n  return milliseconds;\n};\n\nconst getOptionsTeams = (nbPlayers: number) => {\n  if ([0, 1, 2].includes(nbPlayers)) return [nbPlayers];\n\n  const teams = uniq([nbPlayers, ...numberRange(2, nbPlayers - 1).sort()]);\n\n  return teams;\n};\n\nconst getPositionString = (position: number) => {\n  if (position < 1) return `${position}`;\n\n  if ([11, 12, 13].includes(position)) return `${position}th`;\n\n  const lastDigit = position % 10;\n\n  if (lastDigit === 1) return `${position}st`;\n  if (lastDigit === 2) return `${position}nd`;\n  if (lastDigit === 3) return `${position}rd`;\n\n  return `${position}th`;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: getCharListPosition(),\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: getCharListUsername(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: getCharListTime(),\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst getTeamNames = (nbTeams: number) => {\n  if (nbTeams === 0) return [];\n\n  return numberRange(1, nbTeams).map((n: number) => `Team ${n}`);\n};\n\nconst getColorPlayer = (player: string, teams: string[], playerTeams: Record<string, string>) => {\n  const playerTeam = playerTeams[player];\n\n  if (!playerTeam) return 'black';\n\n  const index = teams.indexOf(playerTeam);\n\n  switch (index) {\n    case 0:\n      return 'blue';\n    case 1:\n      return 'red';\n    case 2:\n      return 'green';\n    case 3:\n      return 'orange';\n    case 4:\n      return 'purple';\n    case 5:\n      return 'brown';\n    case 6:\n      return 'grey';\n    default:\n      return 'black';\n  }\n};\n\nexport {\n  convertToMs,\n  formatCpuPlayers,\n  getOptionsTeams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getReferencePlayers,\n  getTeamNames,\n  getColorPlayer,\n  getPositionString,\n  getParams,\n  isHumanPlayer,\n  positionIsValid\n};\n","import { applyRatio } from './number';\nimport { CTR_MAX_PLAYERS, MIME_JPEG, MIME_PNG } from '../constants';\nimport { Category, Coord } from '../types';\nimport { sortAlphanumeric } from './string';\n\nconst getMimeType = (extension: string) => {\n  if (!extension) return MIME_JPEG;\n\n  const isPng = extension.toLowerCase() === 'png';\n\n  return isPng ? MIME_PNG : MIME_JPEG;\n};\n\n// TODO: for All, index is actually the number of players\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const ratioHeight = index / CTR_MAX_PLAYERS;\n    const extract: Coord = {\n      height: applyRatio(ratioHeight, heightCrop),\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst getFilenameWithoutExtension = (filename: string) => {\n  if (!filename) return '';\n\n  const splits = filename.split('.');\n\n  return splits[0];\n};\n\nconst sortImagesByFilename = (images: any[]) => {\n  if (images.length === 0) return [];\n  if (images.length === 1) return images;\n\n  const sortedImages = images.sort((imageA: any, imageB: any) => {\n    const { name: nameA } = imageA;\n    const { name: nameB } = imageB;\n\n    const newNameA = getFilenameWithoutExtension(nameA);\n    const newNameB = getFilenameWithoutExtension(nameB);\n\n    return sortAlphanumeric(newNameA, newNameB);\n  });\n\n  return sortedImages;\n};\n\nexport { getFilenameWithoutExtension, getMimeType, getExtract, sortImagesByFilename };\n","const isEqual = (a1: (number | string)[], a2: (number | string)[]) => {\n  if (a1.length !== a2.length) return false;\n  return a1.every((v, i) => v === a2[i]);\n};\n\nexport { isEqual };\n","import { uniq } from 'lodash';\nimport { convertToMs } from './index';\nimport { CTR_MAX_TIME_DIFF_SEC, TIME_DNF } from '../constants';\nimport { Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { isEqual } from './array';\n\nconst validatePoints = (points: number[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const copyPoints = [...points];\n\n  const sortedPoints = copyPoints.sort((a: number, b: number) => {\n    return b - a;\n  });\n\n  if (isEqual(sortedPoints, points)) {\n    validation.correct = true;\n\n    return validation;\n  }\n\n  validation.errMsg = 'From best to worst player, points should be decreasing (equal values are permitted)';\n\n  return validation;\n};\n\nconst validateTeams = (players: string[], teams: string[], playerTeams: Record<string, string>) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const missingTeamForPlayers: string[] = [];\n  const incorrectTeamForPlayers: string[] = [];\n  const seenTeams: string[] = [];\n\n  players.forEach((player: string) => {\n    const team = playerTeams[player];\n    if (!team) {\n      missingTeamForPlayers.push(player);\n    }\n\n    if (!teams.includes(team)) {\n      incorrectTeamForPlayers.push(player);\n    }\n\n    if (teams.includes(team)) {\n      seenTeams.push(team);\n    }\n  });\n\n  if (missingTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have no assigned team: ${missingTeamForPlayers.join(', ')}`;\n    validation.isWarning = true;\n\n    return validation;\n  }\n\n  if (incorrectTeamForPlayers.length > 0) {\n    validation.errMsg = `The following players have an invalid team: ${incorrectTeamForPlayers.join(', ')}`;\n\n    return validation;\n  }\n\n  if (uniq(seenTeams).length === 1) {\n    validation.errMsg = 'You cannot have all players under the same team';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (!isEqual(finishedTimesMs, sortedTimesMs)) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1_000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nexport { validatePoints, validateTeams, validateTimes, validateUsernames };\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category, Progress, Result } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  CANONICAL_URL,\n  CRASH_TEAM_RANKING_AUTHOR_URL,\n  EXAMPLE_IMAGES_FOLDER,\n  EXAMPLE_IMAGES_FOLDER_FULL_EVENT,\n  GUIDE_FOLDER,\n  PROJECT_URL,\n  URL_CPUS,\n  WEBSITE_DEFAULT_LANGUAGE,\n  WEBSITE_TITLE,\n  WEBSITE_VERSION\n} from './constants/general';\nimport {\n  CTR_MAX_PLAYERS,\n  FFA_POINTS_SCHEME,\n  INITIAL_TEAM_NB,\n  MAX_HEIGHT_IMG,\n  MIME_JPEG,\n  MIME_PNG,\n  PLACEHOLDER_CPUS,\n  WAR_POINTS_SCHEME\n} from './constants';\nimport { cleanString, getCloserString, sortCaseInsensitive } from './utils/string';\nimport {\n  formatCpuPlayers,\n  getColorPlayer,\n  getOptionsTeams,\n  getParams,\n  getPlayers,\n  getPlayersPlaceholder,\n  getPositionString,\n  getReferencePlayers,\n  getTeamNames,\n  isHumanPlayer\n} from './utils';\nimport { numberRange } from './utils/number';\nimport { getExtract, getMimeType, sortImagesByFilename } from './utils/image';\nimport { logError, logTime } from './utils/log';\nimport { validatePoints, validateTeams, validateUsernames } from './utils/validation';\nimport { uniq } from 'lodash';\nimport UAParser from 'ua-parser-js';\nimport { isEqual } from './utils/array';\nconst language = 'eng';\n\nconst App = () => {\n  const renderProgressBar = () => {\n    if (ocrProgress !== Progress.Started) return null;\n\n    return (\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar-value\"></div>\n        <div className=\"progress-bar-text\">{ocrProgressText}</div>\n      </div>\n    );\n  };\n\n  const renderTablePointsScheme = () => {\n    const classes = isMobile ? 'flex-1' : 'flex-1 max-width-50 center';\n    return (\n      <table className={classes}>\n        <thead>\n          <tr>\n            <th>Position</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        {renderBodyPointsScheme()}\n      </table>\n    );\n  };\n\n  const renderTable = (index: number) => {\n    const classes = isMobile ? 'flex-1 limited-table' : 'flex-1';\n\n    return (\n      <table className={classes}>\n        <thead>\n          <tr>\n            <th>Position</th>\n            {includeCpuPlayers && <th>Type</th>}\n            <th>Name</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        {renderBody(index)}\n      </table>\n    );\n  };\n\n  const renderCroppedImage = (index: number) => {\n    if (!croppedImages || croppedImages.length <= index) return null;\n\n    const classes = isMobile ? 'img-show max-width-100' : 'img-show max-width-45';\n\n    return <img alt=\"Cropped Results\" className={classes} src={croppedImages[index]} />;\n  };\n\n  const renderImages = () => {\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    if (isMobile) {\n      return imagesURLs.map((imageSrc: string, index: number) => (\n        <img alt=\"tbd\" className=\"img-full max-width-100 block\" key={`${imageSrc}-${index}`} src={imageSrc} />\n      ));\n    }\n\n    return (\n      <div className=\"flex-container center\">\n        {imagesURLs.map((imageSrc: string, index: number) => (\n          <img alt=\"tbd\" className=\"img-full max-width-45 flex-1\" key={`${imageSrc}-${index}`} src={imageSrc} />\n        ))}\n      </div>\n    );\n  };\n\n  const renderBodyPointsScheme = () => {\n    const slicedPointsScheme = pointsScheme.slice(0, nbPlayers);\n\n    return (\n      <tbody>\n        {slicedPointsScheme.map((_points: number, indexPoints: number) => {\n          const key = indexPoints;\n\n          return (\n            <tr key={key}>\n              <td>{getPositionString(indexPoints + 1)}</td>\n              <td>\n                <input\n                  className=\"text-center\"\n                  type=\"number\"\n                  value={pointsScheme[indexPoints]}\n                  disabled={selectIsDisabled}\n                  onChange={onChangePointsScheme(indexPoints)}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderBody = (index: number) => {\n    const renderOption = (option: string | number, indexOption: number) => {\n      const key = `${option}-${indexOption}`;\n      const label = `${option}`;\n      return (\n        <option key={key} label={label} value={option}>\n          {label}\n        </option>\n      );\n    };\n\n    const renderOptions = () => {\n      const optionsResultsPlayerHuman = getPlayers(players).sort(sortCaseInsensitive);\n      if (!includeCpuPlayers) {\n        return optionsResultsPlayerHuman.map(renderOption);\n      }\n\n      const optionsResultsPlayerCpu = getPlayers(cpuPlayers).sort(sortCaseInsensitive);\n\n      return (\n        <>\n          <optgroup key=\"human\" label=\"Human\">\n            {optionsResultsPlayerHuman.map(renderOption)}\n          </optgroup>\n          <optgroup key=\"cpus\" label=\"CPUs\">\n            {optionsResultsPlayerCpu.map(renderOption)}\n          </optgroup>\n        </>\n      );\n    };\n\n    const renderOptionsPoints = () => {\n      const optionsResultsPoints = pointsScheme.slice(0, nbPlayers);\n\n      return optionsResultsPoints.map(renderOption);\n    };\n\n    const classesSelectPlayer = isMobile ? 'max-width-100' : '';\n\n    return (\n      <tbody>\n        {resultsOcr[index].map((resultOcr: Result, indexPlayer: number) => {\n          const { position, username, points } = resultOcr;\n          const key = `${position}-${username}`;\n\n          return (\n            <tr key={key}>\n              <td>{getPositionString(position)}</td>\n              {includeCpuPlayers && <td>{isHumanPlayer(username, players) ? '👤' : '🤖'}</td>}\n              <td>\n                <select\n                  className={classesSelectPlayer}\n                  onChange={onChangeResultsPlayer(index, indexPlayer)}\n                  value={username}\n                >\n                  {renderOptions()}\n                </select>\n              </td>\n              <td>\n                <select onChange={onChangeResultsPoints(index, indexPlayer)} value={points}>\n                  {renderOptionsPoints()}\n                </select>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderRace = (index: number) => {\n    const labelRace = `Race ${index + 1}`;\n    const validationUsernames = validateUsernames(resultsOcr[index].map((r: Result) => r.username));\n    const validationPoints = validatePoints(resultsOcr[index].map((r: Result) => r.points));\n\n    return (\n      <div key={index}>\n        <h3>{labelRace}</h3>\n        {renderCroppedImage(index)}\n        <div className=\"flex-container mt\">{renderTable(index)}</div>\n        {!validationUsernames.correct && <div className=\"red\">{validationUsernames.errMsg}</div>}\n        {!validationPoints.correct && <div className=\"red\">{validationPoints.errMsg}</div>}\n      </div>\n    );\n  };\n\n  const renderRaces = () => {\n    if (!resultsOcr || resultsOcr.length === 0) return null;\n\n    return (\n      <>\n        <hr />\n        <div className=\"center\">\n          <h2>Results</h2>\n          {resultsOcr.map((_resultOcr: Result[], index: number) => renderRace(index))}\n        </div>\n      </>\n    );\n  };\n\n  const renderFooter = () => {\n    return (\n      <>\n        <div className=\"mt2 text-center\">\n          Developed by{' '}\n          <a href={PROJECT_URL} rel=\"noopener noreferrer\" title=\"GitHub page for repository\" target=\"_blank\">\n            sebranly\n          </a>{' '}\n          (PSN:{' '}\n          <a\n            href={CRASH_TEAM_RANKING_AUTHOR_URL}\n            rel=\"noopener noreferrer\"\n            title=\"Crash Team Ranking for ZouGui28\"\n            target=\"_blank\"\n          >\n            ZouGui28\n          </a>\n          ) with ❤️\n        </div>\n        <div className=\"mt2 text-center\">{`Website version ${WEBSITE_VERSION}`}</div>\n      </>\n    );\n  };\n\n  const renderCpuMainSection = () => {\n    return (\n      <>\n        <h3>CPUs</h3>\n        {renderCpuSection()}\n      </>\n    );\n  };\n\n  const renderPointsSchemeMainSection = () => {\n    if (issueOnTeams) return null;\n\n    const isFFASetup = isEqual(pointsScheme.slice(0, nbPlayers), FFA_POINTS_SCHEME.slice(0, nbPlayers));\n    const isWarSetup = isEqual(pointsScheme.slice(0, nbPlayers), WAR_POINTS_SCHEME.slice(0, nbPlayers));\n\n    return (\n      <>\n        <h3>Points</h3>\n        <div className=\"text-center mb\">Choose a preset or edit each value individually for something more custom</div>\n        <div className=\"mb\">\n          <button onClick={() => setPointsScheme(FFA_POINTS_SCHEME)} disabled={selectIsDisabled || isFFASetup}>\n            FFA preset\n          </button>\n\n          <button\n            className=\"ml\"\n            onClick={() => setPointsScheme(WAR_POINTS_SCHEME)}\n            disabled={selectIsDisabled || isWarSetup}\n          >\n            WAR preset\n          </button>\n        </div>\n        {renderPointsSchemeSection()}\n        {!validationPointsScheme.correct && <div className=\"red\">{validationPointsScheme.errMsg}</div>}\n      </>\n    );\n  };\n\n  const renderTeamMainSection = () => {\n    return (\n      <>\n        <h3>Teams</h3>\n        {renderTeamSection()}\n      </>\n    );\n  };\n\n  const renderStart = () => {\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    const colorText = ocrProgress === Progress.Done ? 'orange' : 'red';\n    const classesText = `ml block mb bold ${colorText}`;\n    const text =\n      ocrProgress === Progress.Done\n        ? 'Images were analyzed successfully. Please check the results below are correct. Feel free to tweak any mistake below.'\n        : 'Please ensure all the information entered above is correct, as none of it can be edited afterwards.';\n\n    return (\n      <div className=\"text-center mb\">\n        <div className={classesText}>{text}</div>\n        <input\n          className=\"inline-block ml\"\n          type=\"button\"\n          value=\"Get results\"\n          disabled={selectIsDisabled || !imagesURLs || imagesURLs.length === 0}\n          onClick={doOCR}\n        />\n      </div>\n    );\n  };\n\n  const renderImagesUpload = () => {\n    const jpgImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.JPG`;\n    const pngImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.PNG`;\n    const guideImage = `${GUIDE_FOLDER}Images.md`;\n\n    if (issueOnPointsScheme || issueOnTeams) return null;\n\n    return (\n      <>\n        <h2>Images</h2>\n        <div className=\"text-center mb\">\n          <div className=\"ml block mb bold\">Screenshots will be ordered alphabetically by name</div>\n          <div className=\"ml block mb\">\n            Select screenshots in JPG/JPEG or PNG format, taken right when Returning to Lobby was around 14 seconds\n          </div>\n          <div className=\"ml block mb\">\n            Examples of valid screenshots:{' '}\n            <a href={jpgImage} rel=\"noopener noreferrer\" title=\"Example of valid JPEG screenshot\" target=\"_blank\">\n              JPG/JPEG\n            </a>{' '}\n            and{' '}\n            <a href={pngImage} rel=\"noopener noreferrer\" title=\"Example of valid PNG screenshot\" target=\"_blank\">\n              PNG\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            You can upload multiple images at once, as in this{' '}\n            <a\n              href={EXAMPLE_IMAGES_FOLDER_FULL_EVENT}\n              rel=\"noopener noreferrer\"\n              title=\"Example of a valid 10-race event\"\n              target=\"_blank\"\n            >\n              10-race example\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            For more information, please refer to the{' '}\n            <a href={guideImage} rel=\"noopener noreferrer\" title=\"Guide about Images\" target=\"_blank\">\n              images guide\n            </a>\n          </div>\n          <input\n            className=\"inline mt\"\n            disabled={selectIsDisabled}\n            type=\"file\"\n            multiple\n            accept={[MIME_JPEG, MIME_PNG].join(', ')}\n            onChange={onChangeImage}\n          />\n        </div>\n      </>\n    );\n  };\n\n  const renderMainSection = () => {\n    if (nbPlayersTyped === 0) return null;\n\n    return (\n      <>\n        {renderCpuMainSection()}\n        {renderTeamMainSection()}\n        {renderPointsSchemeMainSection()}\n        {renderImagesUpload()}\n        {renderImages()}\n        {renderStart()}\n        {renderRaces()}\n      </>\n    );\n  };\n\n  const renderPointsSchemeSection = () => {\n    return renderTablePointsScheme();\n  };\n\n  const renderTeamSection = () => {\n    if (includeCpuPlayers) return <div className=\"text-center mb\">Teams are not available when CPUs are activated</div>;\n\n    return (\n      <>\n        <select disabled={selectIsDisabled} onChange={onChangeNbTeams} value={nbTeams}>\n          {optionsNbTeams.map((option: number) => {\n            const label = option === nbPlayers ? 'FFA' : `${option} teams`;\n            return (\n              <option key={option} label={label} value={option}>\n                {label}\n              </option>\n            );\n          })}\n        </select>\n        {renderTeamRepartition()}\n      </>\n    );\n  };\n\n  const onChangeTeam = (player: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newPlayerTeams = { ...playerTeams, [player]: value };\n    setPlayerTeams(newPlayerTeams);\n  };\n\n  const renderPlayerTeams = (player: string) => {\n    return teams.map((team: string) => {\n      const key = `${player}-${team}`;\n      const isChecked = playerTeams[player] === team;\n\n      return (\n        <div className=\"ml inline\" key={key}>\n          <input\n            type=\"radio\"\n            disabled={selectIsDisabled}\n            id={key}\n            name={player}\n            value={team}\n            checked={isChecked}\n            onChange={onChangeTeam(player)}\n          />\n          <label htmlFor={key}>{team}</label>\n        </div>\n      );\n    });\n  };\n\n  const renderPlayerTeamRepartition = (player: string) => {\n    const colorPlayer = getColorPlayer(player, teams, playerTeams);\n    const playerClassnames = `inline ${colorPlayer}`;\n\n    return (\n      <li className=\"block\" key={player}>\n        <div className={playerClassnames}>{player}</div>\n        <div className=\"ml mb block text-center\">{renderPlayerTeams(player)}</div>\n      </li>\n    );\n  };\n\n  const renderTeamRepartition = () => {\n    if (includeCpuPlayers) return null;\n    if (isFFA) return <div className=\"ml block mb\">Free For All means there is no need to set up teams!</div>;\n\n    const classesValidation = validationTeams.isWarning ? 'orange' : 'red';\n\n    return (\n      <>\n        <ul className=\"text-center no-padding mt2\">\n          <div className=\"inline-block\">{playersNames.map(renderPlayerTeamRepartition)}</div>\n          {!validationTeams.correct && <div className={classesValidation}>{validationTeams.errMsg}</div>}\n        </ul>\n      </>\n    );\n  };\n\n  const renderCpuSection = () => {\n    if (!cpuData || Object.keys(cpuData).length === 0) return <div className=\"text-center mb\">{PLACEHOLDER_CPUS}</div>;\n\n    const guideCpu = `${GUIDE_FOLDER}CPUs.md`;\n\n    const optionsCpuLanguages = Object.keys(cpuData);\n    const textCheckbox = shouldIncludeCpuPlayers\n      ? `Automatically activated bots because ${nbPlayersTyped} human player(s) was/were filled out of a total of ${nbPlayers} players`\n      : 'Check this if there were bots during the race';\n\n    return (\n      <>\n        <div className=\"text-center mb\">\n          <input\n            name=\"includeCpuPlayers\"\n            type=\"checkbox\"\n            checked={includeCpuPlayers}\n            onChange={onCpuCheckboxChange}\n            disabled={shouldIncludeCpuPlayers || selectIsDisabled}\n          />\n          <div className=\"ml inline\">{textCheckbox}</div>\n        </div>\n        {includeCpuPlayers && (\n          <>\n            <div className=\"text-center mb\">\n              Bots are automatically determined based on the language and cannot be edited\n            </div>\n            <div className=\"ml block mb\">\n              For more information, please refer to the{' '}\n              <a href={guideCpu} rel=\"noopener noreferrer\" title=\"Guide about CPUs\" target=\"_blank\">\n                CPUs guide\n              </a>\n            </div>\n            <div className=\"inline mr\">Language in images</div>\n            <select disabled={selectIsDisabled} onChange={onChangeCpuLanguage} value={cpuLanguage}>\n              {optionsCpuLanguages.map((option: string) => {\n                const label = `${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n            <textarea\n              className={`textarea-${classPlatform}`}\n              disabled={true}\n              placeholder={PLACEHOLDER_CPUS}\n              rows={CTR_MAX_PLAYERS}\n              value={cpuPlayers}\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n    fetch(URL_CPUS)\n      .then((response) => response.json())\n      .then((data) => {\n        setCpuData(data);\n        setCpuPlayers(formatCpuPlayers((data as any)[WEBSITE_DEFAULT_LANGUAGE]));\n      });\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n\n    setSelectIsDisabled(true);\n    setOcrProgress(Progress.Started);\n    setOcrProgressText('Initialization...');\n    setResultsOcr([]);\n    setCroppedImages([]);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    await workerUsername.load();\n    await workerUsername.loadLanguage(language);\n    await workerUsername.initialize(language);\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    const playerIndexes = numberRange(0, nbPlayers - 1);\n\n    const promisesX = async (\n      playerIndex: number,\n      category: Category,\n      info: any, // TODO: type it better\n      imgTransCopy: any\n    ) => {\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n      const { extension } = info;\n      const mimeType = getMimeType(extension);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: mimeType\n      };\n\n      const buffer: any = await extracted.getBufferAsync(mimeType);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      const bufferFin: any = await extractedFin.getBufferAsync(mimeType);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    let resultsOcrTemp: Result[][] = [];\n    let croppedImagesTemp: string[] = [];\n\n    // TODO: have better error handling\n    for (let i = 0; i < imagesURLs.length; i++) {\n      try {\n        const progressText = `Image ${i + 1} out of ${imagesURLs.length}...`;\n        setOcrProgressText(progressText);\n\n        logTime('imgRead');\n        const imgJimpTemp = await Jimp.read(imagesURLs[i]);\n        logTime('imgRead', true);\n\n        const initialHeight = imgJimpTemp.bitmap.height;\n        const shouldResize = initialHeight > MAX_HEIGHT_IMG;\n\n        if (shouldResize) logTime('imgResize');\n\n        const imgJimp = shouldResize ? imgJimpTemp.resize(Jimp.AUTO, MAX_HEIGHT_IMG) : imgJimpTemp;\n\n        if (shouldResize) logTime('imgResize', true);\n\n        logTime('imgRotate');\n\n        const imgTrans = imgJimp.rotate(-6.2);\n\n        logTime('imgRotate', true);\n\n        logTime('imgRest');\n\n        const h = imgTrans.bitmap.height;\n        const w = imgTrans.bitmap.width;\n        const extension = imgTrans.getExtension();\n        const info = { height: h, extension, width: w };\n        const dimensionsCrop = getExtract(info, nbPlayers, Category.All);\n\n        const imgTransCopy = imgTrans.clone();\n        const extractedCrop = imgTransCopy.crop(\n          dimensionsCrop.left,\n          dimensionsCrop.top,\n          dimensionsCrop.width,\n          dimensionsCrop.height\n        );\n\n        // eslint-disable-next-line no-loop-func\n        extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n          croppedImagesTemp.push(src);\n        });\n\n        const imgTransGray = imgTrans.grayscale();\n\n        logTime('imgRest', true);\n\n        logTime('promisesCreation');\n\n        const promisesNames = playerIndexes.map((playerIndex) =>\n          promisesX(playerIndex, Category.Username, info, imgTransGray.clone())\n        );\n\n        logTime('promisesCreation', true);\n\n        logTime('promisesResolve');\n\n        const results = await Promise.all(promisesNames);\n\n        logTime('promisesResolve', true);\n\n        const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n        const dataResults: Result[] = [];\n        const referencePlayers = getReferencePlayers(players, cpuPlayers, includeCpuPlayers);\n        playerIndexes.forEach((playerIndex) => {\n          const playerGuess = resultsNames[playerIndex];\n          const result: Result = {\n            username: getCloserString(playerGuess, referencePlayers),\n            position: playerIndex + 1,\n            points: pointsScheme[playerIndex]\n          };\n\n          dataResults.push(result);\n        });\n\n        resultsOcrTemp.push(dataResults);\n      } catch (err) {\n        // TODO: have better error handling\n        logError(err);\n        // setSelectIsDisabled(false);\n      }\n    }\n\n    setResultsOcr(resultsOcrTemp);\n    setCroppedImages(croppedImagesTemp);\n    setOcrProgress(Progress.Done);\n    setOcrProgressText('');\n    // setSelectIsDisabled(false);\n\n    await schedulerUsername.terminate();\n  };\n\n  const { width, height } = useWindowSize();\n  const [ocrProgress, setOcrProgress] = React.useState(Progress.NotStarted);\n  const [ocrProgressText, setOcrProgressText] = React.useState('');\n  const [images, setImages] = React.useState<any[]>([]);\n  const [imagesURLs, setImagesURLs] = React.useState<any[]>([]);\n  const [croppedImages, setCroppedImages] = React.useState<any[]>([]);\n  const [nbPlayers, setNbPlayers] = React.useState(CTR_MAX_PLAYERS);\n  const [cpuLanguage, setCpuLanguage] = React.useState(WEBSITE_DEFAULT_LANGUAGE);\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [resultsOcr, setResultsOcr] = React.useState<Result[][]>([]);\n  const [players, setPlayers] = React.useState('');\n  const [pointsScheme, setPointsScheme] = React.useState<number[]>(FFA_POINTS_SCHEME);\n  const [copiedPlayers, setCopiedPlayers] = React.useState(false);\n  const [cpuPlayers, setCpuPlayers] = React.useState(PLACEHOLDER_CPUS);\n  const [cpuData, setCpuData] = React.useState<any>({});\n  const [includeCpuPlayers, setIncludeCpuPlayers] = React.useState(false);\n  const [teams, setTeams] = React.useState<string[]>(getTeamNames(INITIAL_TEAM_NB));\n  const [nbTeams, setNbTeams] = React.useState(INITIAL_TEAM_NB);\n  const [playerTeams, setPlayerTeams] = React.useState<Record<string, string>>({});\n\n  const nbPlayersTyped = uniq(getPlayers(players)).length;\n  const shouldIncludeCpuPlayers = nbPlayersTyped < nbPlayers;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  React.useEffect(() => {\n    if (images.length < 1) return;\n    const newImageUrls: any[] = [];\n    const sortImages = sortImagesByFilename(images);\n    sortImages.forEach((image) => {\n      newImageUrls.push(URL.createObjectURL(image));\n    });\n    setImagesURLs(newImageUrls);\n  }, [images]);\n\n  React.useEffect(() => {\n    if (shouldIncludeCpuPlayers && !includeCpuPlayers) {\n      setIncludeCpuPlayers(true);\n    }\n  }, [shouldIncludeCpuPlayers, includeCpuPlayers]);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n    setCopiedPlayers(false);\n\n    setNbTeams(INITIAL_TEAM_NB);\n    setTeams(getTeamNames(INITIAL_TEAM_NB));\n    setPlayerTeams({});\n  };\n\n  const onChangeImage = (e: any) => {\n    setImages([...e.target.files]);\n    setResultsOcr([]);\n  };\n\n  const onChangeNbPlayers = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNbPlayers(Number(e.target.value));\n\n    setPlayers('');\n\n    setNbTeams(INITIAL_TEAM_NB);\n    setTeams(getTeamNames(INITIAL_TEAM_NB));\n    setPlayerTeams({});\n  };\n\n  const onChangeNbTeams = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newNbTeams = Number(e.target.value);\n    const teamNames = getTeamNames(newNbTeams);\n    const isFFA = newNbTeams === nbPlayers;\n\n    setNbTeams(newNbTeams);\n    setTeams(teamNames);\n    setPlayerTeams({});\n\n    if (isFFA) setPointsScheme(FFA_POINTS_SCHEME);\n    else setPointsScheme(WAR_POINTS_SCHEME);\n  };\n\n  const onChangeCpuLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCpuLanguage(e.target.value);\n    setCpuPlayers(formatCpuPlayers(cpuData[e.target.value]));\n  };\n\n  const onChangePointsScheme = (indexPointsScheme: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!pointsScheme || pointsScheme.length < indexPointsScheme) return;\n    const { value } = e.currentTarget;\n    const copy = [...pointsScheme];\n    copy[indexPointsScheme] = Number(value);\n    setPointsScheme(copy);\n  };\n\n  const onChangeResultsPoints =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].points = Number(e.target.value);\n      setResultsOcr(copy);\n    };\n\n  const onChangeResultsPlayer =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].username = e.target.value;\n      setResultsOcr(copy);\n    };\n\n  const onCpuCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newVal = e.target.checked;\n    setIncludeCpuPlayers(newVal);\n    if (newVal === true) setPointsScheme(FFA_POINTS_SCHEME);\n    else setPointsScheme(WAR_POINTS_SCHEME);\n  };\n\n  const optionsNbPlayers = numberRange(2, CTR_MAX_PLAYERS);\n  const optionsNbTeams = getOptionsTeams(nbPlayers);\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n  const classBgDisabled = selectIsDisabled && (!resultsOcr || resultsOcr.length === 0) ? 'bg-grey' : 'bg-white';\n  const playersNames = uniq(getPlayers(players)).sort(sortCaseInsensitive);\n  const validationTeams = validateTeams(playersNames, teams, playerTeams);\n  const validationPointsScheme = validatePoints(pointsScheme.slice(0, nbPlayers));\n  const userAgent = navigator?.userAgent ?? '';\n  const userAgentResult = new UAParser(userAgent).getResult();\n  const placeholderPlayers = getPlayersPlaceholder(nbPlayers, userAgentResult);\n  const isFFA = nbTeams === nbPlayers;\n  const issueOnTeams = !includeCpuPlayers && !isFFA && !validationTeams.correct;\n  const issueOnPointsScheme = !validationPointsScheme.correct;\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{WEBSITE_TITLE}</title>\n        <link rel=\"canonical\" href={CANONICAL_URL} />\n      </Helmet>\n      <div className=\"main\">\n        <h1>{WEBSITE_TITLE}</h1>\n        <div className=\"w3-light-grey\"></div>\n        {ocrProgress === Progress.Done && (\n          <Confetti width={width} height={height} numberOfPieces={800} recycle={false} />\n        )}\n        <div className={`center main-content-${classPlatform} ${classBgDisabled}`}>\n          {renderProgressBar()}\n          <h2>Introduction</h2>\n          <div className=\"text-center mb\">Please enter information from top to bottom for a smooth experience</div>\n          <div className=\"text-center mb\">At the end, we'll produce the Lorenzi markdown for you</div>\n          <h2>Players</h2>\n          <h3>Number of players</h3>\n          <div className=\"text-center mb\">This includes CPUs if any</div>\n          <select disabled={selectIsDisabled} onChange={onChangeNbPlayers} value={nbPlayers}>\n            {optionsNbPlayers.map((option: number) => {\n              const label = `${option} players`;\n              return (\n                <option key={option} label={label} value={option}>\n                  {label}\n                </option>\n              );\n            })}\n          </select>\n          <h3>Human Players</h3>\n          <div className=\"text-center mb\">Type all human players present in the races. Type one username per line.</div>\n          <textarea\n            className={`textarea-${classPlatform}`}\n            disabled={selectIsDisabled}\n            placeholder={placeholderPlayers}\n            rows={nbPlayers}\n            value={players}\n            onChange={onPlayersChange}\n          />\n          <CopyToClipboard options={{ message: '' }} text={players} onCopy={() => setCopiedPlayers(true)}>\n            <button disabled={nbPlayersTyped === 0 || copiedPlayers} className=\"mt\">\n              {copiedPlayers ? 'Copied' : 'Copy to clipboard'}\n            </button>\n          </CopyToClipboard>\n          {renderMainSection()}\n        </div>\n        {renderFooter()}\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}