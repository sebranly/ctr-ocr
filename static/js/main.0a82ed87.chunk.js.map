{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["PLAYERS","getName","guess","min","Infinity","name","forEach","player","lev","levenshtein","get","getExtract","info","index","isTime","width","height","left","parseInt","toString","top","widthCrop","heightCrop","ratioTime","ratioEnd","ratioLeftOffsetName","antiRatioTime","rectangle","topExt","heightExt","leftExtTime","widthExtTime","leftExtName","widthExtName","leftExt","widthExt","extract","pseudoWhitelist","App","scheduler1","createScheduler","scheduler2","worker1","createWorker","logger","m","console","log","worker2","worker3","worker4","doOCR","a","setSelectIsDisabled","div","document","getElementById","innerHTML","setOcr","imgIndex","load","loadLanguage","initialize","setParameters","tessedit_char_whitelist","addWorker","playerIndexes","promisesX","playerIndex","imsTrans","imgTransCopy","imgTrans","clone","scheduler","dimensions","extracted","crop","getBase64","Jimp","MIME_JPEG","err","src","img","createElement","setAttribute","appendChild","options","count","type","getBufferAsync","buffer","getColors","then","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","pathInput","read","imgJimp","rotate","grayscale","w","bitmap","h","promisesTimes","map","promisesNames","Promise","all","results","resultsText","r","data","text","replace","resultsNames","slice","resultsTimes","playerGuess","d","g","time","push","JSON","stringify","React","ocr","selectIsDisabled","setImgIndex","rel","href","className","disabled","onChange","e","Number","target","value","label","alt","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a82ed87.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler, PSM } from 'tesseract.js';\nimport levenshtein from 'fast-levenshtein';\nimport path from 'path';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\n\nconst language = 'eng';\n\nconst PLAYERS = [\n  'caso-pyro01',\n  'stin_wz',\n  'ZouGui28',\n  'francois24540',\n  'DGregson97',\n  'nessanumen',\n  'AlexKenshin_33',\n  'CrazyLittleJazzy',\n  'mmartin_m',\n  'Dr N. Tropy',\n  'Kity_Panda',\n  'Jakubeq1_',\n  'Assistant de laboratoire',\n  'Bébé N. Tropy',\n  'Faux Crash',\n  'giomastik',\n  'MarioAlfie123',\n  'kimmyy043',\n  'Mav15151515',\n  'Axe34070',\n  'Stew'\n];\n\nconst getName = (guess: string) => {\n  let min = Infinity;\n  let name = guess;\n\n  PLAYERS.forEach((player) => {\n    const lev = levenshtein.get(guess, player);\n\n    if (lev < min) {\n      min = lev;\n      name = player;\n    }\n  });\n\n  return name;\n};\n\nconst getExtract = (info: any, index = 0, isTime: boolean) => {\n  const { width, height } = info;\n  const left = parseInt((0.64 * width).toString(), 10);\n  const top = parseInt((0.265 * height).toString(), 10);\n  const widthCrop = parseInt((0.27 * width).toString(), 10);\n  const heightCrop = parseInt((0.425 * height).toString(), 10);\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: parseInt(((index / 8) * heightCrop).toString(), 10),\n    height: parseInt(((1 / 8) * heightCrop).toString(), 10)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  const leftExtTime = left + parseInt((ratioTime * widthCrop).toString(), 10);\n  const widthExtTime = parseInt((antiRatioTime * widthCrop).toString(), 10);\n\n  const leftExtName = left + parseInt((ratioLeftOffsetName * widthCrop).toString(), 10);\n  const widthExtName = parseInt(((1 - antiRatioTime - ratioLeftOffsetName - ratioEnd) * widthCrop).toString(), 10);\n\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract = {\n    left: leftExt,\n    top: topExt,\n    width: widthExt,\n    height: heightExt\n  };\n\n  return extract;\n};\n\nconst removeBack = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\nconst pseudoWhitelist = '_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:.';\nconst timeWhitelist = '0123456789:-';\n\nconst App = () => {\n  const scheduler1 = createScheduler();\n  const scheduler2 = createScheduler();\n\n  // const pathLangData = path.join(__dirname, '..', 'lang-data');\n  const worker1 = createWorker({\n    // langPath: pathLangData\n    logger: (m: any) => console.log(m)\n  });\n  const worker2 = createWorker({\n    // langPath: pathLangData\n    logger: (m: any) => console.log(m)\n  });\n  const worker3 = createWorker({\n    // langPath: pathLangData\n    logger: (m: any) => console.log(m)\n  });\n  const worker4 = createWorker({\n    // langPath: pathLangData\n    logger: (m: any) => console.log(m)\n  });\n\n  const doOCR = async () => {\n    setSelectIsDisabled(true);\n\n    const div = document.getElementById('img-show');\n    if (div) div.innerHTML = '';\n\n    setOcr(`Loading for ${imgIndex}...`);\n\n    await worker1.load();\n    await worker2.load();\n    await worker1.loadLanguage(language);\n    await worker2.loadLanguage(language);\n    await worker1.initialize(language);\n    await worker2.initialize(language);\n\n    await worker3.load();\n    await worker4.load();\n    await worker3.loadLanguage(language);\n    await worker4.loadLanguage(language);\n    await worker3.initialize(language);\n    await worker4.initialize(language);\n\n    await worker1.setParameters({\n      tessedit_char_whitelist: timeWhitelist\n      // TODO: re-activate\n      // tessedit_pageseg_mode: PSM.PSM_SINGLE_LINE\n    });\n\n    await worker2.setParameters({\n      tessedit_char_whitelist: timeWhitelist\n      // tessedit_pageseg_mode: PSM.PSM_SINGLE_LINE\n    });\n\n    await worker3.setParameters({\n      tessedit_char_whitelist: pseudoWhitelist\n      // tessedit_pageseg_mode: PSM.PSM_SINGLE_LINE\n    });\n\n    await worker4.setParameters({\n      tessedit_char_whitelist: pseudoWhitelist\n      // tessedit_pageseg_mode: PSM.PSM_SINGLE_LINE\n    });\n\n    scheduler1.addWorker(worker1);\n    scheduler1.addWorker(worker2);\n\n    scheduler2.addWorker(worker3);\n    scheduler2.addWorker(worker4);\n\n    const playerIndexes = [0, 1, 2, 3, 4, 5, 6, 7];\n\n    const promisesX = async (playerIndex: number, isTime: boolean, info: any, imsTrans: any) => {\n      const imgTransCopy = imgTrans.clone();\n      const scheduler = isTime ? scheduler1 : scheduler2;\n      const label = isTime ? 'time' : 'name';\n      const dimensions = getExtract(info, playerIndex, isTime);\n\n      // TODO: LOG\n      // const pathName = path.join(__dirname, '..', 'images', 'output', `${label}${playerIndex}.JPG`);\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      extracted.getBase64(Jimp.MIME_JPEG, (err: any, src: string) => {\n        var img = document.createElement('img');\n        img.setAttribute('src', src);\n        const div = document.getElementById('img-show');\n        if (div) div.appendChild(img);\n      });\n\n      const options = {\n        count: 2,\n        type: 'image/jpeg'\n      };\n\n      const buffer: any = await extracted.getBufferAsync(Jimp.MIME_JPEG);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        console.log('🚀 ~ rgb ~ colors', playerIndex, colors);\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      // TODO:\n      // await extractedFin.toFile(pathName);\n\n      const bufferFin: any = await extractedFin.getBufferAsync(Jimp.MIME_JPEG);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    // TODO:\n    // const pathInput = path.join(__dirname, '..', 'images', 'input', `IMG${imgIndex}.JPG`);\n    const pathInput = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n    // const modified = await sharp(pathInput).rotate(6.2).grayscale();\n    const imgJimp = await Jimp.read(pathInput);\n    const imgTrans = imgJimp.rotate(-6.2).grayscale();\n\n    imgTrans.getBase64(Jimp.MIME_JPEG, (err: any, src: string) => {\n      var img = document.createElement('img');\n      img.setAttribute('src', src);\n      const div = document.getElementById('img-show');\n      if (div) div.appendChild(img);\n    });\n\n    // TODO:\n    // const pathRotated = path.join(__dirname, '..', 'images', 'output', 'rotated.JPG');\n    // await modified.toFile(pathRotated, async (err: any, info: any) => {\n\n    const w = imgTrans.bitmap.width; //  width of the image\n    const h = imgTrans.bitmap.height; // height of the image\n    const info = { width: w, height: h };\n    console.log('info.width', info.width, 'info.height', info.height);\n\n    // TODO: reactivate\n    const promisesTimes = playerIndexes.map((playerIndex) => promisesX(playerIndex, true, info, imgTrans));\n    const promisesNames = playerIndexes.map((playerIndex) => promisesX(playerIndex, false, info, imgTrans));\n\n    const results = await Promise.all([...promisesNames, ...promisesTimes]);\n    const resultsText = results.map((r) => removeBack((r as any).data.text));\n\n    const resultsNames = resultsText.slice(0, 8);\n    const resultsTimes = resultsText.slice(8);\n\n    const data: string[] = [];\n    playerIndexes.forEach((playerIndex) => {\n      const playerGuess = resultsNames[playerIndex];\n      const d = { g: playerGuess, player: getName(playerGuess), time: resultsTimes[playerIndex] };\n      data.push(d as any);\n    });\n\n    setOcr(JSON.stringify(data));\n    setSelectIsDisabled(false);\n\n    // TODO: later\n    // await scheduler1.terminate();\n    // await scheduler2.terminate();\n  };\n\n  const [ocr, setOcr] = React.useState('Loading...');\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [imgIndex, setImgIndex] = React.useState(1);\n\n  React.useEffect(() => {\n    doOCR();\n  }, [imgIndex]);\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setImgIndex(Number(e.target.value));\n  };\n\n  const src = `https://raw.githubusercontent.com/sebranly/ctr-ocr/main/src/img/input/IMG${imgIndex}.JPG`;\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>CTR OCR</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/ctr-ocr\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1 className=\"white\">CTR OCR</h1>\n        <select disabled={selectIsDisabled} onChange={onChange}>\n          <option label=\"1\" value=\"1\" />\n          <option label=\"2\" value=\"2\" />\n          <option label=\"3\" value=\"3\" />\n          <option label=\"4\" value=\"4\" />\n          <option label=\"5\" value=\"5\" />\n        </select>\n        <img alt={`Example ${imgIndex}`} src={src} />\n        <div>{ocr}</div>\n        <div id=\"img-show\"></div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // TODO: re-add\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}