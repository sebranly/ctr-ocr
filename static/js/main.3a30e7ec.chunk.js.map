{"version":3,"sources":["types.ts","utils/index.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","Progress","getMimeType","extension","toLowerCase","MIME_PNG","MIME_JPEG","formatCpuPlayers","cpuPlayers","length","filter","s","sort","join","SEPARATOR_PLAYERS","getPlayers","players","split","getReferencePlayers","humanPlayers","includeCpuPlayers","humanPlayersSplit","cpuPlayersSplit","getCloserString","str","list","listSafe","min","Infinity","name","forEach","lev","levenshtein","get","getExtract","info","index","category","width","height","left","applyRatio","top","widthCrop","heightCrop","All","ratioHeight","CTR_MAX_PLAYERS","extract","ratioTime","ratioEnd","ratioLeftOffsetName","ratioEndPosition","antiRatioTime","rectangle","topExt","heightExt","Position","leftExtTime","widthExtTime","leftExtName","widthExtName","isTime","Time","leftExt","widthExt","numberRange","max","numbers","i","push","getParams","Username","tessedit_char_whitelist","CHARLIST_POSITION","tessedit_pageseg_mode","PSM_SINGLE_CHAR","CHARLIST_USERNAME","PSM_SINGLE_LINE","CHARLIST_TIME","ratio","nb","Math","floor","charRange","startChar","stopChar","startInt","charCodeAt","stopInt","result","String","fromCharCode","logTime","label","end","LOG_CONSOLE","console","timeEnd","time","getFilenameWithoutExtension","filename","sortImagesByFilename","images","imageA","imageB","nameA","nameB","strA","strB","regexAlpha","regexNumeric","newA","replace","newB","aN","parseInt","bN","sortAlphanumeric","AUTHOR_GITHUB","PROJECT_URL","GUIDE_FOLDER","CANONICAL_URL","CHARLIST_UPPERCASE_LETTERS","CHARLIST_LOWERCASE_LETTERS","CHARLIST_LETTERS","CHARLIST_DIGITS","URL_CPUS","EXAMPLE_IMAGES_FOLDER","EXAMPLE_IMAGES_FOLDER_FULL_EVENT","App","renderBody","renderOption","option","key","value","resultsOcr","map","resultOcr","indexPlayer","player","position","username","includes","disabled","selectIsDisabled","onChange","onChangeResultsPlayer","optionsResultsPlayerHuman","optionsResultsPlayerCpu","renderOptions","renderRace","labelRace","validationUsernames","usernames","validation","correct","errMsg","some","uniq","validateUsernames","r","croppedImages","classes","isMobile","alt","className","src","renderCroppedImage","renderTable","renderCpuSection","cpuData","Object","keys","guideCpu","optionsCpuLanguages","textCheckbox","shouldIncludeCpuPlayers","nbPlayersTyped","nbPlayers","type","checked","onCpuCheckboxChange","href","rel","title","target","onChangeCpuLanguage","cpuLanguage","classPlatform","placeholder","rows","onMount","a","setOnMountOver","setSelectIsDisabled","fetch","then","response","json","data","setCpuData","setCpuPlayers","doOCR","onMountOver","setOcrProgress","Started","setOcrProgressText","setResultsOcr","setCroppedImages","schedulerUsername","createScheduler","workerUsername","createWorker","addWorker","load","loadLanguage","initialize","usernameParams","setParameters","playerIndexes","promisesX","playerIndex","imgTransCopy","scheduler","dimensions","mimeType","extracted","crop","options","count","getBufferAsync","buffer","getColors","colors","rgb","shouldInvert","extractedFin","invert","bufferFin","addJob","resultsOcrTemp","croppedImagesTemp","imagesURLs","progressText","Jimp","read","imgJimpTemp","initialHeight","bitmap","shouldResize","imgJimp","resize","AUTO","imgTrans","rotate","h","w","getExtension","dimensionsCrop","clone","getBase64","err","imgTransGray","grayscale","promisesNames","Promise","all","results","resultsNames","text","dataResults","referencePlayers","playerGuess","log","Done","terminate","useWindowSize","React","NotStarted","ocrProgress","ocrProgressText","setImages","setImagesURLs","setNbPlayers","setCpuLanguage","setPlayers","setIncludeCpuPlayers","newImageUrls","image","URL","createObjectURL","onChangeImage","e","files","indexResultOcr","copy","optionsNbPlayers","classBgDisabled","numberOfPieces","recycle","Number","currentTarget","jpgImage","pngImage","guideImage","multiple","accept","onClick","imageSrc","_resultOcr","renderMainSection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SAAYA,EAOAC,E,qHAPAD,K,oBAAAA,E,YAAAA,E,oBAAAA,E,WAAAA,M,cAOAC,K,yBAAAA,E,kBAAAA,E,aAAAA,M,mHCYNC,EAAc,SAACC,GACnB,OAAKA,GAEqC,QAA5BA,EAAUC,cAETC,GAJQC,IAOnBC,EAAmB,SAACC,GACxB,OAAKA,GAAoC,IAAtBA,EAAWC,OAEvBD,EACJE,QAAO,SAACC,GAAD,QAAiBA,KACxBC,OACAC,KAAKC,IAL2C,IAQ/CC,EAAa,SAACC,GAClB,OAAKA,EAEEA,EAAQC,MAAMH,IAAmBJ,QAAO,SAACC,GAAD,QAAiBA,KAF3C,IAajBO,EAAsB,SAACC,EAAsBX,EAAoBY,GACrE,IAAKD,EAAc,MAAO,GAE1B,IAAME,EAAoBN,EAAWI,GAErC,IAAKC,IAAsBZ,EAAY,OAAOa,EAE9C,IAAMC,EAAkBP,EAAWP,GAEnC,MAAM,GAAN,mBAAWa,GAAX,YAAiCC,KA8B7BC,EAAkB,SAACC,EAAaC,GACpC,IAAMC,EAAWD,EAAKf,QAAO,SAACC,GAAD,QAAiBA,KAC1CgB,EAAMC,IACNC,EAAOL,EAWX,OATAE,EAASI,SAAQ,SAACnB,GAChB,IAAMoB,EAAMC,IAAYC,IAAIT,EAAKb,GAE7BoB,EAAMJ,IACRA,EAAMI,EACNF,EAAOlB,MAIJkB,GAIHK,EAAa,SAACC,GAA8C,IAAnCC,EAAkC,uDAA1B,EAAGC,EAAuB,uCACvDC,EAAkBH,EAAlBG,MAAOC,EAAWJ,EAAXI,OACTC,EAAOC,EAAW,IAAMH,GACxBI,EAAMD,EAAW,KAAOF,GACxBI,EAAYF,EAAW,IAAMH,GAC7BM,EAAaH,EAAW,KAAOF,GAErC,GAAIF,IAAarC,EAAS6C,IAAK,CAC7B,IAAMC,EAAcV,EAAQW,EACtBC,EAAiB,CACrBT,OAAQE,EAAWK,EAAaF,GAChCJ,OACAE,MACAJ,MAAOK,GAGT,OAAOK,EAGT,IAAMC,EAAY,IACZC,EAAW,IACXC,EAAsB,IACtBC,EAAmB,GACnBC,EAAgB,EAAIJ,EAAYC,EAEhCI,EAAY,CAChBZ,IAAKD,EAAWL,EAAQ,EAAGQ,GAC3BL,OAAQE,EAAW,EAAI,EAAGG,IAGtBW,EAASb,EAAMY,EAAUZ,IACzBc,EAAYF,EAAUf,OAE5B,GAAIF,IAAarC,EAASyD,SAAU,CAClC,IAAMT,EAAiB,CACrBT,OAAQiB,EACRhB,KAAMA,EACNE,IAAKa,EACLjB,MAAOG,EAAWW,EAAkBT,IAGtC,OAAOK,EAGT,IAAMU,EAAclB,EAAOC,EAAWQ,EAAWN,GAC3CgB,EAAelB,EAAWY,EAAeV,GAEzCiB,EAAcpB,EAAOC,EAAWU,EAAqBR,GACrDkB,EAAepB,EAAW,EAAIY,EAAgBF,EAAsBD,EAAUP,GAE9EmB,EAASzB,IAAarC,EAAS+D,KAC/BC,EAAUF,EAASJ,EAAcE,EACjCK,EAAWH,EAASH,EAAeE,EAEnCb,EAAiB,CACrBT,OAAQiB,EACRhB,KAAMwB,EACNtB,IAAKa,EACLjB,MAAO2B,GAGT,OAAOjB,GAGHkB,EAAc,SAACvC,EAAawC,GAEhC,IADA,IAAMC,EAAU,GACPC,EAAI1C,EAAK0C,GAAKF,EAAKE,GAAK,EAAGD,EAAQE,KAAKD,GACjD,OAAOD,GAGHG,EAAY,SAAClC,GACjB,IAAQoB,EAA6BzD,EAA7ByD,SAAUM,EAAmB/D,EAAnB+D,KAAMS,EAAaxE,EAAbwE,SAExB,OAAQnC,GACN,KAAKoB,EACH,MAAO,CACLgB,wBAAyBC,EACzBC,sBAAuBC,IAG3B,KAAKJ,EACH,MAAO,CACLC,wBAAyBI,EACzBF,sBAAuBG,IAG3B,KAAKf,EACL,QACE,MAAO,CACLU,wBAAyBM,EACzBJ,sBAAuBG,MAKzBrC,EAAa,SAACuC,EAAeC,GAAhB,OAA+BC,KAAKC,MAAMH,EAAQC,IAE/DG,EAAY,SAACC,EAAmBC,GAKpC,IAJA,IAAMC,EAAWF,EAAUG,WAAW,GAChCC,EAAUH,EAASE,WAAW,GAC9BE,EAAS,GAENrB,EAAIkB,EAAUlB,GAAKoB,EAASpB,GAAK,EACxCqB,EAAOpB,KAAKqB,OAAOC,aAAavB,IAGlC,OAAOqB,GAgGHG,EAAU,SAACC,GAAgC,IAAjBC,EAAgB,wDACzCC,IAEDD,EACFE,QAAQC,QAAQJ,GAEhBG,QAAQE,KAAKL,KA0BXM,EAA8B,SAACC,GACnC,OAAKA,EAEUA,EAASpF,MAAM,KAEhB,GAJQ,IAOlBqF,EAAuB,SAACC,GAC5B,OAAsB,IAAlBA,EAAO9F,OAAqB,GACV,IAAlB8F,EAAO9F,OAAqB8F,EAEXA,EAAO3F,MAAK,SAAC4F,EAAaC,GAC7C,IAAcC,EAAUF,EAAhB3E,KACM8E,EAAUF,EAAhB5E,KAKR,OAnCqB,SAAC+E,EAAcC,GACtC,IAAMC,EAAa,aACbC,EAAe,UAEjBC,EAAOJ,EAAKK,QAAQH,EAAY,IAChCI,EAAOL,EAAKI,QAAQH,EAAY,IAEpC,GAAIE,IAASE,EAAM,CACjB,IAAIC,EAAKC,SAASR,EAAKK,QAAQF,EAAc,IAAK,IAC9CM,EAAKD,SAASP,EAAKI,QAAQF,EAAc,IAAK,IAClD,OAAOI,IAAOE,EAAK,EAAIF,EAAKE,EAAK,GAAK,EAGxC,OAAOL,EAAOE,EAAO,GAAK,EAsBjBI,CAHUlB,EAA4BM,GAC5BN,EAA4BO,QCjWpC5D,EAAkB,EAGlBwE,EAAa,kBADC,WACD,cAGbC,EAAW,6BAJG,WAIH,YAFI,WAIfC,EAAY,UAAMD,EAAN,yBACZxB,GAAc,EAEd0B,EAAa,UAAMH,EAAN,YAPE,WAQfI,EAA6BvC,EAAU,IAAK,KAAKvE,KAAK,IACtD+G,EAA6BxC,EAAU,IAAK,KAAKvE,KAAK,IACtDgH,EAAgB,UAAMD,GAAN,OAAmCD,GACnDG,EAAkB5D,EAAY,EAAG,GAAGrD,KAAK,IACzC6D,EAAoBR,EAAY,EAAGnB,GAAiBlC,KAAK,IACzDkE,EAAa,UAAM+C,EAAN,MACbjD,EAAiB,UAAMgD,GAAN,OAAyBC,EAAzB,SACjBxH,GAAY,aACZD,GAAW,YACXuE,GAAkB,KAClBE,GAAkB,IAClBhE,GAAoB,KAMpBiH,GAAQ,UAAMR,EAAN,iBAxBM,UAwBN,iBACRS,GAAqB,4CA5BP,WA4BO,YA1BN,UA0BM,2BACrBC,GAAgC,UAAMT,EAAN,2CCwkB9BU,GA5jBH,WACV,IAkDMC,EAAa,SAAC/F,GAClB,IAAMgG,EAAe,SAACC,GACpB,IAAMvC,EAAK,UAAMuC,GACjB,OACE,0BAAQC,IAAKD,EAAQvC,MAAOA,EAAOyC,MAAOF,GACvCvC,IAyBP,OACE,6BACG0C,GAAWpG,GAAOqG,KAAI,SAACC,EAAmBC,GACzC,IF1FaC,EAAgBzH,EE0FrB0H,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SACZR,EAAG,UAAMO,EAAN,YAAkBC,GAE3B,OACE,sBAAIR,IAAKA,GACP,0BAAKO,GACJzH,IAAqB,2BFhGbwH,EEgGgCE,GFhGhB3H,EEgG0BH,KF7FrCD,EAAWI,GAEZ4H,SAASH,GE2FwC,eAAO,iBACrE,0BACE,0BACEI,SAAUC,GACVC,SAAUC,GAAsB/G,EAAOuG,GACvCJ,MAAOO,GAlCC,WACpB,IAAMM,EAA4BrI,EAAWC,IAASJ,OACtD,IAAKQ,GACH,OAAOgI,EAA0BX,IAAIL,GAGvC,IAAMiB,EAA0BtI,EAAWP,IAAYI,OAEvD,OACE,gCACE,4BAAU0H,IAAI,QAAQxC,MAAM,SACzBsD,EAA0BX,IAAIL,IAEjC,4BAAUE,IAAI,OAAOxC,MAAM,QACxBuD,EAAwBZ,IAAIL,KAsBtBkB,WAUXC,EAAa,SAACnH,GAClB,IAAMoH,EAAS,eAAWpH,EAAQ,GAC5BqH,EF2DgB,SAACC,GACzB,IAAMC,EAAyB,CAC7BC,SAAS,EACTC,OAAQ,IAIV,OADcH,EAAUI,MAAK,SAACtI,GAAD,OAAkBA,MAE7CmI,EAAWE,OAAS,mCAEbF,GAGeI,eAAKL,GACTjJ,SAAWiJ,EAAUjJ,QACvCkJ,EAAWE,OAAS,sCAEbF,IAGTA,EAAWC,SAAU,EACdD,GEhFuBK,CAAkBxB,GAAWpG,GAAOqG,KAAI,SAACwB,GAAD,OAAeA,EAAEnB,aAErF,OACE,uBAAKR,IAAKlG,GACR,0BAAKoH,GAtFgB,SAACpH,GAC1B,IAAK8H,IAAiBA,GAAczJ,QAAU2B,EAAO,OAAO,KAE5D,IAAM+H,EAAUC,WAAW,yBAA2B,wBAEtD,OAAO,uBAAKC,IAAI,kBAAkBC,UAAWH,EAASI,IAAKL,GAAc9H,KAkFpEoI,CAAmBpI,GACpB,uBAAKkI,UAAU,0BAvGD,SAAClI,GACnB,OACE,yBAAOkI,UAAU,UACf,6BACE,0BACE,sCACClJ,IAAqB,kCACtB,oCAGH+G,EAAW/F,IA6F6BqI,CAAYrI,KACnDqH,EAAoBG,SAAW,uBAAKU,UAAU,OAAOb,EAAoBI,UAoH3Ea,EAAmB,WACvB,IAAKC,IAA2C,IAAhCC,OAAOC,KAAKF,IAASlK,OAAc,OAAO,uBAAK6J,UAAU,kBDxP7C,mBC0P5B,IAAMQ,EAAQ,UAAMrD,EAAN,WAERsD,EAAsBH,OAAOC,KAAKF,IAClCK,EAAeC,GAAuB,+CACAC,GADA,8DACoEC,GADpE,YAExC,gDAEJ,OACE,gCACE,uBAAKb,UAAU,kBACb,yBACEzI,KAAK,oBACLuJ,KAAK,WACLC,QAASjK,GACT8H,SAAUoC,GACVtC,SAAUiC,KAEZ,uBAAKX,UAAU,aAAaU,IAE7B5J,IACC,gCACE,uBAAKkJ,UAAU,kBAAf,gFAGA,uBAAKA,UAAU,eAAf,4CAC4C,IAC1C,qBAAGiB,KAAMT,EAAUU,IAAI,sBAAsBC,MAAM,mBAAmBC,OAAO,UAA7E,eAIF,uBAAKpB,UAAU,aAAf,sBACA,0BAAQtB,SAAUC,GAAkBC,SAAUyC,GAAqBpD,MAAOqD,IACvEb,EAAoBtC,KAAI,SAACJ,GACxB,IAAMvC,EAAK,UAAMuC,GACjB,OACE,0BAAQC,IAAKD,EAAQvC,MAAOA,EAAOyC,MAAOF,GACvCvC,OAKT,4BACEwE,UAAS,mBAAcuB,IACvB7C,UAAU,EACV8C,YDtSkB,kBCuSlBC,KAAMhJ,EACNwF,MAAO/H,QAQbwL,EAAO,uCAAG,sBAAAC,EAAA,sDAEdC,IAAe,GACfC,IAAoB,GACpBC,MAAMrE,IACHsE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,GAAWD,GACXE,GAAcnM,EAAkBiM,EAAD,QARrB,2CAAH,qDAYPG,EAAK,uCAAG,0CAAAV,EAAA,yDACPW,GADO,wDAGZT,IAAoB,GACpBU,EAAe5M,EAAS6M,SACxBC,EAAmB,qBACnBC,GAAc,IACdC,GAAiB,IAEXC,EAAoBC,4BAEpBC,EAAiBC,uBAAa,IAIpCH,EAAkBI,UAAUF,GAfhB,UAiBNA,EAAeG,OAjBT,yBAkBNH,EAAeI,aAjUR,OA+SD,yBAmBNJ,EAAeK,WAlUR,OA+SD,eAoBNC,EAAiBnJ,EAAUvE,EAASwE,UApB9B,UAqBN4I,EAAeO,cAAcD,GArBvB,QAuBNE,EAAgB1J,EAAY,EAAGiH,GAAY,GAE3C0C,EAzBM,+BAAA5B,EAAA,MAyBM,WAChB6B,EACAzL,EACAF,EACA4L,GAJgB,mCAAA9B,EAAA,6DAMV+B,EAAYd,EACZe,EAAa/L,EAAWC,EAAM2L,EAAazL,GACzClC,EAAcgC,EAAdhC,UACF+N,EAAWhO,EAAYC,GAEvBgO,EAAYJ,EAAaK,KAAKH,EAAWzL,KAAMyL,EAAWvL,IAAKuL,EAAW3L,MAAO2L,EAAW1L,QAC5F8L,EAAU,CACdC,MAAO,EACPlD,KAAM8C,GAdQ,SAiBUC,EAAUI,eAAeL,GAjBnC,cAiBVM,EAjBU,iBAkBEC,IAAUD,EAAQH,GAAShC,MAAK,SAACqC,GACjD,MAAO,CAACA,EAAO,GAAGC,MAAOD,EAAO,GAAGC,UAnBrB,eAkBVA,EAlBU,OAsBVC,EAAeD,EAAI,GAAG,GAAKA,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,GACpFE,EAAeD,EAAeT,EAAUW,SAAWX,EAvBzC,UAyBaU,EAAaN,eAAeL,GAzBzC,eAyBVa,EAzBU,yBA0BTf,EAAUgB,OAAO,YAAaD,IA1BrB,4CAzBN,4DAsDRE,EAA6B,GAC7BC,EAA8B,GAGzB7K,EAAI,EA1DD,aA0DIA,EAAI8K,EAAW1O,QA1DnB,oDAAAwL,EAAA,oEAAAA,EAAA,6DA4DFmD,EA5DE,gBA4DsB/K,EAAI,EA5D1B,mBA4DsC8K,EAAW1O,OA5DjD,OA6DRsM,EAAmBqC,GAEnBvJ,EAAQ,WA/DA,SAgEkBwJ,IAAKC,KAAKH,EAAW9K,IAhEvC,cAgEFkL,EAhEE,OAiER1J,EAAQ,WAAW,GAEb2J,EAAgBD,EAAYE,OAAOlN,QACnCmN,EAAeF,EDlZC,MCoZJ3J,EAAQ,aAEpB8J,EAAUD,EAAeH,EAAYK,OAAOP,IAAKQ,KDtZjC,KCsZyDN,EAE3EG,GAAc7J,EAAQ,aAAa,GAEvCA,EAAQ,aAEFiK,EAAWH,EAAQI,QAAQ,KAEjClK,EAAQ,aAAa,GAErBA,EAAQ,WAEFmK,EAAIF,EAASL,OAAOlN,OACpB0N,EAAIH,EAASL,OAAOnN,MACpBnC,EAAY2P,EAASI,eAErBC,EAAiBjO,EADjBC,EAAO,CAAEI,OAAQyN,EAAG7P,YAAWmC,MAAO2N,GACJ9E,GAAWnL,EAAS6C,KAEtDkL,EAAe+B,EAASM,QACRrC,EAAaK,KACjC+B,EAAe3N,KACf2N,EAAezN,IACfyN,EAAe7N,MACf6N,EAAe5N,QAIH8N,UAAU/P,IAAW,SAACgQ,EAAU/F,GAC5C2E,EAAkB5K,KAAKiG,MAGnBgG,EAAeT,EAASU,YAE9B3K,EAAQ,WAAW,GAEnBA,EAAQ,oBAEF4K,EAAgB7C,EAAcnF,KAAI,SAACqF,GAAD,OACtCD,EAAUC,EAAa9N,EAASwE,SAAUrC,EAAMoO,EAAaH,YAG/DvK,EAAQ,oBAAoB,GAE5BA,EAAQ,mBAnHA,UAqHc6K,QAAQC,IAAIF,GArH1B,QAqHFG,EArHE,OAuHR/K,EAAQ,mBAAmB,GAErBgL,EAAeD,EAAQnI,KAAI,SAACwB,GAAD,OAAoBA,EAAUuC,KAAKsE,KFxZnC7J,QAAQ,MAAO,IAAIA,QAAQ,KAAM,OE0Z5D8J,EAAwB,GACxBC,EAAmB9P,EAAoBF,GAASR,GAAYY,IAClEwM,EAAc9L,SAAQ,SAACgM,GACrB,IAAMmD,EAAcJ,EAAa/C,GAC3BpI,EAAiB,CACrBoD,SAAUvH,EAAgB0P,EAAaD,GACvCnI,SAAUiF,EAAc,GAG1BiD,EAAYzM,KAAKoB,MAGnBuJ,EAAe3K,KAAKyM,GAvIZ,iHF9BET,EEwKD,EAAD,GFvKTtK,GAELC,QAAQiL,IAAIZ,GEsKNnE,IAAoB,GA3IZ,QA0D2B9H,IA1D3B,+BA+IZ2I,GAAciC,GACdhC,GAAiBiC,GACjBrC,EAAe5M,EAASkR,MACxBpE,EAAmB,IACnBZ,IAAoB,GAnJR,UAqJNe,EAAkBkE,YArJZ,kCF9BC,IAACd,IE8BF,sBAAH,qDAwJX,EAA0Be,MAAlB/O,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,EAAsC+O,WAAerR,EAASsR,YAA9D,mBAAOC,EAAP,KAAoB3E,EAApB,KACA,EAA8CyE,WAAe,IAA7D,mBAAOG,EAAP,KAAwB1E,EAAxB,KACA,EAA4BuE,WAAsB,IAAlD,mBAAO/K,EAAP,KAAemL,EAAf,KACA,EAAoCJ,WAAsB,IAA1D,mBAAOnC,EAAP,KAAmBwC,EAAnB,KACA,GAA0CL,WAAsB,IAAhE,qBAAOpH,GAAP,MAAsB+C,GAAtB,MACA,GAAkCqE,WAAevO,GAAjD,qBAAOoI,GAAP,MAAkByG,GAAlB,MACA,GAAsCN,WD5dA,MC4dtC,qBAAO1F,GAAP,MAAoBiG,GAApB,MACA,GAAgDP,YAAe,GAA/D,qBAAOrI,GAAP,MAAyBkD,GAAzB,MACA,GAAsCmF,YAAe,GAArD,qBAAO1E,GAAP,MAAoBV,GAApB,MACA,GAAoCoF,WAA2B,IAA/D,qBAAO9I,GAAP,MAAmBwE,GAAnB,MACA,GAA8BsE,WAAuB,IAArD,qBAAOtQ,GAAP,MAAgB8Q,GAAhB,MACA,GAAoCR,WDheN,mBCge9B,qBAAO9Q,GAAP,MAAmBkM,GAAnB,MACA,GAA8B4E,WAAoB,IAAlD,qBAAO3G,GAAP,MAAgB8B,GAAhB,MACA,GAAkD6E,YAAe,GAAjE,qBAAOlQ,GAAP,MAA0B2Q,GAA1B,MAGM7G,GAAiBnK,EAAWC,IAASP,OACrCwK,GAA0BC,GAAiBC,GAEjDmG,aAAgB,WACdtF,MACC,IAEHsF,aAAgB,WACd,KAAI/K,EAAO9F,OAAS,GAApB,CACA,IAAMuR,EAAsB,GACT1L,EAAqBC,GAC7BzE,SAAQ,SAACmQ,GAClBD,EAAa1N,KAAK4N,IAAIC,gBAAgBF,OAExCN,EAAcK,MACb,CAACzL,IAEJ+K,aAAgB,WACVrG,KAA4B7J,IAC9B2Q,IAAqB,KAEtB,CAAC9G,GAAyB7J,KAE7B,IAIMgR,GAAgB,SAACC,GACrBX,EAAU,YAAIW,EAAE3G,OAAO4G,QACvBtF,GAAc,KAOVrB,GAAsB,SAAC0G,GAC3BR,GAAeQ,EAAE3G,OAAOnD,OACxBmE,GAAcnM,EAAiBoK,GAAQ0H,EAAE3G,OAAOnD,UAG5CY,GACJ,SAACoJ,EAAwB5J,GAAzB,OAAiD,SAAC0J,GAChD,GAAK7J,MAAcA,GAAW/H,OAAS8R,GAAvC,CACA,IAAMC,EAAI,YAAOhK,IACjBgK,EAAKD,GAAgB5J,GAAaG,SAAWuJ,EAAE3G,OAAOnD,MACtDyE,GAAcwF,MAGZlH,GAAsB,SAAC+G,GAC3BN,GAAqBM,EAAE3G,OAAOL,UAG1BoH,GAAmBvO,EAAY,EAAGnB,GAClC8I,GAAgBzB,WAAW,SAAW,UACtCsI,GAAkBzJ,GAAmB,UAAY,WAEvD,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,6BDpiBqB,sBCqiBrB,wBAAMuC,IAAI,YAAYD,KAAM7D,KAE9B,uBAAK4C,UAAU,QACb,0BDxiBqB,sBCyiBrB,uBAAKA,UAAU,kBACdkH,IAAgBvR,EAASkR,MACxB,gBAAC,IAAD,CAAU7O,MAAOA,EAAOC,OAAQA,EAAQoQ,eAAgB,IAAKC,SAAS,IAExE,uBAAKtI,UAAS,8BAAyBuB,GAAzB,YAA0C6G,KAzhBxDlB,IAAgBvR,EAAS6M,QAAgB,KAG3C,uBAAKxC,UAAU,gBACb,uBAAKA,UAAU,uBACf,uBAAKA,UAAU,qBAAqBmH,IAshBlC,qCACA,+CACA,uBAAKnH,UAAU,kBAAf,6BACA,0BAAQtB,SAAUC,GAAkBC,SA1ClB,SAACmJ,GACzBT,GAAaiB,OAAOR,EAAE3G,OAAOnD,SAyC0CA,MAAO4C,IACrEsH,GAAiBhK,KAAI,SAACJ,GACrB,IAAMvC,EAAK,UAAMuC,EAAN,YACX,OACE,0BAAQC,IAAKD,EAAQvC,MAAOA,EAAOyC,MAAOF,GACvCvC,OAKT,2CACA,uBAAKwE,UAAU,kBAAf,4EACA,4BACEA,UAAS,mBAAcuB,IACvB7C,SAAUC,GACV6C,YD1jBoB,gDC2jBpBC,KAAMZ,GACN5C,MAAOvH,GACPkI,SArEc,SAACmJ,GACvBP,GAAWO,EAAES,cAAcvK,UAvUH,WACxB,GAAuB,IAAnB2C,GAAsB,OAAO,KAEjC,IAAM6H,EAAQ,UAAM/K,GAAN,YACRgL,EAAQ,UAAMhL,GAAN,YACRiL,EAAU,UAAMxL,EAAN,aAEhB,OACE,gCAfA,gCACE,kCACCiD,KAeD,oCACA,uBAAKJ,UAAU,kBACb,uBAAKA,UAAU,oBAAf,sDACA,uBAAKA,UAAU,eAAf,2GAGA,uBAAKA,UAAU,eAAf,iCACiC,IAC/B,qBAAGiB,KAAMwH,EAAUvH,IAAI,sBAAsBC,MAAM,mCAAmCC,OAAO,UAA7F,YAEK,IAJP,MAKM,IACJ,qBAAGH,KAAMyH,EAAUxH,IAAI,sBAAsBC,MAAM,kCAAkCC,OAAO,UAA5F,QAIF,uBAAKpB,UAAU,eAAf,qDACqD,IACnD,qBACEiB,KAAMtD,GACNuD,IAAI,sBACJC,MAAM,mCACNC,OAAO,UAJT,oBASF,uBAAKpB,UAAU,eAAf,4CAC4C,IAC1C,qBAAGiB,KAAM0H,EAAYzH,IAAI,sBAAsBC,MAAM,qBAAqBC,OAAO,UAAjF,iBAIF,yBACEpB,UAAU,YACVtB,SAAUC,GACVmC,KAAK,OACL8H,UAAQ,EACRC,OAAQ,CAAC7S,GAAWD,IAAUQ,KAAK,MACnCqI,SAAUkJ,KAEZ,yBACE9H,UAAU,kBACVc,KAAK,SACL7C,MAAM,oBACNS,SAAUC,KAAqBkG,GAAoC,IAAtBA,EAAW1O,OACxD2S,QAASzG,KA3LbvC,WACK+E,EAAW1G,KAAI,SAAC4K,EAAkBjR,GAAnB,OACpB,uBAAKiI,IAAI,MAAMC,UAAU,+BAA+BhC,IAAG,UAAK+K,EAAL,YAAiBjR,GAASmI,IAAK8I,OAK5F,uBAAK/I,UAAU,yBACZ6E,EAAW1G,KAAI,SAAC4K,EAAkBjR,GAAnB,OACd,uBAAKiI,IAAI,MAAMC,UAAU,+BAA+BhC,IAAG,UAAK+K,EAAL,YAAiBjR,GAASmI,IAAK8I,QA6E3F7K,IAAoC,IAAtBA,GAAW/H,OAG5B,gCACE,uBAAK6J,UAAU,UACb,qCACC9B,GAAWC,KAAI,SAAC6K,EAAsBlR,GAAvB,OAAyCmH,EAAWnH,QANvB,MA0b5CmR,IA5aL,gCACE,uBAAKjJ,UAAU,mBAAf,eACe,IACb,qBAAGiB,KAAM/D,EAAagE,IAAI,sBAAsBC,MAAM,6BAA6BC,OAAO,UAA1F,YAEK,IAJP,QAKQ,IACN,qBACEH,KDpLiC,wDCqLjCC,IAAI,sBACJC,MAAM,kCACNC,OAAO,UAJT,YANF,uBAgBA,uBAAKpB,UAAU,mBAAf,0BD1KuB,cEnBXkJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,MADF,KAGAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/H,MAAK,SAACgI,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvO,QAAQuO,MAAMA,EAAMC,c","file":"static/js/main.3a30e7ec.chunk.js","sourcesContent":["export enum Category {\n  Position = 'position',\n  Time = 'time',\n  Username = 'username',\n  All = 'all'\n}\n\nexport enum Progress {\n  NotStarted = 'not_started',\n  Started = 'started',\n  Done = 'done'\n}\n\nexport type Validation = {\n  correct: boolean;\n  errMsg: string;\n};\n\nexport type Coord = {\n  height: number;\n  left: number;\n  top: number;\n  width: number;\n};\n\nexport type Result = {\n  username: string;\n  position: number;\n};\n","import levenshtein from 'fast-levenshtein';\nimport {\n  CHARLIST_POSITION,\n  CHARLIST_TIME,\n  CHARLIST_USERNAME,\n  CTR_MAX_PLAYERS,\n  CTR_MAX_TIME_DIFF_SEC,\n  LOG_CONSOLE,\n  MIME_JPEG,\n  MIME_PNG,\n  PSM_SINGLE_CHAR,\n  PSM_SINGLE_LINE,\n  SEPARATOR_PLAYERS,\n  TIME_DNF\n} from '../constants';\nimport { Category, Coord, Validation } from '../types';\nimport { REGEX_TIME } from './regEx';\nimport { uniq } from 'lodash';\n\nconst getMimeType = (extension: string) => {\n  if (!extension) return MIME_JPEG;\n\n  const isPng = extension.toLowerCase() === 'png';\n\n  return isPng ? MIME_PNG : MIME_JPEG;\n};\n\nconst formatCpuPlayers = (cpuPlayers: string[]) => {\n  if (!cpuPlayers || cpuPlayers.length === 0) return '';\n\n  return cpuPlayers\n    .filter((s: string) => !!s)\n    .sort()\n    .join(SEPARATOR_PLAYERS);\n};\n\nconst getPlayers = (players: string) => {\n  if (!players) return [];\n\n  return players.split(SEPARATOR_PLAYERS).filter((s: string) => !!s);\n};\n\nconst isHumanPlayer = (player: string, humanPlayers: string) => {\n  if (!humanPlayers) return false;\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  return humanPlayersSplit.includes(player);\n};\n\nconst getReferencePlayers = (humanPlayers: string, cpuPlayers: string, includeCpuPlayers: boolean) => {\n  if (!humanPlayers) return [];\n\n  const humanPlayersSplit = getPlayers(humanPlayers);\n\n  if (!includeCpuPlayers || !cpuPlayers) return humanPlayersSplit;\n\n  const cpuPlayersSplit = getPlayers(cpuPlayers);\n\n  return [...humanPlayersSplit, ...cpuPlayersSplit];\n};\n\nconst cleanString = (str: string) => str.replace(/\\n/g, '').replace(/ /g, '');\n\nconst positionIsValid = (position: string, max: number) => {\n  if (!position) return false;\n  const pos = Number(position);\n  const isValid = position.length === 1 && pos >= 1 && pos <= max;\n\n  return isValid;\n};\n\nconst convertToMs = (time: string) => {\n  const timeIsValid = REGEX_TIME.test(time);\n  if (!timeIsValid) return 0;\n\n  const splits = time.split(':');\n  if (splits.length < 3) return 0;\n  const [minutesStr, secondsStr, centisecondsStr] = splits;\n\n  const minutes = Number(minutesStr);\n  const seconds = Number(secondsStr);\n  const centiseconds = Number(centisecondsStr);\n\n  const milliseconds = centiseconds * 10 + seconds * 1_000 + minutes * 60 * 1_000;\n\n  return milliseconds;\n};\n\nconst getCloserString = (str: string, list: string[]) => {\n  const listSafe = list.filter((s: string) => !!s);\n  let min = Infinity;\n  let name = str;\n\n  listSafe.forEach((s: string) => {\n    const lev = levenshtein.get(str, s);\n\n    if (lev < min) {\n      min = lev;\n      name = s;\n    }\n  });\n\n  return name;\n};\n\n// TODO: for All, index is actually the number of players\nconst getExtract = (info: any, index = 0, category: Category) => {\n  const { width, height } = info;\n  const left = applyRatio(0.64, width);\n  const top = applyRatio(0.265, height);\n  const widthCrop = applyRatio(0.27, width);\n  const heightCrop = applyRatio(0.425, height);\n\n  if (category === Category.All) {\n    const ratioHeight = index / CTR_MAX_PLAYERS;\n    const extract: Coord = {\n      height: applyRatio(ratioHeight, heightCrop),\n      left,\n      top,\n      width: widthCrop\n    };\n\n    return extract;\n  }\n\n  const ratioTime = 0.73;\n  const ratioEnd = 0.03;\n  const ratioLeftOffsetName = 0.27;\n  const ratioEndPosition = 0.1;\n  const antiRatioTime = 1 - ratioTime - ratioEnd;\n\n  const rectangle = {\n    top: applyRatio(index / 8, heightCrop),\n    height: applyRatio(1 / 8, heightCrop)\n  };\n\n  const topExt = top + rectangle.top;\n  const heightExt = rectangle.height;\n\n  if (category === Category.Position) {\n    const extract: Coord = {\n      height: heightExt,\n      left: left,\n      top: topExt,\n      width: applyRatio(ratioEndPosition, widthCrop)\n    };\n\n    return extract;\n  }\n\n  const leftExtTime = left + applyRatio(ratioTime, widthCrop);\n  const widthExtTime = applyRatio(antiRatioTime, widthCrop);\n\n  const leftExtName = left + applyRatio(ratioLeftOffsetName, widthCrop);\n  const widthExtName = applyRatio(1 - antiRatioTime - ratioLeftOffsetName - ratioEnd, widthCrop);\n\n  const isTime = category === Category.Time;\n  const leftExt = isTime ? leftExtTime : leftExtName;\n  const widthExt = isTime ? widthExtTime : widthExtName;\n\n  const extract: Coord = {\n    height: heightExt,\n    left: leftExt,\n    top: topExt,\n    width: widthExt\n  };\n\n  return extract;\n};\n\nconst numberRange = (min: number, max: number) => {\n  const numbers = [];\n  for (let i = min; i <= max; i += 1) numbers.push(i);\n  return numbers;\n};\n\nconst getParams = (category: Category) => {\n  const { Position, Time, Username } = Category;\n\n  switch (category) {\n    case Position:\n      return {\n        tessedit_char_whitelist: CHARLIST_POSITION,\n        tessedit_pageseg_mode: PSM_SINGLE_CHAR as any\n      };\n\n    case Username:\n      return {\n        tessedit_char_whitelist: CHARLIST_USERNAME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n\n    case Time:\n    default:\n      return {\n        tessedit_char_whitelist: CHARLIST_TIME,\n        tessedit_pageseg_mode: PSM_SINGLE_LINE as any\n      };\n  }\n};\n\nconst applyRatio = (ratio: number, nb: number) => Math.floor(ratio * nb);\n\nconst charRange = (startChar: string, stopChar: string) => {\n  const startInt = startChar.charCodeAt(0);\n  const stopInt = stopChar.charCodeAt(0);\n  const result = [];\n\n  for (let i = startInt; i <= stopInt; i += 1) {\n    result.push(String.fromCharCode(i));\n  }\n\n  return result;\n};\n\nconst validateUsernames = (usernames: string[]) => {\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  const empty = usernames.some((str: string) => !str);\n  if (empty) {\n    validation.errMsg = 'At least one username is missing';\n\n    return validation;\n  }\n\n  const uniqueUsernames = uniq(usernames);\n  if (uniqueUsernames.length !== usernames.length) {\n    validation.errMsg = 'At least one username is duplicated';\n\n    return validation;\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst validateTimes = (times: string[]) => {\n  const positionNotTime: number[] = [];\n  const validation: Validation = {\n    correct: false,\n    errMsg: ''\n  };\n\n  times.forEach((time: string, index: number) => {\n    const timeIsValid = REGEX_TIME.test(time) || time === TIME_DNF;\n\n    if (!timeIsValid) {\n      positionNotTime.push(index + 1);\n    }\n  });\n\n  if (positionNotTime.length > 0) {\n    validation.errMsg = `The following positions have incorrect formatted times: ${positionNotTime.join(', ')}`;\n    return validation;\n  }\n\n  const minIndexTimeDnf = times.indexOf(TIME_DNF);\n  if (minIndexTimeDnf !== -1) {\n    const positionAfterDnf = [];\n\n    for (let i = minIndexTimeDnf + 1; i < times.length; i++) {\n      if (times[i] !== TIME_DNF) {\n        positionAfterDnf.push(i + 1);\n      }\n    }\n\n    if (positionAfterDnf.length > 0) {\n      validation.errMsg = `The following positions finished after somebody that did not finish: ${positionAfterDnf.join(\n        ', '\n      )}`;\n\n      return validation;\n    }\n  }\n\n  const finishedTimesLength = minIndexTimeDnf !== -1 ? minIndexTimeDnf : times.length;\n  const finishedTimes = times.slice(0, finishedTimesLength);\n  const finishedTimesMs = finishedTimes.map(convertToMs);\n  const copyMs = [...finishedTimesMs];\n  const sortedTimesMs = copyMs.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (finishedTimesMs.toString() !== sortedTimesMs.toString()) {\n    validation.errMsg = `From position 1 to position ${finishedTimesLength}, times are not in chronological order`;\n\n    return validation;\n  }\n\n  if (sortedTimesMs.length > 1) {\n    const maxTime = sortedTimesMs[sortedTimesMs.length - 1];\n    const minTime = sortedTimesMs[0];\n\n    const diffTime = maxTime - minTime;\n    if (diffTime > CTR_MAX_TIME_DIFF_SEC * 1_000) {\n      validation.errMsg = `There are more than ${CTR_MAX_TIME_DIFF_SEC} seconds separating players`;\n\n      return validation;\n    }\n  }\n\n  validation.correct = true;\n  return validation;\n};\n\nconst logTime = (label: string, end = false) => {\n  if (!LOG_CONSOLE) return;\n\n  if (end) {\n    console.timeEnd(label);\n  } else {\n    console.time(label);\n  }\n};\n\nconst logError = (err: any) => {\n  if (!LOG_CONSOLE) return;\n\n  console.log(err);\n};\n\nconst sortAlphanumeric = (strA: string, strB: string) => {\n  const regexAlpha = /[^a-zA-Z]/g;\n  const regexNumeric = /[^0-9]/g;\n\n  var newA = strA.replace(regexAlpha, '');\n  var newB = strB.replace(regexAlpha, '');\n\n  if (newA === newB) {\n    var aN = parseInt(strA.replace(regexNumeric, ''), 10);\n    var bN = parseInt(strB.replace(regexNumeric, ''), 10);\n    return aN === bN ? 0 : aN > bN ? 1 : -1;\n  }\n\n  return newA > newB ? 1 : -1;\n};\n\nconst getFilenameWithoutExtension = (filename: string) => {\n  if (!filename) return '';\n\n  const splits = filename.split('.');\n\n  return splits[0];\n};\n\nconst sortImagesByFilename = (images: any[]) => {\n  if (images.length === 0) return [];\n  if (images.length === 1) return images;\n\n  const sortedImages = images.sort((imageA: any, imageB: any) => {\n    const { name: nameA } = imageA;\n    const { name: nameB } = imageB;\n\n    const newNameA = getFilenameWithoutExtension(nameA);\n    const newNameB = getFilenameWithoutExtension(nameB);\n\n    return sortAlphanumeric(newNameA, newNameB);\n  });\n\n  return sortedImages;\n};\n\nexport {\n  applyRatio,\n  charRange,\n  cleanString,\n  convertToMs,\n  formatCpuPlayers,\n  getFilenameWithoutExtension,\n  getMimeType,\n  getPlayers,\n  getReferencePlayers,\n  getCloserString,\n  getExtract,\n  getParams,\n  isHumanPlayer,\n  logError,\n  logTime,\n  numberRange,\n  positionIsValid,\n  sortAlphanumeric,\n  sortImagesByFilename,\n  validateTimes,\n  validateUsernames\n};\n","import { charRange, numberRange } from './utils';\n\n// In the game CTR:NF, once player 1 finishes, online players have 30 seconds to complete the race\n// TODO: verify behavior in offline races\nexport const CTR_MAX_TIME_DIFF_SEC = 30;\nexport const CTR_MAX_PLAYERS = 8;\n\nexport const AUTHOR_NAME = 'sebranly';\nexport const AUTHOR_GITHUB = `https://${AUTHOR_NAME}.github.io`;\nexport const PROJECT_NAME = 'ctr-ocr';\nexport const JSON_FOLDER = 'ctr-ocr';\nexport const PROJECT_URL = `https://github.com/${AUTHOR_NAME}/${PROJECT_NAME}`;\nexport const CRASH_TEAM_RANKING_AUTHOR_URL = 'https://crashteamranking.com/members/siblingbling/tt/';\nexport const GUIDE_FOLDER = `${PROJECT_URL}/blob/main/doc/guide/`;\nexport const LOG_CONSOLE = false;\nexport const MAX_HEIGHT_IMG = 1_000;\nexport const CANONICAL_URL = `${AUTHOR_GITHUB}/${PROJECT_NAME}`;\nexport const CHARLIST_UPPERCASE_LETTERS = charRange('A', 'Z').join('');\nexport const CHARLIST_LOWERCASE_LETTERS = charRange('a', 'z').join('');\nexport const CHARLIST_LETTERS = `${CHARLIST_LOWERCASE_LETTERS}${CHARLIST_UPPERCASE_LETTERS}`;\nexport const CHARLIST_DIGITS = numberRange(0, 9).join('');\nexport const CHARLIST_POSITION = numberRange(1, CTR_MAX_PLAYERS).join('');\nexport const CHARLIST_TIME = `${CHARLIST_DIGITS}:-`;\nexport const CHARLIST_USERNAME = `${CHARLIST_LETTERS}${CHARLIST_DIGITS}:-_. `;\nexport const MIME_JPEG = 'image/jpeg';\nexport const MIME_PNG = 'image/png';\nexport const PSM_SINGLE_CHAR = '10';\nexport const PSM_SINGLE_LINE = '7';\nexport const SEPARATOR_PLAYERS = '\\n';\nexport const TIME_DNF = '--:--:--';\nexport const WEBSITE_TITLE = 'Crash Team Results';\nexport const WEBSITE_VERSION = '1.0.3';\nexport const WEBSITE_DEFAULT_LANGUAGE = 'en';\nexport const PLACEHOLDER_CPUS = 'Loading CPUs...';\nexport const URL_CPUS = `${AUTHOR_GITHUB}/json/${JSON_FOLDER}/players.json`;\nexport const EXAMPLE_IMAGES_FOLDER = `https://raw.githubusercontent.com/${AUTHOR_NAME}/${PROJECT_NAME}/main/src/img/examples/`;\nexport const EXAMPLE_IMAGES_FOLDER_FULL_EVENT = `${PROJECT_URL}/tree/main/src/img/examples/full-event/`;\nexport const PLACEHOLDER_PLAYERS = `Hyène_JurassX\nAlexiz\nColonel_Hay\nTATANE`;\n","import * as React from 'react';\nimport './App.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { Category, Progress, Result } from './types';\nimport getColors from 'get-image-colors';\nimport Jimp from 'jimp';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport { isMobile } from 'react-device-detect';\n\nimport {\n  CANONICAL_URL,\n  CRASH_TEAM_RANKING_AUTHOR_URL,\n  CTR_MAX_PLAYERS,\n  EXAMPLE_IMAGES_FOLDER,\n  EXAMPLE_IMAGES_FOLDER_FULL_EVENT,\n  GUIDE_FOLDER,\n  MAX_HEIGHT_IMG,\n  MIME_JPEG,\n  MIME_PNG,\n  PLACEHOLDER_CPUS,\n  PLACEHOLDER_PLAYERS,\n  PROJECT_URL,\n  URL_CPUS,\n  WEBSITE_DEFAULT_LANGUAGE,\n  WEBSITE_TITLE,\n  WEBSITE_VERSION\n} from './constants';\nimport {\n  cleanString,\n  formatCpuPlayers,\n  getCloserString,\n  getExtract,\n  getMimeType,\n  getParams,\n  getPlayers,\n  getReferencePlayers,\n  isHumanPlayer,\n  logError,\n  logTime,\n  numberRange,\n  sortImagesByFilename,\n  validateUsernames\n} from './utils';\n\nconst language = 'eng';\n\nconst App = () => {\n  const renderProgressBar = () => {\n    if (ocrProgress !== Progress.Started) return null;\n\n    return (\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar-value\"></div>\n        <div className=\"progress-bar-text\">{ocrProgressText}</div>\n      </div>\n    );\n  };\n\n  const renderTable = (index: number) => {\n    return (\n      <table className=\"flex-1\">\n        <thead>\n          <tr>\n            <th>Position</th>\n            {includeCpuPlayers && <th>Type</th>}\n            <th>Name</th>\n          </tr>\n        </thead>\n        {renderBody(index)}\n      </table>\n    );\n  };\n\n  const renderCroppedImage = (index: number) => {\n    if (!croppedImages || croppedImages.length <= index) return null;\n\n    const classes = isMobile ? 'img-show max-width-100' : 'img-show max-width-45';\n\n    return <img alt=\"Cropped Results\" className={classes} src={croppedImages[index]} />;\n  };\n\n  const renderImages = () => {\n    if (isMobile) {\n      return imagesURLs.map((imageSrc: string, index: number) => (\n        <img alt=\"tbd\" className=\"img-full max-width-100 block\" key={`${imageSrc}-${index}`} src={imageSrc} />\n      ));\n    }\n\n    return (\n      <div className=\"flex-container center\">\n        {imagesURLs.map((imageSrc: string, index: number) => (\n          <img alt=\"tbd\" className=\"img-full max-width-45 flex-1\" key={`${imageSrc}-${index}`} src={imageSrc} />\n        ))}\n      </div>\n    );\n  };\n\n  const renderBody = (index: number) => {\n    const renderOption = (option: string) => {\n      const label = `${option}`;\n      return (\n        <option key={option} label={label} value={option}>\n          {label}\n        </option>\n      );\n    };\n\n    const renderOptions = () => {\n      const optionsResultsPlayerHuman = getPlayers(players).sort();\n      if (!includeCpuPlayers) {\n        return optionsResultsPlayerHuman.map(renderOption);\n      }\n\n      const optionsResultsPlayerCpu = getPlayers(cpuPlayers).sort();\n\n      return (\n        <>\n          <optgroup key=\"human\" label=\"Human\">\n            {optionsResultsPlayerHuman.map(renderOption)}\n          </optgroup>\n          <optgroup key=\"cpus\" label=\"CPUs\">\n            {optionsResultsPlayerCpu.map(renderOption)}\n          </optgroup>\n        </>\n      );\n    };\n\n    return (\n      <tbody>\n        {resultsOcr[index].map((resultOcr: Result, indexPlayer: number) => {\n          const { position, username } = resultOcr;\n          const key = `${position}-${username}`;\n\n          return (\n            <tr key={key}>\n              <td>{position}</td>\n              {includeCpuPlayers && <td>{isHumanPlayer(username, players) ? '👤' : '🤖'}</td>}\n              <td>\n                <select\n                  disabled={selectIsDisabled}\n                  onChange={onChangeResultsPlayer(index, indexPlayer)}\n                  value={username}\n                >\n                  {renderOptions()}\n                </select>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderRace = (index: number) => {\n    const labelRace = `Race ${index + 1}`;\n    const validationUsernames = validateUsernames(resultsOcr[index].map((r: Result) => r.username));\n\n    return (\n      <div key={index}>\n        <h3>{labelRace}</h3>\n        {renderCroppedImage(index)}\n        <div className=\"flex-container results\">{renderTable(index)}</div>\n        {!validationUsernames.correct && <div className=\"red\">{validationUsernames.errMsg}</div>}\n      </div>\n    );\n  };\n\n  const renderRaces = () => {\n    if (!resultsOcr || resultsOcr.length === 0) return null;\n\n    return (\n      <>\n        <div className=\"center\">\n          <h2>Results</h2>\n          {resultsOcr.map((_resultOcr: Result[], index: number) => renderRace(index))}\n        </div>\n      </>\n    );\n  };\n\n  const renderFooter = () => {\n    return (\n      <>\n        <div className=\"mt2 text-center\">\n          Developed by{' '}\n          <a href={PROJECT_URL} rel=\"noopener noreferrer\" title=\"GitHub page for repository\" target=\"_blank\">\n            sebranly\n          </a>{' '}\n          (PSN:{' '}\n          <a\n            href={CRASH_TEAM_RANKING_AUTHOR_URL}\n            rel=\"noopener noreferrer\"\n            title=\"Crash Team Ranking for ZouGui28\"\n            target=\"_blank\"\n          >\n            ZouGui28\n          </a>\n          ) with ❤️\n        </div>\n        <div className=\"mt2 text-center\">{`Website version ${WEBSITE_VERSION}`}</div>\n      </>\n    );\n  };\n\n  const renderCpuMainSection = () => {\n    return (\n      <>\n        <h3>CPUs</h3>\n        {renderCpuSection()}\n      </>\n    );\n  };\n\n  const renderMainSection = () => {\n    if (nbPlayersTyped === 0) return null;\n\n    const jpgImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.JPG`;\n    const pngImage = `${EXAMPLE_IMAGES_FOLDER}IMG1.PNG`;\n    const guideImage = `${GUIDE_FOLDER}Images.md`;\n\n    return (\n      <>\n        {renderCpuMainSection()}\n        <h2>Images</h2>\n        <div className=\"text-center mb\">\n          <div className=\"ml block mb bold\">Screenshots will be ordered alphabetically by name</div>\n          <div className=\"ml block mb\">\n            Select screenshots in JPG/JPEG or PNG format, taken right when Returning to Lobby was around 14 seconds\n          </div>\n          <div className=\"ml block mb\">\n            Examples of valid screenshots:{' '}\n            <a href={jpgImage} rel=\"noopener noreferrer\" title=\"Example of valid JPEG screenshot\" target=\"_blank\">\n              JPG/JPEG\n            </a>{' '}\n            and{' '}\n            <a href={pngImage} rel=\"noopener noreferrer\" title=\"Example of valid PNG screenshot\" target=\"_blank\">\n              PNG\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            You can upload multiple images at once, as in this{' '}\n            <a\n              href={EXAMPLE_IMAGES_FOLDER_FULL_EVENT}\n              rel=\"noopener noreferrer\"\n              title=\"Example of a valid 10-race event\"\n              target=\"_blank\"\n            >\n              10-race example\n            </a>\n          </div>\n          <div className=\"ml block mb\">\n            For more information, please refer to the{' '}\n            <a href={guideImage} rel=\"noopener noreferrer\" title=\"Guide about Images\" target=\"_blank\">\n              images guide\n            </a>\n          </div>\n          <input\n            className=\"inline mt\"\n            disabled={selectIsDisabled}\n            type=\"file\"\n            multiple\n            accept={[MIME_JPEG, MIME_PNG].join(', ')}\n            onChange={onChangeImage}\n          />\n          <input\n            className=\"inline-block ml\"\n            type=\"button\"\n            value=\"Start recognition\"\n            disabled={selectIsDisabled || !imagesURLs || imagesURLs.length === 0}\n            onClick={doOCR}\n          />\n        </div>\n        {renderImages()}\n        {renderRaces()}\n      </>\n    );\n  };\n\n  const renderCpuSection = () => {\n    if (!cpuData || Object.keys(cpuData).length === 0) return <div className=\"text-center mb\">{PLACEHOLDER_CPUS}</div>;\n\n    const guideCpu = `${GUIDE_FOLDER}CPUs.md`;\n\n    const optionsCpuLanguages = Object.keys(cpuData);\n    const textCheckbox = shouldIncludeCpuPlayers\n      ? `Automatically activated bots because ${nbPlayersTyped} human player(s) was/were filled out of a total of ${nbPlayers} players`\n      : 'Check this if there were bots during the race';\n\n    return (\n      <>\n        <div className=\"text-center mb\">\n          <input\n            name=\"includeCpuPlayers\"\n            type=\"checkbox\"\n            checked={includeCpuPlayers}\n            onChange={onCpuCheckboxChange}\n            disabled={shouldIncludeCpuPlayers}\n          />\n          <div className=\"ml inline\">{textCheckbox}</div>\n        </div>\n        {includeCpuPlayers && (\n          <>\n            <div className=\"text-center mb\">\n              Bots are automatically determined based on the language and cannot be edited\n            </div>\n            <div className=\"ml block mb\">\n              For more information, please refer to the{' '}\n              <a href={guideCpu} rel=\"noopener noreferrer\" title=\"Guide about CPUs\" target=\"_blank\">\n                CPUs guide\n              </a>\n            </div>\n            <div className=\"inline mr\">Language in images</div>\n            <select disabled={selectIsDisabled} onChange={onChangeCpuLanguage} value={cpuLanguage}>\n              {optionsCpuLanguages.map((option: string) => {\n                const label = `${option}`;\n                return (\n                  <option key={option} label={label} value={option}>\n                    {label}\n                  </option>\n                );\n              })}\n            </select>\n            <textarea\n              className={`textarea-${classPlatform}`}\n              disabled={true}\n              placeholder={PLACEHOLDER_CPUS}\n              rows={CTR_MAX_PLAYERS}\n              value={cpuPlayers}\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  const onMount = async () => {\n    // TODO: initialize?\n    setOnMountOver(true);\n    setSelectIsDisabled(false);\n    fetch(URL_CPUS)\n      .then((response) => response.json())\n      .then((data) => {\n        setCpuData(data);\n        setCpuPlayers(formatCpuPlayers((data as any)[WEBSITE_DEFAULT_LANGUAGE]));\n      });\n  };\n\n  const doOCR = async () => {\n    if (!onMountOver) return;\n\n    setSelectIsDisabled(true);\n    setOcrProgress(Progress.Started);\n    setOcrProgressText('Initialization...');\n    setResultsOcr([]);\n    setCroppedImages([]);\n\n    const schedulerUsername = createScheduler();\n\n    const workerUsername = createWorker({\n      // logger: (m: any) => console.log(m)\n    });\n\n    schedulerUsername.addWorker(workerUsername);\n\n    await workerUsername.load();\n    await workerUsername.loadLanguage(language);\n    await workerUsername.initialize(language);\n    const usernameParams = getParams(Category.Username);\n    await workerUsername.setParameters(usernameParams);\n\n    const playerIndexes = numberRange(0, nbPlayers - 1);\n\n    const promisesX = async (\n      playerIndex: number,\n      category: Category,\n      info: any, // TODO: type it better\n      imgTransCopy: any\n    ) => {\n      const scheduler = schedulerUsername;\n      const dimensions = getExtract(info, playerIndex, category);\n      const { extension } = info;\n      const mimeType = getMimeType(extension);\n\n      const extracted = imgTransCopy.crop(dimensions.left, dimensions.top, dimensions.width, dimensions.height);\n      const options = {\n        count: 2,\n        type: mimeType\n      };\n\n      const buffer: any = await extracted.getBufferAsync(mimeType);\n      const rgb = await getColors(buffer, options).then((colors: any) => {\n        return [colors[0].rgb(), colors[1].rgb()];\n      });\n\n      const shouldInvert = rgb[0][0] < rgb[1][0] && rgb[0][1] < rgb[1][1] && rgb[0][2] < rgb[1][2];\n      const extractedFin = shouldInvert ? extracted.invert() : extracted;\n\n      const bufferFin: any = await extractedFin.getBufferAsync(mimeType);\n      return scheduler.addJob('recognize', bufferFin);\n    };\n\n    let resultsOcrTemp: Result[][] = [];\n    let croppedImagesTemp: string[] = [];\n\n    // TODO: have better error handling\n    for (let i = 0; i < imagesURLs.length; i++) {\n      try {\n        const progressText = `Image ${i + 1} out of ${imagesURLs.length}...`;\n        setOcrProgressText(progressText);\n\n        logTime('imgRead');\n        const imgJimpTemp = await Jimp.read(imagesURLs[i]);\n        logTime('imgRead', true);\n\n        const initialHeight = imgJimpTemp.bitmap.height;\n        const shouldResize = initialHeight > MAX_HEIGHT_IMG;\n\n        if (shouldResize) logTime('imgResize');\n\n        const imgJimp = shouldResize ? imgJimpTemp.resize(Jimp.AUTO, MAX_HEIGHT_IMG) : imgJimpTemp;\n\n        if (shouldResize) logTime('imgResize', true);\n\n        logTime('imgRotate');\n\n        const imgTrans = imgJimp.rotate(-6.2);\n\n        logTime('imgRotate', true);\n\n        logTime('imgRest');\n\n        const h = imgTrans.bitmap.height;\n        const w = imgTrans.bitmap.width;\n        const extension = imgTrans.getExtension();\n        const info = { height: h, extension, width: w };\n        const dimensionsCrop = getExtract(info, nbPlayers, Category.All);\n\n        const imgTransCopy = imgTrans.clone();\n        const extractedCrop = imgTransCopy.crop(\n          dimensionsCrop.left,\n          dimensionsCrop.top,\n          dimensionsCrop.width,\n          dimensionsCrop.height\n        );\n\n        // eslint-disable-next-line no-loop-func\n        extractedCrop.getBase64(MIME_JPEG, (err: any, src: string) => {\n          croppedImagesTemp.push(src);\n        });\n\n        const imgTransGray = imgTrans.grayscale();\n\n        logTime('imgRest', true);\n\n        logTime('promisesCreation');\n\n        const promisesNames = playerIndexes.map((playerIndex) =>\n          promisesX(playerIndex, Category.Username, info, imgTransGray.clone())\n        );\n\n        logTime('promisesCreation', true);\n\n        logTime('promisesResolve');\n\n        const results = await Promise.all(promisesNames);\n\n        logTime('promisesResolve', true);\n\n        const resultsNames = results.map((r) => cleanString((r as any).data.text));\n\n        const dataResults: Result[] = [];\n        const referencePlayers = getReferencePlayers(players, cpuPlayers, includeCpuPlayers);\n        playerIndexes.forEach((playerIndex) => {\n          const playerGuess = resultsNames[playerIndex];\n          const result: Result = {\n            username: getCloserString(playerGuess, referencePlayers),\n            position: playerIndex + 1\n          };\n\n          dataResults.push(result);\n        });\n\n        resultsOcrTemp.push(dataResults);\n      } catch (err) {\n        // TODO: have better error handling\n        logError(err);\n        setSelectIsDisabled(false);\n      }\n    }\n\n    setResultsOcr(resultsOcrTemp);\n    setCroppedImages(croppedImagesTemp);\n    setOcrProgress(Progress.Done);\n    setOcrProgressText('');\n    setSelectIsDisabled(false);\n\n    await schedulerUsername.terminate();\n  };\n\n  const { width, height } = useWindowSize();\n  const [ocrProgress, setOcrProgress] = React.useState(Progress.NotStarted);\n  const [ocrProgressText, setOcrProgressText] = React.useState('');\n  const [images, setImages] = React.useState<any[]>([]);\n  const [imagesURLs, setImagesURLs] = React.useState<any[]>([]);\n  const [croppedImages, setCroppedImages] = React.useState<any[]>([]);\n  const [nbPlayers, setNbPlayers] = React.useState(CTR_MAX_PLAYERS);\n  const [cpuLanguage, setCpuLanguage] = React.useState(WEBSITE_DEFAULT_LANGUAGE);\n  const [selectIsDisabled, setSelectIsDisabled] = React.useState(true);\n  const [onMountOver, setOnMountOver] = React.useState(false);\n  const [resultsOcr, setResultsOcr] = React.useState<Result[][]>([]);\n  const [players, setPlayers] = React.useState<string>('');\n  const [cpuPlayers, setCpuPlayers] = React.useState<string>(PLACEHOLDER_CPUS);\n  const [cpuData, setCpuData] = React.useState<any>({});\n  const [includeCpuPlayers, setIncludeCpuPlayers] = React.useState(false);\n\n  // TODO: do uniq\n  const nbPlayersTyped = getPlayers(players).length;\n  const shouldIncludeCpuPlayers = nbPlayersTyped < nbPlayers;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  React.useEffect(() => {\n    if (images.length < 1) return;\n    const newImageUrls: any[] = [];\n    const sortImages = sortImagesByFilename(images);\n    sortImages.forEach((image) => {\n      newImageUrls.push(URL.createObjectURL(image));\n    });\n    setImagesURLs(newImageUrls);\n  }, [images]);\n\n  React.useEffect(() => {\n    if (shouldIncludeCpuPlayers && !includeCpuPlayers) {\n      setIncludeCpuPlayers(true);\n    }\n  }, [shouldIncludeCpuPlayers, includeCpuPlayers]);\n\n  const onPlayersChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPlayers(e.currentTarget.value);\n  };\n\n  const onChangeImage = (e: any) => {\n    setImages([...e.target.files]);\n    setResultsOcr([]);\n  };\n\n  const onChangeNbPlayers = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNbPlayers(Number(e.target.value));\n  };\n\n  const onChangeCpuLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCpuLanguage(e.target.value);\n    setCpuPlayers(formatCpuPlayers(cpuData[e.target.value]));\n  };\n\n  const onChangeResultsPlayer =\n    (indexResultOcr: number, indexPlayer: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      if (!resultsOcr || resultsOcr.length < indexResultOcr) return;\n      const copy = [...resultsOcr];\n      copy[indexResultOcr][indexPlayer].username = e.target.value;\n      setResultsOcr(copy);\n    };\n\n  const onCpuCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIncludeCpuPlayers(e.target.checked);\n  };\n\n  const optionsNbPlayers = numberRange(2, CTR_MAX_PLAYERS);\n  const classPlatform = isMobile ? 'mobile' : 'desktop';\n  const classBgDisabled = selectIsDisabled ? 'bg-grey' : 'bg-white';\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{WEBSITE_TITLE}</title>\n        <link rel=\"canonical\" href={CANONICAL_URL} />\n      </Helmet>\n      <div className=\"main\">\n        <h1>{WEBSITE_TITLE}</h1>\n        <div className=\"w3-light-grey\"></div>\n        {ocrProgress === Progress.Done && (\n          <Confetti width={width} height={height} numberOfPieces={800} recycle={false} />\n        )}\n        <div className={`center main-content-${classPlatform} ${classBgDisabled}`}>\n          {renderProgressBar()}\n          <h2>Players</h2>\n          <h3>Number of players</h3>\n          <div className=\"text-center mb\">This includes CPUs if any</div>\n          <select disabled={selectIsDisabled} onChange={onChangeNbPlayers} value={nbPlayers}>\n            {optionsNbPlayers.map((option: number) => {\n              const label = `${option} players`;\n              return (\n                <option key={option} label={label} value={option}>\n                  {label}\n                </option>\n              );\n            })}\n          </select>\n          <h3>Human Players</h3>\n          <div className=\"text-center mb\">Type all human players present in the races. Type one username per line.</div>\n          <textarea\n            className={`textarea-${classPlatform}`}\n            disabled={selectIsDisabled}\n            placeholder={PLACEHOLDER_PLAYERS}\n            rows={nbPlayers}\n            value={players}\n            onChange={onPlayersChange}\n          />\n          {renderMainSection()}\n        </div>\n        {renderFooter()}\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}